:py:mod:`elfpy.utils.post_processing`
=====================================

.. py:module:: elfpy.utils.post_processing

.. autoapi-nested-parse::

   Helper functions for post-processing simulation outputs

   ..
       !! processed by numpydoc !!


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   elfpy.utils.post_processing.get_simulation_state_df
   elfpy.utils.post_processing.compute_derived_variables
   elfpy.utils.post_processing.add_pnl_columns
   elfpy.utils.post_processing.aggregate_trade_data



.. py:function:: get_simulation_state_df(simulator: elfpy.simulators.Simulator) -> pandas.DataFrame

   
   Converts the simulator output dictionary to a pandas dataframe

   :param simulation_state: simulation_state, which is a member variable of the Simulator class
   :type simulation_state: SimulationState

   :returns: **trades** -- Pandas dataframe containing the simulation_state keys as columns, as well as some computed columns
   :rtype: DataFrame















   ..
       !! processed by numpydoc !!

.. py:function:: compute_derived_variables(simulator: elfpy.simulators.Simulator) -> pandas.DataFrame

   
   Converts the simulator output dictionary to a pandas dataframe and computes derived variables

   :param simulation_state: simulation_state, which is a member variable of the Simulator class
   :type simulation_state: SimulationState

   :returns: **trades** -- Pandas dataframe containing the simulation_state keys as columns, as well as some computed columns
   :rtype: DataFrame















   ..
       !! processed by numpydoc !!

.. py:function:: add_pnl_columns(trades_df: pandas.DataFrame) -> None

   
   Adds Profit and Loss Column for every agent to the dataframe that is passed in
















   ..
       !! processed by numpydoc !!

.. py:function:: aggregate_trade_data(trades: pandas.DataFrame) -> pandas.DataFrame

   
   Aggregate trades dataframe by computing means

   :param trades: Pandas dataframe containing the simulation_state keys as columns, as well as some computed columns
   :type trades: DataFrame

   :returns: **trades_agg** -- aggregated dataframe that keeps the model_name and day columns
             and computes the mean over spot price
   :rtype: DataFrame















   ..
       !! processed by numpydoc !!

