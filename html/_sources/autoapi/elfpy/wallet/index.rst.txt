:py:mod:`elfpy.wallet`
======================

.. py:module:: elfpy.wallet

.. autoapi-nested-parse::

   Implements abstract classes that control user behavior

   ..
       !! processed by numpydoc !!


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   elfpy.wallet.Long
   elfpy.wallet.Short
   elfpy.wallet.Wallet




.. py:class:: Long

   
   An open long position.

   :param balance: The amount of bonds that the position is long.
   :type balance: float















   ..
       !! processed by numpydoc !!
   .. py:attribute:: balance
      :type: float

      


.. py:class:: Short

   
   An open short position.

   :param balance: The amount of bonds that the position is short.
   :type balance: float
   :param margin: The amount of margin the short position has.
   :type margin: float















   ..
       !! processed by numpydoc !!
   .. py:attribute:: balance
      :type: float

      

   .. py:attribute:: margin
      :type: float

      


.. py:class:: Wallet

   
   Stores what is in the agent's wallet

   :param address: The trader's address.
   :type address: int
   :param base: The base assets that held by the trader.
   :type base: float
   :param lp_tokens: The LP tokens held by the trader.
   :type lp_tokens: float
   :param longs: The long positions held by the trader.
   :type longs: Dict[float, Long]
   :param shorts: The short positions held by the trader.
   :type shorts: Dict[float, Short]
   :param fees_paid: The fees paid by the wallet.
   :type fees_paid: float















   ..
       !! processed by numpydoc !!
   .. py:attribute:: address
      :type: int

      

   .. py:attribute:: base
      :type: float
      :value: 0

      

   .. py:attribute:: lp_tokens
      :type: float
      :value: 0

      

   .. py:attribute:: longs
      :type: Dict[float, Long]

      

   .. py:attribute:: shorts
      :type: Dict[float, Short]

      

   .. py:attribute:: fees_paid
      :type: float
      :value: 0

      

   .. py:method:: get_state(market: elfpy.markets.Market) -> dict

      
      The wallet's current state of public variables

      .. todo:: TODO: return a dataclass instead of dict to avoid having to check keys & the get_state_keys func















      ..
          !! processed by numpydoc !!

   .. py:method:: get_state_keys() -> list

      
      Get state keys for a wallet.
















      ..
          !! processed by numpydoc !!


