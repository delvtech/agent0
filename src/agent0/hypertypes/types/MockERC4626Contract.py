"""A web3.py Contract class for the MockERC4626 contract.

DO NOT EDIT.  This file was generated by pypechain.  See documentation at
https://github.com/delvtech/pypechain"""

# contracts have PascalCase names
# pylint: disable=invalid-name

# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments

# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return

# This file is bound to get very long depending on contract sizes.
# pylint: disable=too-many-lines

# methods are overriden with specific arguments instead of generic *args, **kwargs
# pylint: disable=arguments-differ

# consumers have too many opinions on line length
# pylint: disable=line-too-long


from __future__ import annotations

from typing import Any, Iterable, NamedTuple, Sequence, Type, cast, overload

from eth_account.signers.local import LocalAccount
from eth_typing import ChecksumAddress, HexStr
from hexbytes import HexBytes
from typing_extensions import Self
from web3 import Web3
from web3._utils.filters import LogFilter
from web3.contract.contract import (
    Contract,
    ContractConstructor,
    ContractEvent,
    ContractEvents,
    ContractFunction,
    ContractFunctions,
)
from web3.exceptions import FallbackNotFound
from web3.types import ABI, BlockIdentifier, CallOverride, EventData, TxParams

from .utilities import dataclass_to_tuple, rename_returned_types, try_bytecode_hexbytes

structs = {}


class MockERC4626DOMAIN_SEPARATORContractFunction(ContractFunction):
    """ContractFunction for the DOMAIN_SEPARATOR method."""

    def __call__(self) -> MockERC4626DOMAIN_SEPARATORContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bytes:
        """returns bytes."""
        # Define the expected return types from the smart contract call

        return_types = bytes

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(bytes, rename_returned_types(structs, return_types, raw_values))


class MockERC4626AllowanceContractFunction(ContractFunction):
    """ContractFunction for the allowance method."""

    def __call__(self, arg1: str, arg2: str) -> MockERC4626AllowanceContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(arg1), dataclass_to_tuple(arg2))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(int, rename_returned_types(structs, return_types, raw_values))


class MockERC4626ApproveContractFunction(ContractFunction):
    """ContractFunction for the approve method."""

    def __call__(self, spender: str, amount: int) -> MockERC4626ApproveContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(spender), dataclass_to_tuple(amount))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bool:
        """returns bool."""
        # Define the expected return types from the smart contract call

        return_types = bool

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(bool, rename_returned_types(structs, return_types, raw_values))


class MockERC4626AssetContractFunction(ContractFunction):
    """ContractFunction for the asset method."""

    def __call__(self) -> MockERC4626AssetContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(str, rename_returned_types(structs, return_types, raw_values))


class MockERC4626AuthorityContractFunction(ContractFunction):
    """ContractFunction for the authority method."""

    def __call__(self) -> MockERC4626AuthorityContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(str, rename_returned_types(structs, return_types, raw_values))


class MockERC4626BalanceOfContractFunction(ContractFunction):
    """ContractFunction for the balanceOf method."""

    def __call__(self, arg1: str) -> MockERC4626BalanceOfContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(arg1))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(int, rename_returned_types(structs, return_types, raw_values))


class MockERC4626BurnContractFunction0(ContractFunction):
    """ContractFunction for the burn method."""

    def __call__(self, amount: int) -> MockERC4626BurnContractFunction:  # type: ignore
        super().__call__()  # type: ignore
        return cast(MockERC4626BurnContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)


class MockERC4626BurnContractFunction1(ContractFunction):
    """ContractFunction for the burn method."""

    def __call__(self, destination: str, amount: int) -> MockERC4626BurnContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(destination), dataclass_to_tuple(amount))  # type: ignore
        return cast(MockERC4626BurnContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)


class MockERC4626BurnContractFunction(ContractFunction):
    """ContractFunction for the burn method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    @overload
    def __call__(self, amount: int) -> MockERC4626BurnContractFunction0:  # type: ignore
        ...

    @overload
    def __call__(self, destination: str, amount: int) -> MockERC4626BurnContractFunction1:  # type: ignore
        ...

    def __call__(self, *args) -> MockERC4626BurnContractFunction:  # type: ignore
        clone = super().__call__(*(dataclass_to_tuple(arg) for arg in args))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self  # type: ignore


class MockERC4626CanCallContractFunction(ContractFunction):
    """ContractFunction for the canCall method."""

    def __call__(self, user: str, target: str, functionSig: bytes) -> MockERC4626CanCallContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(user), dataclass_to_tuple(target), dataclass_to_tuple(functionSig))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bool:
        """returns bool."""
        # Define the expected return types from the smart contract call

        return_types = bool

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(bool, rename_returned_types(structs, return_types, raw_values))


class MockERC4626ConvertToAssetsContractFunction(ContractFunction):
    """ContractFunction for the convertToAssets method."""

    def __call__(self, shares: int) -> MockERC4626ConvertToAssetsContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(shares))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(int, rename_returned_types(structs, return_types, raw_values))


class MockERC4626ConvertToSharesContractFunction(ContractFunction):
    """ContractFunction for the convertToShares method."""

    def __call__(self, assets: int) -> MockERC4626ConvertToSharesContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(assets))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(int, rename_returned_types(structs, return_types, raw_values))


class MockERC4626DecimalsContractFunction(ContractFunction):
    """ContractFunction for the decimals method."""

    def __call__(self) -> MockERC4626DecimalsContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(int, rename_returned_types(structs, return_types, raw_values))


class MockERC4626DepositContractFunction(ContractFunction):
    """ContractFunction for the deposit method."""

    def __call__(self, assets: int, receiver: str) -> MockERC4626DepositContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(assets), dataclass_to_tuple(receiver))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(int, rename_returned_types(structs, return_types, raw_values))


class MockERC4626DoesRoleHaveCapabilityContractFunction(ContractFunction):
    """ContractFunction for the doesRoleHaveCapability method."""

    def __call__(self, role: int, functionSig: bytes) -> MockERC4626DoesRoleHaveCapabilityContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(role), dataclass_to_tuple(functionSig))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bool:
        """returns bool."""
        # Define the expected return types from the smart contract call

        return_types = bool

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(bool, rename_returned_types(structs, return_types, raw_values))


class MockERC4626DoesUserHaveRoleContractFunction(ContractFunction):
    """ContractFunction for the doesUserHaveRole method."""

    def __call__(self, user: str, role: int) -> MockERC4626DoesUserHaveRoleContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(user), dataclass_to_tuple(role))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bool:
        """returns bool."""
        # Define the expected return types from the smart contract call

        return_types = bool

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(bool, rename_returned_types(structs, return_types, raw_values))


class MockERC4626GetRateContractFunction(ContractFunction):
    """ContractFunction for the getRate method."""

    def __call__(self) -> MockERC4626GetRateContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(int, rename_returned_types(structs, return_types, raw_values))


class MockERC4626GetRolesWithCapabilityContractFunction(ContractFunction):
    """ContractFunction for the getRolesWithCapability method."""

    def __call__(self, arg1: bytes) -> MockERC4626GetRolesWithCapabilityContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(arg1))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bytes:
        """returns bytes."""
        # Define the expected return types from the smart contract call

        return_types = bytes

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(bytes, rename_returned_types(structs, return_types, raw_values))


class MockERC4626GetTargetCustomAuthorityContractFunction(ContractFunction):
    """ContractFunction for the getTargetCustomAuthority method."""

    def __call__(self, arg1: str) -> MockERC4626GetTargetCustomAuthorityContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(arg1))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(str, rename_returned_types(structs, return_types, raw_values))


class MockERC4626GetUserRolesContractFunction(ContractFunction):
    """ContractFunction for the getUserRoles method."""

    def __call__(self, arg1: str) -> MockERC4626GetUserRolesContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(arg1))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bytes:
        """returns bytes."""
        # Define the expected return types from the smart contract call

        return_types = bytes

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(bytes, rename_returned_types(structs, return_types, raw_values))


class MockERC4626IsCapabilityPublicContractFunction(ContractFunction):
    """ContractFunction for the isCapabilityPublic method."""

    def __call__(self, arg1: bytes) -> MockERC4626IsCapabilityPublicContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(arg1))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bool:
        """returns bool."""
        # Define the expected return types from the smart contract call

        return_types = bool

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(bool, rename_returned_types(structs, return_types, raw_values))


class MockERC4626IsCompetitionModeContractFunction(ContractFunction):
    """ContractFunction for the isCompetitionMode method."""

    def __call__(self) -> MockERC4626IsCompetitionModeContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bool:
        """returns bool."""
        # Define the expected return types from the smart contract call

        return_types = bool

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(bool, rename_returned_types(structs, return_types, raw_values))


class MockERC4626IsUnrestrictedContractFunction(ContractFunction):
    """ContractFunction for the isUnrestricted method."""

    def __call__(self, arg1: str) -> MockERC4626IsUnrestrictedContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(arg1))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bool:
        """returns bool."""
        # Define the expected return types from the smart contract call

        return_types = bool

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(bool, rename_returned_types(structs, return_types, raw_values))


class MockERC4626MaxDepositContractFunction(ContractFunction):
    """ContractFunction for the maxDeposit method."""

    def __call__(self, arg1: str) -> MockERC4626MaxDepositContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(arg1))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(int, rename_returned_types(structs, return_types, raw_values))


class MockERC4626MaxMintContractFunction(ContractFunction):
    """ContractFunction for the maxMint method."""

    def __call__(self, arg1: str) -> MockERC4626MaxMintContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(arg1))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(int, rename_returned_types(structs, return_types, raw_values))


class MockERC4626MaxMintAmountContractFunction(ContractFunction):
    """ContractFunction for the maxMintAmount method."""

    def __call__(self) -> MockERC4626MaxMintAmountContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(int, rename_returned_types(structs, return_types, raw_values))


class MockERC4626MaxRedeemContractFunction(ContractFunction):
    """ContractFunction for the maxRedeem method."""

    def __call__(self, owner: str) -> MockERC4626MaxRedeemContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(owner))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(int, rename_returned_types(structs, return_types, raw_values))


class MockERC4626MaxWithdrawContractFunction(ContractFunction):
    """ContractFunction for the maxWithdraw method."""

    def __call__(self, owner: str) -> MockERC4626MaxWithdrawContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(owner))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(int, rename_returned_types(structs, return_types, raw_values))


class MockERC4626MintContractFunction0(ContractFunction):
    """ContractFunction for the mint method."""

    def __call__(self, destination: str, amount: int) -> MockERC4626MintContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(destination), dataclass_to_tuple(amount))  # type: ignore
        return cast(MockERC4626MintContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)


class MockERC4626MintContractFunction1(ContractFunction):
    """ContractFunction for the mint method."""

    def __call__(self, shares: int, receiver: str) -> MockERC4626MintContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(shares), dataclass_to_tuple(receiver))  # type: ignore
        return cast(MockERC4626MintContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function
        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)

        return cast(int, rename_returned_types(structs, return_types, raw_values))


class MockERC4626MintContractFunction2(ContractFunction):
    """ContractFunction for the mint method."""

    def __call__(self, amount: int) -> MockERC4626MintContractFunction:  # type: ignore
        super().__call__()  # type: ignore
        return cast(MockERC4626MintContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)


class MockERC4626MintContractFunction(ContractFunction):
    """ContractFunction for the mint method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    @overload
    def __call__(self, destination: str, amount: int) -> MockERC4626MintContractFunction0:  # type: ignore
        ...

    @overload
    def __call__(self, shares: int, receiver: str) -> MockERC4626MintContractFunction1:  # type: ignore
        ...

    @overload
    def __call__(self, amount: int) -> MockERC4626MintContractFunction2:  # type: ignore
        ...

    def __call__(self, *args) -> MockERC4626MintContractFunction:  # type: ignore
        clone = super().__call__(*(dataclass_to_tuple(arg) for arg in args))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self  # type: ignore


class MockERC4626NameContractFunction(ContractFunction):
    """ContractFunction for the name method."""

    def __call__(self) -> MockERC4626NameContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(str, rename_returned_types(structs, return_types, raw_values))


class MockERC4626NoncesContractFunction(ContractFunction):
    """ContractFunction for the nonces method."""

    def __call__(self, arg1: str) -> MockERC4626NoncesContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(arg1))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(int, rename_returned_types(structs, return_types, raw_values))


class MockERC4626OwnerContractFunction(ContractFunction):
    """ContractFunction for the owner method."""

    def __call__(self) -> MockERC4626OwnerContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(str, rename_returned_types(structs, return_types, raw_values))


class MockERC4626PermitContractFunction(ContractFunction):
    """ContractFunction for the permit method."""

    def __call__(self, owner: str, spender: str, value: int, deadline: int, v: int, r: bytes, s: bytes) -> MockERC4626PermitContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(owner),
            dataclass_to_tuple(spender),
            dataclass_to_tuple(value),
            dataclass_to_tuple(deadline),
            dataclass_to_tuple(v),
            dataclass_to_tuple(r),
            dataclass_to_tuple(s),
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class MockERC4626PreviewDepositContractFunction(ContractFunction):
    """ContractFunction for the previewDeposit method."""

    def __call__(self, assets: int) -> MockERC4626PreviewDepositContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(assets))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(int, rename_returned_types(structs, return_types, raw_values))


class MockERC4626PreviewMintContractFunction(ContractFunction):
    """ContractFunction for the previewMint method."""

    def __call__(self, shares: int) -> MockERC4626PreviewMintContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(shares))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(int, rename_returned_types(structs, return_types, raw_values))


class MockERC4626PreviewRedeemContractFunction(ContractFunction):
    """ContractFunction for the previewRedeem method."""

    def __call__(self, shares: int) -> MockERC4626PreviewRedeemContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(shares))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(int, rename_returned_types(structs, return_types, raw_values))


class MockERC4626PreviewWithdrawContractFunction(ContractFunction):
    """ContractFunction for the previewWithdraw method."""

    def __call__(self, assets: int) -> MockERC4626PreviewWithdrawContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(assets))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(int, rename_returned_types(structs, return_types, raw_values))


class MockERC4626RedeemContractFunction(ContractFunction):
    """ContractFunction for the redeem method."""

    def __call__(self, shares: int, receiver: str, owner: str) -> MockERC4626RedeemContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(shares), dataclass_to_tuple(receiver), dataclass_to_tuple(owner))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(int, rename_returned_types(structs, return_types, raw_values))


class MockERC4626SetAuthorityContractFunction(ContractFunction):
    """ContractFunction for the setAuthority method."""

    def __call__(self, newAuthority: str) -> MockERC4626SetAuthorityContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(newAuthority))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class MockERC4626SetMaxMintAmountContractFunction(ContractFunction):
    """ContractFunction for the setMaxMintAmount method."""

    def __call__(self, maxMintAmount: int) -> MockERC4626SetMaxMintAmountContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(maxMintAmount))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class MockERC4626SetPublicCapabilityContractFunction(ContractFunction):
    """ContractFunction for the setPublicCapability method."""

    def __call__(self, functionSig: bytes, enabled: bool) -> MockERC4626SetPublicCapabilityContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(functionSig), dataclass_to_tuple(enabled))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class MockERC4626SetRateContractFunction(ContractFunction):
    """ContractFunction for the setRate method."""

    def __call__(self, rate_: int) -> MockERC4626SetRateContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(rate_))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class MockERC4626SetRoleCapabilityContractFunction(ContractFunction):
    """ContractFunction for the setRoleCapability method."""

    def __call__(self, role: int, functionSig: bytes, enabled: bool) -> MockERC4626SetRoleCapabilityContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(role), dataclass_to_tuple(functionSig), dataclass_to_tuple(enabled))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class MockERC4626SetTargetCustomAuthorityContractFunction(ContractFunction):
    """ContractFunction for the setTargetCustomAuthority method."""

    def __call__(self, target: str, customAuthority: str) -> MockERC4626SetTargetCustomAuthorityContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(target), dataclass_to_tuple(customAuthority))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class MockERC4626SetUnrestrictedMintStatusContractFunction(ContractFunction):
    """ContractFunction for the setUnrestrictedMintStatus method."""

    def __call__(self, target: str, status: bool) -> MockERC4626SetUnrestrictedMintStatusContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(target), dataclass_to_tuple(status))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class MockERC4626SetUserRoleContractFunction(ContractFunction):
    """ContractFunction for the setUserRole method."""

    def __call__(self, user: str, role: int, enabled: bool) -> MockERC4626SetUserRoleContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(user), dataclass_to_tuple(role), dataclass_to_tuple(enabled))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class MockERC4626SymbolContractFunction(ContractFunction):
    """ContractFunction for the symbol method."""

    def __call__(self) -> MockERC4626SymbolContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(str, rename_returned_types(structs, return_types, raw_values))


class MockERC4626TotalAssetsContractFunction(ContractFunction):
    """ContractFunction for the totalAssets method."""

    def __call__(self) -> MockERC4626TotalAssetsContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(int, rename_returned_types(structs, return_types, raw_values))


class MockERC4626TotalSupplyContractFunction(ContractFunction):
    """ContractFunction for the totalSupply method."""

    def __call__(self) -> MockERC4626TotalSupplyContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(int, rename_returned_types(structs, return_types, raw_values))


class MockERC4626TransferContractFunction(ContractFunction):
    """ContractFunction for the transfer method."""

    def __call__(self, to: str, amount: int) -> MockERC4626TransferContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(to), dataclass_to_tuple(amount))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bool:
        """returns bool."""
        # Define the expected return types from the smart contract call

        return_types = bool

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(bool, rename_returned_types(structs, return_types, raw_values))


class MockERC4626TransferFromContractFunction(ContractFunction):
    """ContractFunction for the transferFrom method."""

    def __call__(self, _from: str, to: str, amount: int) -> MockERC4626TransferFromContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(_from), dataclass_to_tuple(to), dataclass_to_tuple(amount))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bool:
        """returns bool."""
        # Define the expected return types from the smart contract call

        return_types = bool

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(bool, rename_returned_types(structs, return_types, raw_values))


class MockERC4626TransferOwnershipContractFunction(ContractFunction):
    """ContractFunction for the transferOwnership method."""

    def __call__(self, newOwner: str) -> MockERC4626TransferOwnershipContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(newOwner))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class MockERC4626WithdrawContractFunction(ContractFunction):
    """ContractFunction for the withdraw method."""

    def __call__(self, assets: int, receiver: str, owner: str) -> MockERC4626WithdrawContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(assets), dataclass_to_tuple(receiver), dataclass_to_tuple(owner))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(int, rename_returned_types(structs, return_types, raw_values))


class MockERC4626ContractFunctions(ContractFunctions):
    """ContractFunctions for the MockERC4626 contract."""

    DOMAIN_SEPARATOR: MockERC4626DOMAIN_SEPARATORContractFunction

    allowance: MockERC4626AllowanceContractFunction

    approve: MockERC4626ApproveContractFunction

    asset: MockERC4626AssetContractFunction

    authority: MockERC4626AuthorityContractFunction

    balanceOf: MockERC4626BalanceOfContractFunction

    burn: MockERC4626BurnContractFunction

    canCall: MockERC4626CanCallContractFunction

    convertToAssets: MockERC4626ConvertToAssetsContractFunction

    convertToShares: MockERC4626ConvertToSharesContractFunction

    decimals: MockERC4626DecimalsContractFunction

    deposit: MockERC4626DepositContractFunction

    doesRoleHaveCapability: MockERC4626DoesRoleHaveCapabilityContractFunction

    doesUserHaveRole: MockERC4626DoesUserHaveRoleContractFunction

    getRate: MockERC4626GetRateContractFunction

    getRolesWithCapability: MockERC4626GetRolesWithCapabilityContractFunction

    getTargetCustomAuthority: MockERC4626GetTargetCustomAuthorityContractFunction

    getUserRoles: MockERC4626GetUserRolesContractFunction

    isCapabilityPublic: MockERC4626IsCapabilityPublicContractFunction

    isCompetitionMode: MockERC4626IsCompetitionModeContractFunction

    isUnrestricted: MockERC4626IsUnrestrictedContractFunction

    maxDeposit: MockERC4626MaxDepositContractFunction

    maxMint: MockERC4626MaxMintContractFunction

    maxMintAmount: MockERC4626MaxMintAmountContractFunction

    maxRedeem: MockERC4626MaxRedeemContractFunction

    maxWithdraw: MockERC4626MaxWithdrawContractFunction

    mint: MockERC4626MintContractFunction

    name: MockERC4626NameContractFunction

    nonces: MockERC4626NoncesContractFunction

    owner: MockERC4626OwnerContractFunction

    permit: MockERC4626PermitContractFunction

    previewDeposit: MockERC4626PreviewDepositContractFunction

    previewMint: MockERC4626PreviewMintContractFunction

    previewRedeem: MockERC4626PreviewRedeemContractFunction

    previewWithdraw: MockERC4626PreviewWithdrawContractFunction

    redeem: MockERC4626RedeemContractFunction

    setAuthority: MockERC4626SetAuthorityContractFunction

    setMaxMintAmount: MockERC4626SetMaxMintAmountContractFunction

    setPublicCapability: MockERC4626SetPublicCapabilityContractFunction

    setRate: MockERC4626SetRateContractFunction

    setRoleCapability: MockERC4626SetRoleCapabilityContractFunction

    setTargetCustomAuthority: MockERC4626SetTargetCustomAuthorityContractFunction

    setUnrestrictedMintStatus: MockERC4626SetUnrestrictedMintStatusContractFunction

    setUserRole: MockERC4626SetUserRoleContractFunction

    symbol: MockERC4626SymbolContractFunction

    totalAssets: MockERC4626TotalAssetsContractFunction

    totalSupply: MockERC4626TotalSupplyContractFunction

    transfer: MockERC4626TransferContractFunction

    transferFrom: MockERC4626TransferFromContractFunction

    transferOwnership: MockERC4626TransferOwnershipContractFunction

    withdraw: MockERC4626WithdrawContractFunction

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
        decode_tuples: bool | None = False,
    ) -> None:
        super().__init__(abi, w3, address, decode_tuples)
        self.DOMAIN_SEPARATOR = MockERC4626DOMAIN_SEPARATORContractFunction.factory(
            "DOMAIN_SEPARATOR",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="DOMAIN_SEPARATOR",
        )
        self.allowance = MockERC4626AllowanceContractFunction.factory(
            "allowance",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="allowance",
        )
        self.approve = MockERC4626ApproveContractFunction.factory(
            "approve",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="approve",
        )
        self.asset = MockERC4626AssetContractFunction.factory(
            "asset",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="asset",
        )
        self.authority = MockERC4626AuthorityContractFunction.factory(
            "authority",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="authority",
        )
        self.balanceOf = MockERC4626BalanceOfContractFunction.factory(
            "balanceOf",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="balanceOf",
        )
        self.burn = MockERC4626BurnContractFunction.factory(
            "burn",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="burn",
        )
        self.canCall = MockERC4626CanCallContractFunction.factory(
            "canCall",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="canCall",
        )
        self.convertToAssets = MockERC4626ConvertToAssetsContractFunction.factory(
            "convertToAssets",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="convertToAssets",
        )
        self.convertToShares = MockERC4626ConvertToSharesContractFunction.factory(
            "convertToShares",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="convertToShares",
        )
        self.decimals = MockERC4626DecimalsContractFunction.factory(
            "decimals",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="decimals",
        )
        self.deposit = MockERC4626DepositContractFunction.factory(
            "deposit",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="deposit",
        )
        self.doesRoleHaveCapability = MockERC4626DoesRoleHaveCapabilityContractFunction.factory(
            "doesRoleHaveCapability",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="doesRoleHaveCapability",
        )
        self.doesUserHaveRole = MockERC4626DoesUserHaveRoleContractFunction.factory(
            "doesUserHaveRole",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="doesUserHaveRole",
        )
        self.getRate = MockERC4626GetRateContractFunction.factory(
            "getRate",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="getRate",
        )
        self.getRolesWithCapability = MockERC4626GetRolesWithCapabilityContractFunction.factory(
            "getRolesWithCapability",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="getRolesWithCapability",
        )
        self.getTargetCustomAuthority = MockERC4626GetTargetCustomAuthorityContractFunction.factory(
            "getTargetCustomAuthority",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="getTargetCustomAuthority",
        )
        self.getUserRoles = MockERC4626GetUserRolesContractFunction.factory(
            "getUserRoles",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="getUserRoles",
        )
        self.isCapabilityPublic = MockERC4626IsCapabilityPublicContractFunction.factory(
            "isCapabilityPublic",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="isCapabilityPublic",
        )
        self.isCompetitionMode = MockERC4626IsCompetitionModeContractFunction.factory(
            "isCompetitionMode",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="isCompetitionMode",
        )
        self.isUnrestricted = MockERC4626IsUnrestrictedContractFunction.factory(
            "isUnrestricted",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="isUnrestricted",
        )
        self.maxDeposit = MockERC4626MaxDepositContractFunction.factory(
            "maxDeposit",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="maxDeposit",
        )
        self.maxMint = MockERC4626MaxMintContractFunction.factory(
            "maxMint",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="maxMint",
        )
        self.maxMintAmount = MockERC4626MaxMintAmountContractFunction.factory(
            "maxMintAmount",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="maxMintAmount",
        )
        self.maxRedeem = MockERC4626MaxRedeemContractFunction.factory(
            "maxRedeem",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="maxRedeem",
        )
        self.maxWithdraw = MockERC4626MaxWithdrawContractFunction.factory(
            "maxWithdraw",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="maxWithdraw",
        )
        self.mint = MockERC4626MintContractFunction.factory(
            "mint",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="mint",
        )
        self.name = MockERC4626NameContractFunction.factory(
            "name",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="name",
        )
        self.nonces = MockERC4626NoncesContractFunction.factory(
            "nonces",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="nonces",
        )
        self.owner = MockERC4626OwnerContractFunction.factory(
            "owner",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="owner",
        )
        self.permit = MockERC4626PermitContractFunction.factory(
            "permit",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="permit",
        )
        self.previewDeposit = MockERC4626PreviewDepositContractFunction.factory(
            "previewDeposit",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="previewDeposit",
        )
        self.previewMint = MockERC4626PreviewMintContractFunction.factory(
            "previewMint",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="previewMint",
        )
        self.previewRedeem = MockERC4626PreviewRedeemContractFunction.factory(
            "previewRedeem",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="previewRedeem",
        )
        self.previewWithdraw = MockERC4626PreviewWithdrawContractFunction.factory(
            "previewWithdraw",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="previewWithdraw",
        )
        self.redeem = MockERC4626RedeemContractFunction.factory(
            "redeem",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="redeem",
        )
        self.setAuthority = MockERC4626SetAuthorityContractFunction.factory(
            "setAuthority",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="setAuthority",
        )
        self.setMaxMintAmount = MockERC4626SetMaxMintAmountContractFunction.factory(
            "setMaxMintAmount",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="setMaxMintAmount",
        )
        self.setPublicCapability = MockERC4626SetPublicCapabilityContractFunction.factory(
            "setPublicCapability",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="setPublicCapability",
        )
        self.setRate = MockERC4626SetRateContractFunction.factory(
            "setRate",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="setRate",
        )
        self.setRoleCapability = MockERC4626SetRoleCapabilityContractFunction.factory(
            "setRoleCapability",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="setRoleCapability",
        )
        self.setTargetCustomAuthority = MockERC4626SetTargetCustomAuthorityContractFunction.factory(
            "setTargetCustomAuthority",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="setTargetCustomAuthority",
        )
        self.setUnrestrictedMintStatus = MockERC4626SetUnrestrictedMintStatusContractFunction.factory(
            "setUnrestrictedMintStatus",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="setUnrestrictedMintStatus",
        )
        self.setUserRole = MockERC4626SetUserRoleContractFunction.factory(
            "setUserRole",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="setUserRole",
        )
        self.symbol = MockERC4626SymbolContractFunction.factory(
            "symbol",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="symbol",
        )
        self.totalAssets = MockERC4626TotalAssetsContractFunction.factory(
            "totalAssets",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="totalAssets",
        )
        self.totalSupply = MockERC4626TotalSupplyContractFunction.factory(
            "totalSupply",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="totalSupply",
        )
        self.transfer = MockERC4626TransferContractFunction.factory(
            "transfer",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="transfer",
        )
        self.transferFrom = MockERC4626TransferFromContractFunction.factory(
            "transferFrom",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="transferFrom",
        )
        self.transferOwnership = MockERC4626TransferOwnershipContractFunction.factory(
            "transferOwnership",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="transferOwnership",
        )
        self.withdraw = MockERC4626WithdrawContractFunction.factory(
            "withdraw",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="withdraw",
        )


class MockERC4626ApprovalContractEvent(ContractEvent):
    """ContractEvent for Approval."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "MockERC4626ApprovalContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["MockERC4626ApprovalContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "MockERC4626ApprovalContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["MockERC4626ApprovalContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class MockERC4626AuthorityUpdatedContractEvent(ContractEvent):
    """ContractEvent for AuthorityUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "MockERC4626AuthorityUpdatedContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["MockERC4626AuthorityUpdatedContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "MockERC4626AuthorityUpdatedContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["MockERC4626AuthorityUpdatedContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class MockERC4626DepositContractEvent(ContractEvent):
    """ContractEvent for Deposit."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "MockERC4626DepositContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["MockERC4626DepositContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "MockERC4626DepositContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["MockERC4626DepositContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class MockERC4626OwnershipTransferredContractEvent(ContractEvent):
    """ContractEvent for OwnershipTransferred."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "MockERC4626OwnershipTransferredContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["MockERC4626OwnershipTransferredContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "MockERC4626OwnershipTransferredContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["MockERC4626OwnershipTransferredContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class MockERC4626PublicCapabilityUpdatedContractEvent(ContractEvent):
    """ContractEvent for PublicCapabilityUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "MockERC4626PublicCapabilityUpdatedContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["MockERC4626PublicCapabilityUpdatedContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "MockERC4626PublicCapabilityUpdatedContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["MockERC4626PublicCapabilityUpdatedContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class MockERC4626RoleCapabilityUpdatedContractEvent(ContractEvent):
    """ContractEvent for RoleCapabilityUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "MockERC4626RoleCapabilityUpdatedContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["MockERC4626RoleCapabilityUpdatedContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "MockERC4626RoleCapabilityUpdatedContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["MockERC4626RoleCapabilityUpdatedContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class MockERC4626TargetCustomAuthorityUpdatedContractEvent(ContractEvent):
    """ContractEvent for TargetCustomAuthorityUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "MockERC4626TargetCustomAuthorityUpdatedContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["MockERC4626TargetCustomAuthorityUpdatedContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "MockERC4626TargetCustomAuthorityUpdatedContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["MockERC4626TargetCustomAuthorityUpdatedContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class MockERC4626TransferContractEvent(ContractEvent):
    """ContractEvent for Transfer."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "MockERC4626TransferContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["MockERC4626TransferContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "MockERC4626TransferContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["MockERC4626TransferContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class MockERC4626UserRoleUpdatedContractEvent(ContractEvent):
    """ContractEvent for UserRoleUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "MockERC4626UserRoleUpdatedContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["MockERC4626UserRoleUpdatedContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "MockERC4626UserRoleUpdatedContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["MockERC4626UserRoleUpdatedContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class MockERC4626WithdrawContractEvent(ContractEvent):
    """ContractEvent for Withdraw."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "MockERC4626WithdrawContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["MockERC4626WithdrawContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "MockERC4626WithdrawContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["MockERC4626WithdrawContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class MockERC4626ContractEvents(ContractEvents):
    """ContractEvents for the MockERC4626 contract."""

    Approval: MockERC4626ApprovalContractEvent

    AuthorityUpdated: MockERC4626AuthorityUpdatedContractEvent

    Deposit: MockERC4626DepositContractEvent

    OwnershipTransferred: MockERC4626OwnershipTransferredContractEvent

    PublicCapabilityUpdated: MockERC4626PublicCapabilityUpdatedContractEvent

    RoleCapabilityUpdated: MockERC4626RoleCapabilityUpdatedContractEvent

    TargetCustomAuthorityUpdated: MockERC4626TargetCustomAuthorityUpdatedContractEvent

    Transfer: MockERC4626TransferContractEvent

    UserRoleUpdated: MockERC4626UserRoleUpdatedContractEvent

    Withdraw: MockERC4626WithdrawContractEvent

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
    ) -> None:
        super().__init__(abi, w3, address)
        self.Approval = cast(
            MockERC4626ApprovalContractEvent,
            MockERC4626ApprovalContractEvent.factory(
                "Approval", w3=w3, contract_abi=abi, address=address, event_name="Approval"
            ),
        )
        self.AuthorityUpdated = cast(
            MockERC4626AuthorityUpdatedContractEvent,
            MockERC4626AuthorityUpdatedContractEvent.factory(
                "AuthorityUpdated", w3=w3, contract_abi=abi, address=address, event_name="AuthorityUpdated"
            ),
        )
        self.Deposit = cast(
            MockERC4626DepositContractEvent,
            MockERC4626DepositContractEvent.factory(
                "Deposit", w3=w3, contract_abi=abi, address=address, event_name="Deposit"
            ),
        )
        self.OwnershipTransferred = cast(
            MockERC4626OwnershipTransferredContractEvent,
            MockERC4626OwnershipTransferredContractEvent.factory(
                "OwnershipTransferred", w3=w3, contract_abi=abi, address=address, event_name="OwnershipTransferred"
            ),
        )
        self.PublicCapabilityUpdated = cast(
            MockERC4626PublicCapabilityUpdatedContractEvent,
            MockERC4626PublicCapabilityUpdatedContractEvent.factory(
                "PublicCapabilityUpdated",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="PublicCapabilityUpdated",
            ),
        )
        self.RoleCapabilityUpdated = cast(
            MockERC4626RoleCapabilityUpdatedContractEvent,
            MockERC4626RoleCapabilityUpdatedContractEvent.factory(
                "RoleCapabilityUpdated", w3=w3, contract_abi=abi, address=address, event_name="RoleCapabilityUpdated"
            ),
        )
        self.TargetCustomAuthorityUpdated = cast(
            MockERC4626TargetCustomAuthorityUpdatedContractEvent,
            MockERC4626TargetCustomAuthorityUpdatedContractEvent.factory(
                "TargetCustomAuthorityUpdated",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="TargetCustomAuthorityUpdated",
            ),
        )
        self.Transfer = cast(
            MockERC4626TransferContractEvent,
            MockERC4626TransferContractEvent.factory(
                "Transfer", w3=w3, contract_abi=abi, address=address, event_name="Transfer"
            ),
        )
        self.UserRoleUpdated = cast(
            MockERC4626UserRoleUpdatedContractEvent,
            MockERC4626UserRoleUpdatedContractEvent.factory(
                "UserRoleUpdated", w3=w3, contract_abi=abi, address=address, event_name="UserRoleUpdated"
            ),
        )
        self.Withdraw = cast(
            MockERC4626WithdrawContractEvent,
            MockERC4626WithdrawContractEvent.factory(
                "Withdraw", w3=w3, contract_abi=abi, address=address, event_name="Withdraw"
            ),
        )


mockerc4626_abi: ABI = cast(
    ABI,
    [
        {
            "type": "constructor",
            "inputs": [
                {"name": "_asset", "type": "address", "internalType": "contract ERC20Mintable"},
                {"name": "_name", "type": "string", "internalType": "string"},
                {"name": "_symbol", "type": "string", "internalType": "string"},
                {"name": "_initialRate", "type": "uint256", "internalType": "uint256"},
                {"name": "_admin", "type": "address", "internalType": "address"},
                {"name": "_isCompetitionMode", "type": "bool", "internalType": "bool"},
                {"name": "_maxMintAmount", "type": "uint256", "internalType": "uint256"},
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "DOMAIN_SEPARATOR",
            "inputs": [],
            "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "allowance",
            "inputs": [
                {"name": "", "type": "address", "internalType": "address"},
                {"name": "", "type": "address", "internalType": "address"},
            ],
            "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "approve",
            "inputs": [
                {"name": "spender", "type": "address", "internalType": "address"},
                {"name": "amount", "type": "uint256", "internalType": "uint256"},
            ],
            "outputs": [{"name": "", "type": "bool", "internalType": "bool"}],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "asset",
            "inputs": [],
            "outputs": [{"name": "", "type": "address", "internalType": "contract ERC20"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "authority",
            "inputs": [],
            "outputs": [{"name": "", "type": "address", "internalType": "contract Authority"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "balanceOf",
            "inputs": [{"name": "", "type": "address", "internalType": "address"}],
            "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "burn",
            "inputs": [{"name": "amount", "type": "uint256", "internalType": "uint256"}],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "burn",
            "inputs": [
                {"name": "destination", "type": "address", "internalType": "address"},
                {"name": "amount", "type": "uint256", "internalType": "uint256"},
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "canCall",
            "inputs": [
                {"name": "user", "type": "address", "internalType": "address"},
                {"name": "target", "type": "address", "internalType": "address"},
                {"name": "functionSig", "type": "bytes4", "internalType": "bytes4"},
            ],
            "outputs": [{"name": "", "type": "bool", "internalType": "bool"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "convertToAssets",
            "inputs": [{"name": "shares", "type": "uint256", "internalType": "uint256"}],
            "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "convertToShares",
            "inputs": [{"name": "assets", "type": "uint256", "internalType": "uint256"}],
            "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "decimals",
            "inputs": [],
            "outputs": [{"name": "", "type": "uint8", "internalType": "uint8"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "deposit",
            "inputs": [
                {"name": "_assets", "type": "uint256", "internalType": "uint256"},
                {"name": "_receiver", "type": "address", "internalType": "address"},
            ],
            "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "doesRoleHaveCapability",
            "inputs": [
                {"name": "role", "type": "uint8", "internalType": "uint8"},
                {"name": "functionSig", "type": "bytes4", "internalType": "bytes4"},
            ],
            "outputs": [{"name": "", "type": "bool", "internalType": "bool"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "doesUserHaveRole",
            "inputs": [
                {"name": "user", "type": "address", "internalType": "address"},
                {"name": "role", "type": "uint8", "internalType": "uint8"},
            ],
            "outputs": [{"name": "", "type": "bool", "internalType": "bool"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getRate",
            "inputs": [],
            "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getRolesWithCapability",
            "inputs": [{"name": "", "type": "bytes4", "internalType": "bytes4"}],
            "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getTargetCustomAuthority",
            "inputs": [{"name": "", "type": "address", "internalType": "address"}],
            "outputs": [{"name": "", "type": "address", "internalType": "contract Authority"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getUserRoles",
            "inputs": [{"name": "", "type": "address", "internalType": "address"}],
            "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "isCapabilityPublic",
            "inputs": [{"name": "", "type": "bytes4", "internalType": "bytes4"}],
            "outputs": [{"name": "", "type": "bool", "internalType": "bool"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "isCompetitionMode",
            "inputs": [],
            "outputs": [{"name": "", "type": "bool", "internalType": "bool"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "isUnrestricted",
            "inputs": [{"name": "", "type": "address", "internalType": "address"}],
            "outputs": [{"name": "", "type": "bool", "internalType": "bool"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "maxDeposit",
            "inputs": [{"name": "", "type": "address", "internalType": "address"}],
            "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "maxMint",
            "inputs": [{"name": "", "type": "address", "internalType": "address"}],
            "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "maxMintAmount",
            "inputs": [],
            "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "maxRedeem",
            "inputs": [{"name": "owner", "type": "address", "internalType": "address"}],
            "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "maxWithdraw",
            "inputs": [{"name": "owner", "type": "address", "internalType": "address"}],
            "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "mint",
            "inputs": [
                {"name": "destination", "type": "address", "internalType": "address"},
                {"name": "amount", "type": "uint256", "internalType": "uint256"},
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "mint",
            "inputs": [
                {"name": "_shares", "type": "uint256", "internalType": "uint256"},
                {"name": "_receiver", "type": "address", "internalType": "address"},
            ],
            "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "mint",
            "inputs": [{"name": "amount", "type": "uint256", "internalType": "uint256"}],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "name",
            "inputs": [],
            "outputs": [{"name": "", "type": "string", "internalType": "string"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "nonces",
            "inputs": [{"name": "", "type": "address", "internalType": "address"}],
            "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "owner",
            "inputs": [],
            "outputs": [{"name": "", "type": "address", "internalType": "address"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "permit",
            "inputs": [
                {"name": "owner", "type": "address", "internalType": "address"},
                {"name": "spender", "type": "address", "internalType": "address"},
                {"name": "value", "type": "uint256", "internalType": "uint256"},
                {"name": "deadline", "type": "uint256", "internalType": "uint256"},
                {"name": "v", "type": "uint8", "internalType": "uint8"},
                {"name": "r", "type": "bytes32", "internalType": "bytes32"},
                {"name": "s", "type": "bytes32", "internalType": "bytes32"},
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "previewDeposit",
            "inputs": [{"name": "assets", "type": "uint256", "internalType": "uint256"}],
            "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "previewMint",
            "inputs": [{"name": "shares", "type": "uint256", "internalType": "uint256"}],
            "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "previewRedeem",
            "inputs": [{"name": "shares", "type": "uint256", "internalType": "uint256"}],
            "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "previewWithdraw",
            "inputs": [{"name": "assets", "type": "uint256", "internalType": "uint256"}],
            "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "redeem",
            "inputs": [
                {"name": "_shares", "type": "uint256", "internalType": "uint256"},
                {"name": "_receiver", "type": "address", "internalType": "address"},
                {"name": "_owner", "type": "address", "internalType": "address"},
            ],
            "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "setAuthority",
            "inputs": [{"name": "newAuthority", "type": "address", "internalType": "contract Authority"}],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "setMaxMintAmount",
            "inputs": [{"name": "_maxMintAmount", "type": "uint256", "internalType": "uint256"}],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "setPublicCapability",
            "inputs": [
                {"name": "functionSig", "type": "bytes4", "internalType": "bytes4"},
                {"name": "enabled", "type": "bool", "internalType": "bool"},
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "setRate",
            "inputs": [{"name": "_rate_", "type": "uint256", "internalType": "uint256"}],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "setRoleCapability",
            "inputs": [
                {"name": "role", "type": "uint8", "internalType": "uint8"},
                {"name": "functionSig", "type": "bytes4", "internalType": "bytes4"},
                {"name": "enabled", "type": "bool", "internalType": "bool"},
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "setTargetCustomAuthority",
            "inputs": [
                {"name": "target", "type": "address", "internalType": "address"},
                {"name": "customAuthority", "type": "address", "internalType": "contract Authority"},
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "setUnrestrictedMintStatus",
            "inputs": [
                {"name": "_target", "type": "address", "internalType": "address"},
                {"name": "_status", "type": "bool", "internalType": "bool"},
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "setUserRole",
            "inputs": [
                {"name": "user", "type": "address", "internalType": "address"},
                {"name": "role", "type": "uint8", "internalType": "uint8"},
                {"name": "enabled", "type": "bool", "internalType": "bool"},
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "symbol",
            "inputs": [],
            "outputs": [{"name": "", "type": "string", "internalType": "string"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "totalAssets",
            "inputs": [],
            "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "totalSupply",
            "inputs": [],
            "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "transfer",
            "inputs": [
                {"name": "to", "type": "address", "internalType": "address"},
                {"name": "amount", "type": "uint256", "internalType": "uint256"},
            ],
            "outputs": [{"name": "", "type": "bool", "internalType": "bool"}],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "transferFrom",
            "inputs": [
                {"name": "from", "type": "address", "internalType": "address"},
                {"name": "to", "type": "address", "internalType": "address"},
                {"name": "amount", "type": "uint256", "internalType": "uint256"},
            ],
            "outputs": [{"name": "", "type": "bool", "internalType": "bool"}],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "transferOwnership",
            "inputs": [{"name": "newOwner", "type": "address", "internalType": "address"}],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "withdraw",
            "inputs": [
                {"name": "_assets", "type": "uint256", "internalType": "uint256"},
                {"name": "_receiver", "type": "address", "internalType": "address"},
                {"name": "_owner", "type": "address", "internalType": "address"},
            ],
            "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}],
            "stateMutability": "nonpayable",
        },
        {
            "type": "event",
            "name": "Approval",
            "inputs": [
                {"name": "owner", "type": "address", "indexed": True, "internalType": "address"},
                {"name": "spender", "type": "address", "indexed": True, "internalType": "address"},
                {"name": "amount", "type": "uint256", "indexed": False, "internalType": "uint256"},
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "AuthorityUpdated",
            "inputs": [
                {"name": "user", "type": "address", "indexed": True, "internalType": "address"},
                {"name": "newAuthority", "type": "address", "indexed": True, "internalType": "contract Authority"},
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "Deposit",
            "inputs": [
                {"name": "caller", "type": "address", "indexed": True, "internalType": "address"},
                {"name": "owner", "type": "address", "indexed": True, "internalType": "address"},
                {"name": "assets", "type": "uint256", "indexed": False, "internalType": "uint256"},
                {"name": "shares", "type": "uint256", "indexed": False, "internalType": "uint256"},
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "OwnershipTransferred",
            "inputs": [
                {"name": "user", "type": "address", "indexed": True, "internalType": "address"},
                {"name": "newOwner", "type": "address", "indexed": True, "internalType": "address"},
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "PublicCapabilityUpdated",
            "inputs": [
                {"name": "functionSig", "type": "bytes4", "indexed": True, "internalType": "bytes4"},
                {"name": "enabled", "type": "bool", "indexed": False, "internalType": "bool"},
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "RoleCapabilityUpdated",
            "inputs": [
                {"name": "role", "type": "uint8", "indexed": True, "internalType": "uint8"},
                {"name": "functionSig", "type": "bytes4", "indexed": True, "internalType": "bytes4"},
                {"name": "enabled", "type": "bool", "indexed": False, "internalType": "bool"},
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "TargetCustomAuthorityUpdated",
            "inputs": [
                {"name": "target", "type": "address", "indexed": True, "internalType": "address"},
                {"name": "authority", "type": "address", "indexed": True, "internalType": "contract Authority"},
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "Transfer",
            "inputs": [
                {"name": "from", "type": "address", "indexed": True, "internalType": "address"},
                {"name": "to", "type": "address", "indexed": True, "internalType": "address"},
                {"name": "amount", "type": "uint256", "indexed": False, "internalType": "uint256"},
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "UserRoleUpdated",
            "inputs": [
                {"name": "user", "type": "address", "indexed": True, "internalType": "address"},
                {"name": "role", "type": "uint8", "indexed": True, "internalType": "uint8"},
                {"name": "enabled", "type": "bool", "indexed": False, "internalType": "bool"},
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "Withdraw",
            "inputs": [
                {"name": "caller", "type": "address", "indexed": True, "internalType": "address"},
                {"name": "receiver", "type": "address", "indexed": True, "internalType": "address"},
                {"name": "owner", "type": "address", "indexed": True, "internalType": "address"},
                {"name": "assets", "type": "uint256", "indexed": False, "internalType": "uint256"},
                {"name": "shares", "type": "uint256", "indexed": False, "internalType": "uint256"},
            ],
            "anonymous": False,
        },
    ],
)
# pylint: disable=line-too-long
mockerc4626_bytecode = HexStr(
    "0x6101206040523480156200001257600080fd5b5060405162002f3338038062002f33833981016040819052620000359162000314565b823081818a8a8a8181846001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200007d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000a39190620003d7565b6000620000b1848262000492565b506001620000c0838262000492565b5060ff81166080524660a052620000d66200019a565b60c0525050506001600160a01b0392831660e0525050600680548483166001600160a01b0319918216811790925560078054938516939091169290921790915560405133907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36040516001600160a01b0382169033907fa3396fd7f6e0a21b50e5089d2da70d5ac0a3bbbd1f617a93f134b7638998019890600090a3505050600c9490945542600d5590151561010052600e5550620005dc9350505050565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6000604051620001ce91906200055e565b6040805191829003822060208301939093528101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b6001600160a01b03811681146200024c57600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200027757600080fd5b81516001600160401b03808211156200029457620002946200024f565b604051601f8301601f19908116603f01168101908282118183101715620002bf57620002bf6200024f565b81604052838152602092508683858801011115620002dc57600080fd5b600091505b83821015620003005785820183015181830184015290820190620002e1565b600093810190920192909252949350505050565b600080600080600080600060e0888a0312156200033057600080fd5b87516200033d8162000236565b60208901519097506001600160401b03808211156200035b57600080fd5b620003698b838c0162000265565b975060408a01519150808211156200038057600080fd5b506200038f8a828b0162000265565b955050606088015193506080880151620003a98162000236565b60a08901519093508015158114620003c057600080fd5b8092505060c0880151905092959891949750929550565b600060208284031215620003ea57600080fd5b815160ff81168114620003fc57600080fd5b9392505050565b600181811c908216806200041857607f821691505b6020821081036200043957634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200048d57600081815260208120601f850160051c81016020861015620004685750805b601f850160051c820191505b81811015620004895782815560010162000474565b5050505b505050565b81516001600160401b03811115620004ae57620004ae6200024f565b620004c681620004bf845462000403565b846200043f565b602080601f831160018114620004fe5760008415620004e55750858301515b600019600386901b1c1916600185901b17855562000489565b600085815260208120601f198616915b828110156200052f578886015182559484019460019091019084016200050e565b50858210156200054e5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60008083546200056e8162000403565b600182811680156200058957600181146200059f57620005d0565b60ff1984168752821515830287019450620005d0565b8760005260208060002060005b85811015620005c75781548a820152908401908201620005ac565b50505082870194505b50929695505050505050565b60805160a05160c05160e051610100516128946200069f600039600081816105bd0152818161090701528181610a4e01528181610cf001528181610dab01528181610f02015281816112fc01526113e60152600081816104bc0152818161088301528181610e6c01528181610f5a01528181611354015281816114a701528181611a5c01528181611bea01528181611e0401528181611e9c01528181611fee015261213001526000610d8701526000610d570152600061046801526128946000f3fe608060405234801561001057600080fd5b50600436106103425760003560e01c80637a8c63b5116101b8578063ba08765211610104578063d905777e116100a2578063ea7ca2761161007c578063ea7ca276146107e7578063ed0d0efb1461081e578063ef8b30f71461083e578063f2fde38b1461085157600080fd5b8063d905777e1461075d578063dd62ed3e14610786578063e688747b146107b157600080fd5b8063c63d75b6116100de578063c63d75b6146104f6578063c6e6f59214610724578063ce96cb7714610737578063d505accf1461074a57600080fd5b8063ba087652146106d5578063bf7e214f146106e8578063c53a3985146106fb57600080fd5b80639dc29fac11610171578063aed307771161014b578063aed3077714610679578063b3d7f6b91461069c578063b460af94146106af578063b7009613146106c257600080fd5b80639dc29fac14610640578063a0712d6814610653578063a9059cbb1461066657600080fd5b80637a8c63b5146105b85780637a9e5e4b146105df5780637ecebe00146105f25780638da5cb5b1461061257806394bf804d1461062557806395d89b411461063857600080fd5b8063313ce567116102925780634b5159da1161023057806367aff4841161020a57806367aff4841461055f5780636e553f651461057257806370a0823114610585578063728b952b146105a557600080fd5b80634b5159da146105315780634cdad50614610544578063679aefce1461055757600080fd5b806338d52e0f1161026c57806338d52e0f146104b7578063402d267d146104f657806340c10f191461050b57806342966c681461051e57600080fd5b8063313ce5671461046357806334fcf4371461049c5780633644e515146104af57600080fd5b8063095ea7b3116102ff5780630ea9b75b116102d95780630ea9b75b1461042b57806318160ddd1461043e578063239c70ae1461044757806323b872dd1461045057600080fd5b8063095ea7b3146103d25780630a28a477146103f55780630bade8a41461040857600080fd5b806301e1d1141461034757806305f05a941461036257806306a36aee1461037757806306fdde031461039757806307a2d13a146103ac578063088a4ed0146103bf575b600080fd5b61034f610864565b6040519081526020015b60405180910390f35b6103756103703660046122c7565b610905565b005b61034f610385366004612300565b60096020526000908152604090205481565b61039f610991565b604051610359919061231d565b61034f6103ba36600461236b565b610a1f565b6103756103cd36600461236b565b610a4c565b6103e56103e0366004612384565b610aa9565b6040519015158152602001610359565b61034f61040336600461236b565b610b16565b6103e56104163660046123cd565b600a6020526000908152604090205460ff1681565b6103756104393660046123f9565b610b36565b61034f60025481565b61034f600e5481565b6103e561045e366004612440565b610c0e565b61048a7f000000000000000000000000000000000000000000000000000000000000000081565b60405160ff9091168152602001610359565b6103756104aa36600461236b565b610cee565b61034f610d53565b6104de7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610359565b61034f610504366004612300565b5060001990565b610375610519366004612384565b610da9565b61037561052c36600461236b565b610f00565b61037561053f366004612481565b610fed565b61034f61055236600461236b565b61107f565b600c5461034f565b61037561056d36600461249d565b61108a565b61034f6105803660046124cb565b611152565b61034f610593366004612300565b60036020526000908152604090205481565b6103756105b33660046124f0565b611166565b6103e57f000000000000000000000000000000000000000000000000000000000000000081565b6103756105ed366004612300565b6111ef565b61034f610600366004612300565b60056020526000908152604090205481565b6006546104de906001600160a01b031681565b61034f6106333660046124cb565b6112d9565b61039f6112ed565b61037561064e366004612384565b6112fa565b61037561066136600461236b565b6113e4565b6103e5610674366004612384565b611537565b6103e5610687366004612300565b600f6020526000908152604090205460ff1681565b61034f6106aa36600461236b565b61159d565b61034f6106bd36600461251e565b6115bc565b6103e56106d0366004612555565b6115d9565b61034f6106e336600461251e565b6116d7565b6007546104de906001600160a01b031681565b6104de610709366004612300565b6008602052600090815260409020546001600160a01b031681565b61034f61073236600461236b565b6116ec565b61034f610745366004612300565b61170c565b61037561075836600461259c565b61172e565b61034f61076b366004612300565b6001600160a01b031660009081526003602052604090205490565b61034f6107943660046124f0565b600460209081526000928352604080842090915290825290205481565b6103e56107bf36600461260a565b6001600160e01b0319166000908152600b602052604090205460ff919091161c600116151590565b6103e56107f536600461263d565b6001600160a01b0391909116600090815260096020526040902054600160ff9092161c16151590565b61034f61082c3660046123cd565b600b6020526000908152604090205481565b61034f61084c36600461236b565b611972565b61037561085f366004612300565b61197d565b600061086e6119fb565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa1580156108d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f69190612669565b6109009190612698565b905090565b7f00000000000000000000000000000000000000000000000000000000000000001561096657610941336000356001600160e01b031916611ad5565b6109665760405162461bcd60e51b815260040161095d906126ab565b60405180910390fd5b6001600160a01b03919091166000908152600f60205260409020805460ff1916911515919091179055565b6000805461099e906126e2565b80601f01602080910402602001604051908101604052809291908181526020018280546109ca906126e2565b8015610a175780601f106109ec57610100808354040283529160200191610a17565b820191906000526020600020905b8154815290600101906020018083116109fa57829003601f168201915b505050505081565b6002546000908015610a4357610a3e610a36610864565b849083611b7e565b610a45565b825b9392505050565b7f000000000000000000000000000000000000000000000000000000000000000015610aa457610a88336000356001600160e01b031916611ad5565b610aa45760405162461bcd60e51b815260040161095d906126ab565b600e55565b3360008181526004602090815260408083206001600160a01b038716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590610b049086815260200190565b60405180910390a35060015b92915050565b6002546000908015610a4357610a3e81610b2e610864565b859190611b9c565b610b4c336000356001600160e01b031916611ad5565b610b685760405162461bcd60e51b815260040161095d9061271c565b8015610b98576001600160e01b031982166000908152600b602052604090208054600160ff86161b179055610bbf565b6001600160e01b031982166000908152600b602052604090208054600160ff86161b191690555b816001600160e01b0319168360ff167fbfe16b2c35ce23dfd1ab0e7b5d086a10060c9b52d1574e1680c881b3b3a2b15183604051610c01911515815260200190565b60405180910390a3505050565b6001600160a01b03831660009081526004602090815260408083203384529091528120546000198114610c6a57610c458382612742565b6001600160a01b03861660009081526004602090815260408083203384529091529020555b6001600160a01b03851660009081526003602052604081208054859290610c92908490612742565b90915550506001600160a01b038085166000818152600360205260409081902080548701905551909187169060008051602061283f83398151915290610cdb9087815260200190565b60405180910390a3506001949350505050565b7f000000000000000000000000000000000000000000000000000000000000000015610d4657610d2a336000356001600160e01b031916611ad5565b610d465760405162461bcd60e51b815260040161095d906126ab565b610d4e611bc2565b600c55565b60007f00000000000000000000000000000000000000000000000000000000000000004614610d8457610900611c56565b507f000000000000000000000000000000000000000000000000000000000000000090565b7f000000000000000000000000000000000000000000000000000000000000000015610e0157610de5336000356001600160e01b031916611ad5565b610e015760405162461bcd60e51b815260040161095d906126ab565b336000908152600f602052604090205460ff16610e6a57600e54811115610e6a5760405162461bcd60e51b815260206004820181905260248201527f4d6f636b455243343632363a20496e76616c6964206d696e7420616d6f756e74604482015260640161095d565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a0712d68610ea283610a1f565b6040518263ffffffff1660e01b8152600401610ec091815260200190565b600060405180830381600087803b158015610eda57600080fd5b505af1158015610eee573d6000803e3d6000fd5b50505050610efc8282611cf0565b5050565b7f000000000000000000000000000000000000000000000000000000000000000015610f5857610f3c336000356001600160e01b031916611ad5565b610f585760405162461bcd60e51b815260040161095d906126ab565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166342966c68610f9083610a1f565b6040518263ffffffff1660e01b8152600401610fae91815260200190565b600060405180830381600087803b158015610fc857600080fd5b505af1158015610fdc573d6000803e3d6000fd5b50505050610fea3382611d4a565b50565b611003336000356001600160e01b031916611ad5565b61101f5760405162461bcd60e51b815260040161095d9061271c565b6001600160e01b031982166000818152600a6020908152604091829020805460ff191685151590811790915591519182527f36d28126bef21a4f3765d7fcb7c45cead463ae4c41094ef3b771ede598544103910160405180910390a25050565b6000610b1082610a1f565b6110a0336000356001600160e01b031916611ad5565b6110bc5760405162461bcd60e51b815260040161095d9061271c565b80156110eb576001600160a01b03831660009081526009602052604090208054600160ff85161b179055611111565b6001600160a01b03831660009081526009602052604090208054600160ff85161b191690555b8160ff16836001600160a01b03167f4c9bdd0c8e073eb5eda2250b18d8e5121ff27b62064fbeeeed4869bb99bc5bf283604051610c01911515815260200190565b600061115c611bc2565b610a458383611dac565b61117c336000356001600160e01b031916611ad5565b6111985760405162461bcd60e51b815260040161095d9061271c565b6001600160a01b0382811660008181526008602052604080822080546001600160a01b0319169486169485179055517fa4908e11a5f895b13d51526c331ac93cdd30e59772361c5d07874eb36bff20659190a35050565b6006546001600160a01b0316331480611284575060075460405163b700961360e01b81526001600160a01b039091169063b70096139061124390339030906001600160e01b03196000351690600401612755565b602060405180830381865afa158015611260573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112849190612782565b61128d57600080fd5b600780546001600160a01b0319166001600160a01b03831690811790915560405133907fa3396fd7f6e0a21b50e5089d2da70d5ac0a3bbbd1f617a93f134b7638998019890600090a350565b60006112e3611bc2565b610a458383611e82565b6001805461099e906126e2565b7f00000000000000000000000000000000000000000000000000000000000000001561135257611336336000356001600160e01b031916611ad5565b6113525760405162461bcd60e51b815260040161095d906126ab565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166342966c6861138a83610a1f565b6040518263ffffffff1660e01b81526004016113a891815260200190565b600060405180830381600087803b1580156113c257600080fd5b505af11580156113d6573d6000803e3d6000fd5b50505050610efc8282611d4a565b7f00000000000000000000000000000000000000000000000000000000000000001561143c57611420336000356001600160e01b031916611ad5565b61143c5760405162461bcd60e51b815260040161095d906126ab565b336000908152600f602052604090205460ff166114a557600e548111156114a55760405162461bcd60e51b815260206004820181905260248201527f4d6f636b455243343632363a20496e76616c6964206d696e7420616d6f756e74604482015260640161095d565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a0712d686114dd83610a1f565b6040518263ffffffff1660e01b81526004016114fb91815260200190565b600060405180830381600087803b15801561151557600080fd5b505af1158015611529573d6000803e3d6000fd5b50505050610fea3382611cf0565b33600090815260036020526040812080548391908390611558908490612742565b90915550506001600160a01b0383166000818152600360205260409081902080548501905551339060008051602061283f83398151915290610b049086815260200190565b6002546000908015610a4357610a3e6115b4610864565b849083611b9c565b60006115c6611bc2565b6115d1848484611f11565b949350505050565b6001600160a01b0380831660009081526008602052604081205490911680156116755760405163b700961360e01b81526001600160a01b0382169063b70096139061162c90889088908890600401612755565b602060405180830381865afa158015611649573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061166d9190612782565b915050610a45565b6001600160e01b031983166000908152600a602052604090205460ff16806116ce57506001600160e01b031983166000908152600b60209081526040808320546001600160a01b03891684526009909252909120541615155b95945050505050565b60006116e1611bc2565b6115d1848484612015565b6002546000908015610a4357610a3e81611704610864565b859190611b7e565b6001600160a01b038116600090815260036020526040812054610b1090610a1f565b4284101561177e5760405162461bcd60e51b815260206004820152601760248201527f5045524d49545f444541444c494e455f45585049524544000000000000000000604482015260640161095d565b6000600161178a610d53565b6001600160a01b038a811660008181526005602090815260409182902080546001810190915582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98184015280840194909452938d166060840152608083018c905260a083019390935260c08083018b90528151808403909101815260e08301909152805192019190912061190160f01b6101008301526101028201929092526101228101919091526101420160408051601f198184030181528282528051602091820120600084529083018083525260ff871690820152606081018590526080810184905260a0016020604051602081039080840390855afa158015611896573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116158015906118cc5750876001600160a01b0316816001600160a01b0316145b6119095760405162461bcd60e51b815260206004820152600e60248201526d24a72b20a624a22fa9a4a3a722a960911b604482015260640161095d565b6001600160a01b0390811660009081526004602090815260408083208a8516808552908352928190208990555188815291928a16917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a350505050505050565b6000610b10826116ec565b611993336000356001600160e01b031916611ad5565b6119af5760405162461bcd60e51b815260040161095d9061271c565b600680546001600160a01b0319166001600160a01b03831690811790915560405133907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a350565b6000600c54600003611a0d5750600090565b6000611a2b6301e13380600d5442611a259190612742565b90612157565b90506000610a45611a4783600c5461216c90919063ffffffff16565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015611aab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611acf9190612669565b9061216c565b6007546000906001600160a01b03168015801590611b5f575060405163b700961360e01b81526001600160a01b0382169063b700961390611b1e90879030908890600401612755565b602060405180830381865afa158015611b3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b5f9190612782565b806115d157506006546001600160a01b03858116911614949350505050565b6000826000190484118302158202611b9557600080fd5b5091020490565b6000826000190484118302158202611bb357600080fd5b50910281810615159190040190565b6000611bcc6119fb565b90508015611c4f5760405163140e25ad60e31b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a0712d6890602401600060405180830381600087803b158015611c3657600080fd5b505af1158015611c4a573d6000803e3d6000fd5b505050505b5042600d55565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6000604051611c88919061279f565b6040805191829003822060208301939093528101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b8060026000828254611d029190612698565b90915550506001600160a01b03821660008181526003602090815260408083208054860190555184815260008051602061283f83398151915291015b60405180910390a35050565b6001600160a01b03821660009081526003602052604081208054839290611d72908490612742565b90915550506002805482900390556040518181526000906001600160a01b0384169060008051602061283f83398151915290602001611d3e565b6000611db783611972565b905080600003611df75760405162461bcd60e51b815260206004820152600b60248201526a5a45524f5f53484152455360a81b604482015260640161095d565b611e2c6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333086612181565b611e368282611cf0565b60408051848152602081018390526001600160a01b0384169133917fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d791015b60405180910390a3610b10565b6000611e8d8361159d565b9050611ec46001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333084612181565b611ece8284611cf0565b60408051828152602081018590526001600160a01b0384169133917fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d79101611e75565b6000611f1c84610b16565b9050336001600160a01b03831614611f8c576001600160a01b03821660009081526004602090815260408083203384529091529020546000198114611f8a57611f658282612742565b6001600160a01b03841660009081526004602090815260408083203384529091529020555b505b611f968282611d4a565b60408051858152602081018390526001600160a01b03808516929086169133917ffbde797d201c681b91056529119e0b02407c7bb96a4a2c75c01fc9667232c8db910160405180910390a4610a456001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016848661221d565b6000336001600160a01b03831614612085576001600160a01b038216600090815260046020908152604080832033845290915290205460001981146120835761205e8582612742565b6001600160a01b03841660009081526004602090815260408083203384529091529020555b505b61208e8461107f565b9050806000036120ce5760405162461bcd60e51b815260206004820152600b60248201526a5a45524f5f41535345545360a81b604482015260640161095d565b6120d88285611d4a565b60408051828152602081018690526001600160a01b03808516929086169133917ffbde797d201c681b91056529119e0b02407c7bb96a4a2c75c01fc9667232c8db910160405180910390a4610a456001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016848361221d565b6000610a4583670de0b6b3a764000084611b7e565b6000610a458383670de0b6b3a7640000611b7e565b60006040516323b872dd60e01b81526001600160a01b03851660048201526001600160a01b03841660248201528260448201526020600060648360008a5af13d15601f3d11600160005114161716915050806122165760405162461bcd60e51b81526020600482015260146024820152731514905394d1915497d19493d357d1905253115160621b604482015260640161095d565b5050505050565b600060405163a9059cbb60e01b81526001600160a01b0384166004820152826024820152602060006044836000895af13d15601f3d116001600051141617169150508061229e5760405162461bcd60e51b815260206004820152600f60248201526e1514905394d1915497d19052531151608a1b604482015260640161095d565b50505050565b6001600160a01b0381168114610fea57600080fd5b8015158114610fea57600080fd5b600080604083850312156122da57600080fd5b82356122e5816122a4565b915060208301356122f5816122b9565b809150509250929050565b60006020828403121561231257600080fd5b8135610a45816122a4565b600060208083528351808285015260005b8181101561234a5785810183015185820160400152820161232e565b506000604082860101526040601f19601f8301168501019250505092915050565b60006020828403121561237d57600080fd5b5035919050565b6000806040838503121561239757600080fd5b82356123a2816122a4565b946020939093013593505050565b80356001600160e01b0319811681146123c857600080fd5b919050565b6000602082840312156123df57600080fd5b610a45826123b0565b803560ff811681146123c857600080fd5b60008060006060848603121561240e57600080fd5b612417846123e8565b9250612425602085016123b0565b91506040840135612435816122b9565b809150509250925092565b60008060006060848603121561245557600080fd5b8335612460816122a4565b92506020840135612470816122a4565b929592945050506040919091013590565b6000806040838503121561249457600080fd5b6122e5836123b0565b6000806000606084860312156124b257600080fd5b83356124bd816122a4565b9250612425602085016123e8565b600080604083850312156124de57600080fd5b8235915060208301356122f5816122a4565b6000806040838503121561250357600080fd5b823561250e816122a4565b915060208301356122f5816122a4565b60008060006060848603121561253357600080fd5b833592506020840135612545816122a4565b91506040840135612435816122a4565b60008060006060848603121561256a57600080fd5b8335612575816122a4565b92506020840135612585816122a4565b9150612593604085016123b0565b90509250925092565b600080600080600080600060e0888a0312156125b757600080fd5b87356125c2816122a4565b965060208801356125d2816122a4565b955060408801359450606088013593506125ee608089016123e8565b925060a0880135915060c0880135905092959891949750929550565b6000806040838503121561261d57600080fd5b612626836123e8565b9150612634602084016123b0565b90509250929050565b6000806040838503121561265057600080fd5b823561265b816122a4565b9150612634602084016123e8565b60006020828403121561267b57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b80820180821115610b1057610b10612682565b6020808252601b908201527f4d6f636b455243343632363a206e6f7420617574686f72697a65640000000000604082015260600190565b600181811c908216806126f657607f821691505b60208210810361271657634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252600c908201526b15539055551213d49256915160a21b604082015260600190565b81810381811115610b1057610b10612682565b6001600160a01b0393841681529190921660208201526001600160e01b0319909116604082015260600190565b60006020828403121561279457600080fd5b8151610a45816122b9565b600080835481600182811c9150808316806127bb57607f831692505b602080841082036127da57634e487b7160e01b86526022600452602486fd5b8180156127ee576001811461280357612830565b60ff1986168952841515850289019650612830565b60008a81526020902060005b868110156128285781548b82015290850190830161280f565b505084890196505b50949897505050505050505056feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa26469706673582212208017f43c1c0f7d93b8592634daf2d68c2a1086b3164c7ce7b2ff0691fac5842764736f6c63430008140033"
)


class MockERC4626Contract(Contract):
    """A web3.py Contract class for the MockERC4626 contract."""

    abi: ABI = mockerc4626_abi
    bytecode: bytes | None = try_bytecode_hexbytes(mockerc4626_bytecode, "mockerc4626")

    def __init__(self, address: ChecksumAddress | None = None) -> None:
        try:
            # Initialize parent Contract class
            super().__init__(address=address)
            self.functions = MockERC4626ContractFunctions(mockerc4626_abi, self.w3, address)  # type: ignore
            self.events = MockERC4626ContractEvents(mockerc4626_abi, self.w3, address)  # type: ignore

        except FallbackNotFound:
            print("Fallback function not found. Continuing...")

    events: MockERC4626ContractEvents

    functions: MockERC4626ContractFunctions

    class ConstructorArgs(NamedTuple):
        """Arguments to pass the contract's constructor function."""

        asset: str

        name: str

        symbol: str

        initialRate: int

        admin: str

        isCompetitionMode: bool

        maxMintAmount: int

    @classmethod
    def constructor(cls, asset: str, name: str, symbol: str, initialRate: int, admin: str, isCompetitionMode: bool, maxMintAmount: int) -> ContractConstructor:  # type: ignore
        """Creates a transaction with the contract's constructor function.

        Parameters
        ----------

        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.

        """

        return super().constructor(
            dataclass_to_tuple(asset),
            dataclass_to_tuple(name),
            dataclass_to_tuple(symbol),
            dataclass_to_tuple(initialRate),
            dataclass_to_tuple(admin),
            dataclass_to_tuple(isCompetitionMode),
            dataclass_to_tuple(maxMintAmount),
        )

    @classmethod
    def deploy(cls, w3: Web3, account: LocalAccount | ChecksumAddress, constructorArgs: ConstructorArgs) -> Self:
        """Deploys and instance of the contract.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.
        """
        deployer = cls.factory(w3=w3)
        constructor_fn = deployer.constructor(*constructorArgs)

        # if an address is supplied, try to use a web3 default account
        if isinstance(account, str):
            tx_hash = constructor_fn.transact({"from": account})
            tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

            deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
            return deployed_contract

        # otherwise use the account provided.
        deployment_tx = constructor_fn.build_transaction()
        current_nonce = w3.eth.get_transaction_count(account.address)
        deployment_tx.update({"nonce": current_nonce})

        # Sign the transaction with local account private key
        signed_tx = account.sign_transaction(deployment_tx)

        # Send the signed transaction and wait for receipt
        tx_hash = w3.eth.send_raw_transaction(signed_tx.raw_transaction)
        tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

        deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
        return deployed_contract

    @classmethod
    def factory(cls, w3: Web3, class_name: str | None = None, **kwargs: Any) -> Type[Self]:
        """Deploys and instance of the contract.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        class_name: str | None
            The instance class name.

        Returns
        -------
        Self
            A deployed instance of the contract.
        """
        contract = super().factory(w3, class_name, **kwargs)
        contract.functions = MockERC4626ContractFunctions(mockerc4626_abi, w3, None)

        return contract
