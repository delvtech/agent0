"""Dataclasses for all structs in the MockLido contract.

DO NOT EDIT.  This file was generated by pypechain.  See documentation at
https://github.com/delvtech/pypechain """

# super() call methods are generic, while our version adds values & types
# pylint: disable=arguments-differ

# contracts have PascalCase names
# pylint: disable=invalid-name
# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments
# unable to determine which imports will be used in the generated code
# pylint: disable=unused-import
# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return
from __future__ import annotations

from dataclasses import dataclass

from web3.types import ABIEvent, ABIEventParams

Approval = ABIEvent(
    anonymous=False,
    inputs=[
        ABIEventParams(indexed=True, name="owner", type="address"),
        ABIEventParams(indexed=True, name="spender", type="address"),
        ABIEventParams(indexed=False, name="value", type="uint256"),
    ],
    name="Approval",
    type="event",
)

AuthorityUpdated = ABIEvent(
    anonymous=False,
    inputs=[
        ABIEventParams(indexed=True, name="user", type="address"),
        ABIEventParams(indexed=True, name="newAuthority", type="address"),
    ],
    name="AuthorityUpdated",
    type="event",
)

OwnershipTransferred = ABIEvent(
    anonymous=False,
    inputs=[
        ABIEventParams(indexed=True, name="user", type="address"),
        ABIEventParams(indexed=True, name="newOwner", type="address"),
    ],
    name="OwnershipTransferred",
    type="event",
)

PublicCapabilityUpdated = ABIEvent(
    anonymous=False,
    inputs=[
        ABIEventParams(indexed=True, name="functionSig", type="bytes4"),
        ABIEventParams(indexed=False, name="enabled", type="bool"),
    ],
    name="PublicCapabilityUpdated",
    type="event",
)

RoleCapabilityUpdated = ABIEvent(
    anonymous=False,
    inputs=[
        ABIEventParams(indexed=True, name="role", type="uint8"),
        ABIEventParams(indexed=True, name="functionSig", type="bytes4"),
        ABIEventParams(indexed=False, name="enabled", type="bool"),
    ],
    name="RoleCapabilityUpdated",
    type="event",
)

TargetCustomAuthorityUpdated = ABIEvent(
    anonymous=False,
    inputs=[
        ABIEventParams(indexed=True, name="target", type="address"),
        ABIEventParams(indexed=True, name="authority", type="address"),
    ],
    name="TargetCustomAuthorityUpdated",
    type="event",
)

Transfer = ABIEvent(
    anonymous=False,
    inputs=[
        ABIEventParams(indexed=True, name="from", type="address"),
        ABIEventParams(indexed=True, name="to", type="address"),
        ABIEventParams(indexed=False, name="value", type="uint256"),
    ],
    name="Transfer",
    type="event",
)

TransferShares = ABIEvent(
    anonymous=False,
    inputs=[
        ABIEventParams(indexed=True, name="from", type="address"),
        ABIEventParams(indexed=True, name="to", type="address"),
        ABIEventParams(indexed=False, name="sharesValue", type="uint256"),
    ],
    name="TransferShares",
    type="event",
)

UserRoleUpdated = ABIEvent(
    anonymous=False,
    inputs=[
        ABIEventParams(indexed=True, name="user", type="address"),
        ABIEventParams(indexed=True, name="role", type="uint8"),
        ABIEventParams(indexed=False, name="enabled", type="bool"),
    ],
    name="UserRoleUpdated",
    type="event",
)


@dataclass
class ErrorInfo:
    """Custom contract error information."""

    name: str
    selector: str
    signature: str
    inputs: list[ErrorParams]


@dataclass
class ErrorParams:
    """Parameter info for custom contract errors."""

    name: str
    solidity_type: str
    python_type: str


ERC20InsufficientAllowanceError = ErrorInfo(
    inputs=[
        ErrorParams(name="spender", python_type="str", solidity_type="address"),
        ErrorParams(name="allowance", python_type="int", solidity_type="uint256"),
        ErrorParams(name="needed", python_type="int", solidity_type="uint256"),
    ],
    name="ERC20InsufficientAllowance",
    selector="0xfb8f41b2",
    signature="ERC20InsufficientAllowance(address,uint256,uint256)",
)

ERC20InsufficientBalanceError = ErrorInfo(
    inputs=[
        ErrorParams(name="sender", python_type="str", solidity_type="address"),
        ErrorParams(name="balance", python_type="int", solidity_type="uint256"),
        ErrorParams(name="needed", python_type="int", solidity_type="uint256"),
    ],
    name="ERC20InsufficientBalance",
    selector="0xe450d38c",
    signature="ERC20InsufficientBalance(address,uint256,uint256)",
)

ERC20InvalidApproverError = ErrorInfo(
    inputs=[
        ErrorParams(name="approver", python_type="str", solidity_type="address"),
    ],
    name="ERC20InvalidApprover",
    selector="0xe602df05",
    signature="ERC20InvalidApprover(address)",
)

ERC20InvalidReceiverError = ErrorInfo(
    inputs=[
        ErrorParams(name="receiver", python_type="str", solidity_type="address"),
    ],
    name="ERC20InvalidReceiver",
    selector="0xec442f05",
    signature="ERC20InvalidReceiver(address)",
)

ERC20InvalidSenderError = ErrorInfo(
    inputs=[
        ErrorParams(name="sender", python_type="str", solidity_type="address"),
    ],
    name="ERC20InvalidSender",
    selector="0x96c6fd1e",
    signature="ERC20InvalidSender(address)",
)

ERC20InvalidSpenderError = ErrorInfo(
    inputs=[
        ErrorParams(name="spender", python_type="str", solidity_type="address"),
    ],
    name="ERC20InvalidSpender",
    selector="0x94280d62",
    signature="ERC20InvalidSpender(address)",
)
