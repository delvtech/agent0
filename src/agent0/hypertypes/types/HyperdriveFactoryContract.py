"""A web3.py Contract class for the HyperdriveFactory contract.

DO NOT EDIT.  This file was generated by pypechain.  See documentation at
https://github.com/delvtech/pypechain"""

# contracts have PascalCase names
# pylint: disable=invalid-name

# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments

# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return

# This file is bound to get very long depending on contract sizes.
# pylint: disable=too-many-lines

# methods are overriden with specific arguments instead of generic *args, **kwargs
# pylint: disable=arguments-differ

# consumers have too many opinions on line length
# pylint: disable=line-too-long


from __future__ import annotations

from typing import Any, Iterable, NamedTuple, Sequence, Type, cast

from eth_abi.codec import ABICodec
from eth_abi.registry import registry as default_registry
from eth_account.signers.local import LocalAccount
from eth_typing import ChecksumAddress, HexStr
from hexbytes import HexBytes
from typing_extensions import Self
from web3 import Web3
from web3._utils.filters import LogFilter
from web3.contract.contract import (
    Contract,
    ContractConstructor,
    ContractEvent,
    ContractEvents,
    ContractFunction,
    ContractFunctions,
)
from web3.exceptions import FallbackNotFound
from web3.types import ABI, ABIFunction, BlockIdentifier, CallOverride, EventData, TxParams

from .HyperdriveFactoryTypes import FactoryConfig
from .IHyperdriveTypes import Fees, PoolDeployConfig
from .utilities import dataclass_to_tuple, get_abi_input_types, rename_returned_types

structs = {
    "Fees": Fees,
    "FactoryConfig": FactoryConfig,
    "PoolDeployConfig": PoolDeployConfig,
}


class HyperdriveFactoryAddDeployerCoordinatorContractFunction(ContractFunction):
    """ContractFunction for the addDeployerCoordinator method."""

    def __call__(self, deployerCoordinator: str) -> HyperdriveFactoryAddDeployerCoordinatorContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(deployerCoordinator))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class HyperdriveFactoryCheckpointDurationResolutionContractFunction(ContractFunction):
    """ContractFunction for the checkpointDurationResolution method."""

    def __call__(self) -> HyperdriveFactoryCheckpointDurationResolutionContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(int, rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryDefaultPausersContractFunction(ContractFunction):
    """ContractFunction for the defaultPausers method."""

    def __call__(self) -> HyperdriveFactoryDefaultPausersContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[str]:
        """returns list[str]."""
        # Define the expected return types from the smart contract call

        return_types = list[str]

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(list[str], rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryDeployAndInitializeContractFunction(ContractFunction):
    """ContractFunction for the deployAndInitialize method."""

    def __call__(self, deploymentId: bytes, deployerCoordinator: str, config: PoolDeployConfig, extraData: bytes, contribution: int, fixedAPR: int, timeStretchAPR: int, initializeExtraData: bytes, salt: bytes) -> HyperdriveFactoryDeployAndInitializeContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(deploymentId),
            dataclass_to_tuple(deployerCoordinator),
            dataclass_to_tuple(config),
            dataclass_to_tuple(extraData),
            dataclass_to_tuple(contribution),
            dataclass_to_tuple(fixedAPR),
            dataclass_to_tuple(timeStretchAPR),
            dataclass_to_tuple(initializeExtraData),
            dataclass_to_tuple(salt),
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(str, rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryDeployTargetContractFunction(ContractFunction):
    """ContractFunction for the deployTarget method."""

    def __call__(self, deploymentId: bytes, deployerCoordinator: str, config: PoolDeployConfig, extraData: bytes, fixedAPR: int, timeStretchAPR: int, targetIndex: int, salt: bytes) -> HyperdriveFactoryDeployTargetContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(deploymentId),
            dataclass_to_tuple(deployerCoordinator),
            dataclass_to_tuple(config),
            dataclass_to_tuple(extraData),
            dataclass_to_tuple(fixedAPR),
            dataclass_to_tuple(timeStretchAPR),
            dataclass_to_tuple(targetIndex),
            dataclass_to_tuple(salt),
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(str, rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryFeeCollectorContractFunction(ContractFunction):
    """ContractFunction for the feeCollector method."""

    def __call__(self) -> HyperdriveFactoryFeeCollectorContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(str, rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryGetDeployerCoordinatorAtIndexContractFunction(ContractFunction):
    """ContractFunction for the getDeployerCoordinatorAtIndex method."""

    def __call__(self, index: int) -> HyperdriveFactoryGetDeployerCoordinatorAtIndexContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(index))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(str, rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryGetDeployerCoordinatorsInRangeContractFunction(ContractFunction):
    """ContractFunction for the getDeployerCoordinatorsInRange method."""

    def __call__(self, startIndex: int, endIndex: int) -> HyperdriveFactoryGetDeployerCoordinatorsInRangeContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(startIndex), dataclass_to_tuple(endIndex))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[str]:
        """returns list[str]."""
        # Define the expected return types from the smart contract call

        return_types = list[str]

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(list[str], rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryGetInstanceAtIndexContractFunction(ContractFunction):
    """ContractFunction for the getInstanceAtIndex method."""

    def __call__(self, index: int) -> HyperdriveFactoryGetInstanceAtIndexContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(index))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(str, rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryGetInstancesInRangeContractFunction(ContractFunction):
    """ContractFunction for the getInstancesInRange method."""

    def __call__(self, startIndex: int, endIndex: int) -> HyperdriveFactoryGetInstancesInRangeContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(startIndex), dataclass_to_tuple(endIndex))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[str]:
        """returns list[str]."""
        # Define the expected return types from the smart contract call

        return_types = list[str]

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(list[str], rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryGetNumberOfDeployerCoordinatorsContractFunction(ContractFunction):
    """ContractFunction for the getNumberOfDeployerCoordinators method."""

    def __call__(self) -> HyperdriveFactoryGetNumberOfDeployerCoordinatorsContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(int, rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryGetNumberOfInstancesContractFunction(ContractFunction):
    """ContractFunction for the getNumberOfInstances method."""

    def __call__(self) -> HyperdriveFactoryGetNumberOfInstancesContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(int, rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryGovernanceContractFunction(ContractFunction):
    """ContractFunction for the governance method."""

    def __call__(self) -> HyperdriveFactoryGovernanceContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(str, rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryHyperdriveGovernanceContractFunction(ContractFunction):
    """ContractFunction for the hyperdriveGovernance method."""

    def __call__(self) -> HyperdriveFactoryHyperdriveGovernanceContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(str, rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryInstancesToDeployerCoordinatorsContractFunction(ContractFunction):
    """ContractFunction for the instancesToDeployerCoordinators method."""

    def __call__(self, instance: str) -> HyperdriveFactoryInstancesToDeployerCoordinatorsContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(instance))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(str, rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryIsDeployerCoordinatorContractFunction(ContractFunction):
    """ContractFunction for the isDeployerCoordinator method."""

    def __call__(self, arg1: str) -> HyperdriveFactoryIsDeployerCoordinatorContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(arg1))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bool:
        """returns bool."""
        # Define the expected return types from the smart contract call

        return_types = bool

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(bool, rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryIsInstanceContractFunction(ContractFunction):
    """ContractFunction for the isInstance method."""

    def __call__(self, arg1: str) -> HyperdriveFactoryIsInstanceContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(arg1))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bool:
        """returns bool."""
        # Define the expected return types from the smart contract call

        return_types = bool

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(bool, rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryLinkerCodeHashContractFunction(ContractFunction):
    """ContractFunction for the linkerCodeHash method."""

    def __call__(self) -> HyperdriveFactoryLinkerCodeHashContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bytes:
        """returns bytes."""
        # Define the expected return types from the smart contract call

        return_types = bytes

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(bytes, rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryLinkerFactoryContractFunction(ContractFunction):
    """ContractFunction for the linkerFactory method."""

    def __call__(self) -> HyperdriveFactoryLinkerFactoryContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(str, rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryMaxCheckpointDurationContractFunction(ContractFunction):
    """ContractFunction for the maxCheckpointDuration method."""

    def __call__(self) -> HyperdriveFactoryMaxCheckpointDurationContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(int, rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryMaxFeesContractFunction(ContractFunction):
    """ContractFunction for the maxFees method."""

    def __call__(self) -> HyperdriveFactoryMaxFeesContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> Fees:
        """returns Fees."""
        # Define the expected return types from the smart contract call

        return_types = Fees

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(Fees, rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryMaxFixedAPRContractFunction(ContractFunction):
    """ContractFunction for the maxFixedAPR method."""

    def __call__(self) -> HyperdriveFactoryMaxFixedAPRContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(int, rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryMaxPositionDurationContractFunction(ContractFunction):
    """ContractFunction for the maxPositionDuration method."""

    def __call__(self) -> HyperdriveFactoryMaxPositionDurationContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(int, rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryMaxTimeStretchAPRContractFunction(ContractFunction):
    """ContractFunction for the maxTimeStretchAPR method."""

    def __call__(self) -> HyperdriveFactoryMaxTimeStretchAPRContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(int, rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryMinCheckpointDurationContractFunction(ContractFunction):
    """ContractFunction for the minCheckpointDuration method."""

    def __call__(self) -> HyperdriveFactoryMinCheckpointDurationContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(int, rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryMinFeesContractFunction(ContractFunction):
    """ContractFunction for the minFees method."""

    def __call__(self) -> HyperdriveFactoryMinFeesContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> Fees:
        """returns Fees."""
        # Define the expected return types from the smart contract call

        return_types = Fees

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(Fees, rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryMinFixedAPRContractFunction(ContractFunction):
    """ContractFunction for the minFixedAPR method."""

    def __call__(self) -> HyperdriveFactoryMinFixedAPRContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(int, rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryMinPositionDurationContractFunction(ContractFunction):
    """ContractFunction for the minPositionDuration method."""

    def __call__(self) -> HyperdriveFactoryMinPositionDurationContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(int, rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryMinTimeStretchAPRContractFunction(ContractFunction):
    """ContractFunction for the minTimeStretchAPR method."""

    def __call__(self) -> HyperdriveFactoryMinTimeStretchAPRContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(int, rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryRemoveDeployerCoordinatorContractFunction(ContractFunction):
    """ContractFunction for the removeDeployerCoordinator method."""

    def __call__(self, deployerCoordinator: str, index: int) -> HyperdriveFactoryRemoveDeployerCoordinatorContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(deployerCoordinator), dataclass_to_tuple(index))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class HyperdriveFactoryUpdateCheckpointDurationResolutionContractFunction(ContractFunction):
    """ContractFunction for the updateCheckpointDurationResolution method."""

    def __call__(self, checkpointDurationResolution: int) -> HyperdriveFactoryUpdateCheckpointDurationResolutionContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(checkpointDurationResolution))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class HyperdriveFactoryUpdateDefaultPausersContractFunction(ContractFunction):
    """ContractFunction for the updateDefaultPausers method."""

    def __call__(self, defaultPausers_: list[str]) -> HyperdriveFactoryUpdateDefaultPausersContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(defaultPausers_))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class HyperdriveFactoryUpdateFeeCollectorContractFunction(ContractFunction):
    """ContractFunction for the updateFeeCollector method."""

    def __call__(self, feeCollector: str) -> HyperdriveFactoryUpdateFeeCollectorContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(feeCollector))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class HyperdriveFactoryUpdateGovernanceContractFunction(ContractFunction):
    """ContractFunction for the updateGovernance method."""

    def __call__(self, governance: str) -> HyperdriveFactoryUpdateGovernanceContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(governance))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class HyperdriveFactoryUpdateHyperdriveGovernanceContractFunction(ContractFunction):
    """ContractFunction for the updateHyperdriveGovernance method."""

    def __call__(self, hyperdriveGovernance: str) -> HyperdriveFactoryUpdateHyperdriveGovernanceContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(hyperdriveGovernance))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class HyperdriveFactoryUpdateLinkerCodeHashContractFunction(ContractFunction):
    """ContractFunction for the updateLinkerCodeHash method."""

    def __call__(self, linkerCodeHash: bytes) -> HyperdriveFactoryUpdateLinkerCodeHashContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(linkerCodeHash))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class HyperdriveFactoryUpdateLinkerFactoryContractFunction(ContractFunction):
    """ContractFunction for the updateLinkerFactory method."""

    def __call__(self, linkerFactory: str) -> HyperdriveFactoryUpdateLinkerFactoryContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(linkerFactory))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class HyperdriveFactoryUpdateMaxCheckpointDurationContractFunction(ContractFunction):
    """ContractFunction for the updateMaxCheckpointDuration method."""

    def __call__(self, maxCheckpointDuration: int) -> HyperdriveFactoryUpdateMaxCheckpointDurationContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(maxCheckpointDuration))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class HyperdriveFactoryUpdateMaxFeesContractFunction(ContractFunction):
    """ContractFunction for the updateMaxFees method."""

    def __call__(self, maxFees: Fees) -> HyperdriveFactoryUpdateMaxFeesContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(maxFees))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class HyperdriveFactoryUpdateMaxFixedAPRContractFunction(ContractFunction):
    """ContractFunction for the updateMaxFixedAPR method."""

    def __call__(self, maxFixedAPR: int) -> HyperdriveFactoryUpdateMaxFixedAPRContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(maxFixedAPR))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class HyperdriveFactoryUpdateMaxPositionDurationContractFunction(ContractFunction):
    """ContractFunction for the updateMaxPositionDuration method."""

    def __call__(self, maxPositionDuration: int) -> HyperdriveFactoryUpdateMaxPositionDurationContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(maxPositionDuration))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class HyperdriveFactoryUpdateMaxTimeStretchAPRContractFunction(ContractFunction):
    """ContractFunction for the updateMaxTimeStretchAPR method."""

    def __call__(self, maxTimeStretchAPR: int) -> HyperdriveFactoryUpdateMaxTimeStretchAPRContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(maxTimeStretchAPR))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class HyperdriveFactoryUpdateMinCheckpointDurationContractFunction(ContractFunction):
    """ContractFunction for the updateMinCheckpointDuration method."""

    def __call__(self, minCheckpointDuration: int) -> HyperdriveFactoryUpdateMinCheckpointDurationContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(minCheckpointDuration))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class HyperdriveFactoryUpdateMinFeesContractFunction(ContractFunction):
    """ContractFunction for the updateMinFees method."""

    def __call__(self, minFees: Fees) -> HyperdriveFactoryUpdateMinFeesContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(minFees))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class HyperdriveFactoryUpdateMinFixedAPRContractFunction(ContractFunction):
    """ContractFunction for the updateMinFixedAPR method."""

    def __call__(self, minFixedAPR: int) -> HyperdriveFactoryUpdateMinFixedAPRContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(minFixedAPR))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class HyperdriveFactoryUpdateMinPositionDurationContractFunction(ContractFunction):
    """ContractFunction for the updateMinPositionDuration method."""

    def __call__(self, minPositionDuration: int) -> HyperdriveFactoryUpdateMinPositionDurationContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(minPositionDuration))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class HyperdriveFactoryUpdateMinTimeStretchAPRContractFunction(ContractFunction):
    """ContractFunction for the updateMinTimeStretchAPR method."""

    def __call__(self, minTimeStretchAPR: int) -> HyperdriveFactoryUpdateMinTimeStretchAPRContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(minTimeStretchAPR))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class HyperdriveFactoryContractFunctions(ContractFunctions):
    """ContractFunctions for the HyperdriveFactory contract."""

    addDeployerCoordinator: HyperdriveFactoryAddDeployerCoordinatorContractFunction

    checkpointDurationResolution: HyperdriveFactoryCheckpointDurationResolutionContractFunction

    defaultPausers: HyperdriveFactoryDefaultPausersContractFunction

    deployAndInitialize: HyperdriveFactoryDeployAndInitializeContractFunction

    deployTarget: HyperdriveFactoryDeployTargetContractFunction

    feeCollector: HyperdriveFactoryFeeCollectorContractFunction

    getDeployerCoordinatorAtIndex: HyperdriveFactoryGetDeployerCoordinatorAtIndexContractFunction

    getDeployerCoordinatorsInRange: HyperdriveFactoryGetDeployerCoordinatorsInRangeContractFunction

    getInstanceAtIndex: HyperdriveFactoryGetInstanceAtIndexContractFunction

    getInstancesInRange: HyperdriveFactoryGetInstancesInRangeContractFunction

    getNumberOfDeployerCoordinators: HyperdriveFactoryGetNumberOfDeployerCoordinatorsContractFunction

    getNumberOfInstances: HyperdriveFactoryGetNumberOfInstancesContractFunction

    governance: HyperdriveFactoryGovernanceContractFunction

    hyperdriveGovernance: HyperdriveFactoryHyperdriveGovernanceContractFunction

    instancesToDeployerCoordinators: HyperdriveFactoryInstancesToDeployerCoordinatorsContractFunction

    isDeployerCoordinator: HyperdriveFactoryIsDeployerCoordinatorContractFunction

    isInstance: HyperdriveFactoryIsInstanceContractFunction

    linkerCodeHash: HyperdriveFactoryLinkerCodeHashContractFunction

    linkerFactory: HyperdriveFactoryLinkerFactoryContractFunction

    maxCheckpointDuration: HyperdriveFactoryMaxCheckpointDurationContractFunction

    maxFees: HyperdriveFactoryMaxFeesContractFunction

    maxFixedAPR: HyperdriveFactoryMaxFixedAPRContractFunction

    maxPositionDuration: HyperdriveFactoryMaxPositionDurationContractFunction

    maxTimeStretchAPR: HyperdriveFactoryMaxTimeStretchAPRContractFunction

    minCheckpointDuration: HyperdriveFactoryMinCheckpointDurationContractFunction

    minFees: HyperdriveFactoryMinFeesContractFunction

    minFixedAPR: HyperdriveFactoryMinFixedAPRContractFunction

    minPositionDuration: HyperdriveFactoryMinPositionDurationContractFunction

    minTimeStretchAPR: HyperdriveFactoryMinTimeStretchAPRContractFunction

    removeDeployerCoordinator: HyperdriveFactoryRemoveDeployerCoordinatorContractFunction

    updateCheckpointDurationResolution: HyperdriveFactoryUpdateCheckpointDurationResolutionContractFunction

    updateDefaultPausers: HyperdriveFactoryUpdateDefaultPausersContractFunction

    updateFeeCollector: HyperdriveFactoryUpdateFeeCollectorContractFunction

    updateGovernance: HyperdriveFactoryUpdateGovernanceContractFunction

    updateHyperdriveGovernance: HyperdriveFactoryUpdateHyperdriveGovernanceContractFunction

    updateLinkerCodeHash: HyperdriveFactoryUpdateLinkerCodeHashContractFunction

    updateLinkerFactory: HyperdriveFactoryUpdateLinkerFactoryContractFunction

    updateMaxCheckpointDuration: HyperdriveFactoryUpdateMaxCheckpointDurationContractFunction

    updateMaxFees: HyperdriveFactoryUpdateMaxFeesContractFunction

    updateMaxFixedAPR: HyperdriveFactoryUpdateMaxFixedAPRContractFunction

    updateMaxPositionDuration: HyperdriveFactoryUpdateMaxPositionDurationContractFunction

    updateMaxTimeStretchAPR: HyperdriveFactoryUpdateMaxTimeStretchAPRContractFunction

    updateMinCheckpointDuration: HyperdriveFactoryUpdateMinCheckpointDurationContractFunction

    updateMinFees: HyperdriveFactoryUpdateMinFeesContractFunction

    updateMinFixedAPR: HyperdriveFactoryUpdateMinFixedAPRContractFunction

    updateMinPositionDuration: HyperdriveFactoryUpdateMinPositionDurationContractFunction

    updateMinTimeStretchAPR: HyperdriveFactoryUpdateMinTimeStretchAPRContractFunction

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
        decode_tuples: bool | None = False,
    ) -> None:
        super().__init__(abi, w3, address, decode_tuples)
        self.addDeployerCoordinator = HyperdriveFactoryAddDeployerCoordinatorContractFunction.factory(
            "addDeployerCoordinator",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="addDeployerCoordinator",
        )
        self.checkpointDurationResolution = HyperdriveFactoryCheckpointDurationResolutionContractFunction.factory(
            "checkpointDurationResolution",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="checkpointDurationResolution",
        )
        self.defaultPausers = HyperdriveFactoryDefaultPausersContractFunction.factory(
            "defaultPausers",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="defaultPausers",
        )
        self.deployAndInitialize = HyperdriveFactoryDeployAndInitializeContractFunction.factory(
            "deployAndInitialize",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="deployAndInitialize",
        )
        self.deployTarget = HyperdriveFactoryDeployTargetContractFunction.factory(
            "deployTarget",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="deployTarget",
        )
        self.feeCollector = HyperdriveFactoryFeeCollectorContractFunction.factory(
            "feeCollector",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="feeCollector",
        )
        self.getDeployerCoordinatorAtIndex = HyperdriveFactoryGetDeployerCoordinatorAtIndexContractFunction.factory(
            "getDeployerCoordinatorAtIndex",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="getDeployerCoordinatorAtIndex",
        )
        self.getDeployerCoordinatorsInRange = HyperdriveFactoryGetDeployerCoordinatorsInRangeContractFunction.factory(
            "getDeployerCoordinatorsInRange",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="getDeployerCoordinatorsInRange",
        )
        self.getInstanceAtIndex = HyperdriveFactoryGetInstanceAtIndexContractFunction.factory(
            "getInstanceAtIndex",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="getInstanceAtIndex",
        )
        self.getInstancesInRange = HyperdriveFactoryGetInstancesInRangeContractFunction.factory(
            "getInstancesInRange",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="getInstancesInRange",
        )
        self.getNumberOfDeployerCoordinators = HyperdriveFactoryGetNumberOfDeployerCoordinatorsContractFunction.factory(
            "getNumberOfDeployerCoordinators",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="getNumberOfDeployerCoordinators",
        )
        self.getNumberOfInstances = HyperdriveFactoryGetNumberOfInstancesContractFunction.factory(
            "getNumberOfInstances",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="getNumberOfInstances",
        )
        self.governance = HyperdriveFactoryGovernanceContractFunction.factory(
            "governance",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="governance",
        )
        self.hyperdriveGovernance = HyperdriveFactoryHyperdriveGovernanceContractFunction.factory(
            "hyperdriveGovernance",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="hyperdriveGovernance",
        )
        self.instancesToDeployerCoordinators = HyperdriveFactoryInstancesToDeployerCoordinatorsContractFunction.factory(
            "instancesToDeployerCoordinators",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="instancesToDeployerCoordinators",
        )
        self.isDeployerCoordinator = HyperdriveFactoryIsDeployerCoordinatorContractFunction.factory(
            "isDeployerCoordinator",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="isDeployerCoordinator",
        )
        self.isInstance = HyperdriveFactoryIsInstanceContractFunction.factory(
            "isInstance",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="isInstance",
        )
        self.linkerCodeHash = HyperdriveFactoryLinkerCodeHashContractFunction.factory(
            "linkerCodeHash",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="linkerCodeHash",
        )
        self.linkerFactory = HyperdriveFactoryLinkerFactoryContractFunction.factory(
            "linkerFactory",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="linkerFactory",
        )
        self.maxCheckpointDuration = HyperdriveFactoryMaxCheckpointDurationContractFunction.factory(
            "maxCheckpointDuration",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="maxCheckpointDuration",
        )
        self.maxFees = HyperdriveFactoryMaxFeesContractFunction.factory(
            "maxFees",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="maxFees",
        )
        self.maxFixedAPR = HyperdriveFactoryMaxFixedAPRContractFunction.factory(
            "maxFixedAPR",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="maxFixedAPR",
        )
        self.maxPositionDuration = HyperdriveFactoryMaxPositionDurationContractFunction.factory(
            "maxPositionDuration",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="maxPositionDuration",
        )
        self.maxTimeStretchAPR = HyperdriveFactoryMaxTimeStretchAPRContractFunction.factory(
            "maxTimeStretchAPR",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="maxTimeStretchAPR",
        )
        self.minCheckpointDuration = HyperdriveFactoryMinCheckpointDurationContractFunction.factory(
            "minCheckpointDuration",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="minCheckpointDuration",
        )
        self.minFees = HyperdriveFactoryMinFeesContractFunction.factory(
            "minFees",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="minFees",
        )
        self.minFixedAPR = HyperdriveFactoryMinFixedAPRContractFunction.factory(
            "minFixedAPR",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="minFixedAPR",
        )
        self.minPositionDuration = HyperdriveFactoryMinPositionDurationContractFunction.factory(
            "minPositionDuration",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="minPositionDuration",
        )
        self.minTimeStretchAPR = HyperdriveFactoryMinTimeStretchAPRContractFunction.factory(
            "minTimeStretchAPR",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="minTimeStretchAPR",
        )
        self.removeDeployerCoordinator = HyperdriveFactoryRemoveDeployerCoordinatorContractFunction.factory(
            "removeDeployerCoordinator",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="removeDeployerCoordinator",
        )
        self.updateCheckpointDurationResolution = (
            HyperdriveFactoryUpdateCheckpointDurationResolutionContractFunction.factory(
                "updateCheckpointDurationResolution",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                function_identifier="updateCheckpointDurationResolution",
            )
        )
        self.updateDefaultPausers = HyperdriveFactoryUpdateDefaultPausersContractFunction.factory(
            "updateDefaultPausers",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="updateDefaultPausers",
        )
        self.updateFeeCollector = HyperdriveFactoryUpdateFeeCollectorContractFunction.factory(
            "updateFeeCollector",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="updateFeeCollector",
        )
        self.updateGovernance = HyperdriveFactoryUpdateGovernanceContractFunction.factory(
            "updateGovernance",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="updateGovernance",
        )
        self.updateHyperdriveGovernance = HyperdriveFactoryUpdateHyperdriveGovernanceContractFunction.factory(
            "updateHyperdriveGovernance",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="updateHyperdriveGovernance",
        )
        self.updateLinkerCodeHash = HyperdriveFactoryUpdateLinkerCodeHashContractFunction.factory(
            "updateLinkerCodeHash",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="updateLinkerCodeHash",
        )
        self.updateLinkerFactory = HyperdriveFactoryUpdateLinkerFactoryContractFunction.factory(
            "updateLinkerFactory",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="updateLinkerFactory",
        )
        self.updateMaxCheckpointDuration = HyperdriveFactoryUpdateMaxCheckpointDurationContractFunction.factory(
            "updateMaxCheckpointDuration",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="updateMaxCheckpointDuration",
        )
        self.updateMaxFees = HyperdriveFactoryUpdateMaxFeesContractFunction.factory(
            "updateMaxFees",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="updateMaxFees",
        )
        self.updateMaxFixedAPR = HyperdriveFactoryUpdateMaxFixedAPRContractFunction.factory(
            "updateMaxFixedAPR",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="updateMaxFixedAPR",
        )
        self.updateMaxPositionDuration = HyperdriveFactoryUpdateMaxPositionDurationContractFunction.factory(
            "updateMaxPositionDuration",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="updateMaxPositionDuration",
        )
        self.updateMaxTimeStretchAPR = HyperdriveFactoryUpdateMaxTimeStretchAPRContractFunction.factory(
            "updateMaxTimeStretchAPR",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="updateMaxTimeStretchAPR",
        )
        self.updateMinCheckpointDuration = HyperdriveFactoryUpdateMinCheckpointDurationContractFunction.factory(
            "updateMinCheckpointDuration",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="updateMinCheckpointDuration",
        )
        self.updateMinFees = HyperdriveFactoryUpdateMinFeesContractFunction.factory(
            "updateMinFees",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="updateMinFees",
        )
        self.updateMinFixedAPR = HyperdriveFactoryUpdateMinFixedAPRContractFunction.factory(
            "updateMinFixedAPR",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="updateMinFixedAPR",
        )
        self.updateMinPositionDuration = HyperdriveFactoryUpdateMinPositionDurationContractFunction.factory(
            "updateMinPositionDuration",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="updateMinPositionDuration",
        )
        self.updateMinTimeStretchAPR = HyperdriveFactoryUpdateMinTimeStretchAPRContractFunction.factory(
            "updateMinTimeStretchAPR",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="updateMinTimeStretchAPR",
        )


class HyperdriveFactoryCheckpointDurationResolutionUpdatedContractEvent(ContractEvent):
    """ContractEvent for CheckpointDurationResolutionUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "HyperdriveFactoryCheckpointDurationResolutionUpdatedContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["HyperdriveFactoryCheckpointDurationResolutionUpdatedContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "HyperdriveFactoryCheckpointDurationResolutionUpdatedContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["HyperdriveFactoryCheckpointDurationResolutionUpdatedContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class HyperdriveFactoryDefaultPausersUpdatedContractEvent(ContractEvent):
    """ContractEvent for DefaultPausersUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "HyperdriveFactoryDefaultPausersUpdatedContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["HyperdriveFactoryDefaultPausersUpdatedContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "HyperdriveFactoryDefaultPausersUpdatedContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["HyperdriveFactoryDefaultPausersUpdatedContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class HyperdriveFactoryDeployedContractEvent(ContractEvent):
    """ContractEvent for Deployed."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "HyperdriveFactoryDeployedContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["HyperdriveFactoryDeployedContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "HyperdriveFactoryDeployedContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["HyperdriveFactoryDeployedContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class HyperdriveFactoryDeployerCoordinatorAddedContractEvent(ContractEvent):
    """ContractEvent for DeployerCoordinatorAdded."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "HyperdriveFactoryDeployerCoordinatorAddedContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["HyperdriveFactoryDeployerCoordinatorAddedContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "HyperdriveFactoryDeployerCoordinatorAddedContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["HyperdriveFactoryDeployerCoordinatorAddedContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class HyperdriveFactoryDeployerCoordinatorRemovedContractEvent(ContractEvent):
    """ContractEvent for DeployerCoordinatorRemoved."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "HyperdriveFactoryDeployerCoordinatorRemovedContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["HyperdriveFactoryDeployerCoordinatorRemovedContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "HyperdriveFactoryDeployerCoordinatorRemovedContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["HyperdriveFactoryDeployerCoordinatorRemovedContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class HyperdriveFactoryFeeCollectorUpdatedContractEvent(ContractEvent):
    """ContractEvent for FeeCollectorUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "HyperdriveFactoryFeeCollectorUpdatedContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["HyperdriveFactoryFeeCollectorUpdatedContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "HyperdriveFactoryFeeCollectorUpdatedContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["HyperdriveFactoryFeeCollectorUpdatedContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class HyperdriveFactoryGovernanceUpdatedContractEvent(ContractEvent):
    """ContractEvent for GovernanceUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "HyperdriveFactoryGovernanceUpdatedContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["HyperdriveFactoryGovernanceUpdatedContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "HyperdriveFactoryGovernanceUpdatedContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["HyperdriveFactoryGovernanceUpdatedContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class HyperdriveFactoryHyperdriveGovernanceUpdatedContractEvent(ContractEvent):
    """ContractEvent for HyperdriveGovernanceUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "HyperdriveFactoryHyperdriveGovernanceUpdatedContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["HyperdriveFactoryHyperdriveGovernanceUpdatedContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "HyperdriveFactoryHyperdriveGovernanceUpdatedContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["HyperdriveFactoryHyperdriveGovernanceUpdatedContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class HyperdriveFactoryLinkerCodeHashUpdatedContractEvent(ContractEvent):
    """ContractEvent for LinkerCodeHashUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "HyperdriveFactoryLinkerCodeHashUpdatedContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["HyperdriveFactoryLinkerCodeHashUpdatedContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "HyperdriveFactoryLinkerCodeHashUpdatedContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["HyperdriveFactoryLinkerCodeHashUpdatedContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class HyperdriveFactoryLinkerFactoryUpdatedContractEvent(ContractEvent):
    """ContractEvent for LinkerFactoryUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "HyperdriveFactoryLinkerFactoryUpdatedContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["HyperdriveFactoryLinkerFactoryUpdatedContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "HyperdriveFactoryLinkerFactoryUpdatedContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["HyperdriveFactoryLinkerFactoryUpdatedContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class HyperdriveFactoryMaxCheckpointDurationUpdatedContractEvent(ContractEvent):
    """ContractEvent for MaxCheckpointDurationUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "HyperdriveFactoryMaxCheckpointDurationUpdatedContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["HyperdriveFactoryMaxCheckpointDurationUpdatedContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "HyperdriveFactoryMaxCheckpointDurationUpdatedContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["HyperdriveFactoryMaxCheckpointDurationUpdatedContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class HyperdriveFactoryMaxFeesUpdatedContractEvent(ContractEvent):
    """ContractEvent for MaxFeesUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "HyperdriveFactoryMaxFeesUpdatedContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["HyperdriveFactoryMaxFeesUpdatedContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "HyperdriveFactoryMaxFeesUpdatedContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["HyperdriveFactoryMaxFeesUpdatedContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class HyperdriveFactoryMaxFixedAPRUpdatedContractEvent(ContractEvent):
    """ContractEvent for MaxFixedAPRUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "HyperdriveFactoryMaxFixedAPRUpdatedContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["HyperdriveFactoryMaxFixedAPRUpdatedContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "HyperdriveFactoryMaxFixedAPRUpdatedContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["HyperdriveFactoryMaxFixedAPRUpdatedContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class HyperdriveFactoryMaxPositionDurationUpdatedContractEvent(ContractEvent):
    """ContractEvent for MaxPositionDurationUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "HyperdriveFactoryMaxPositionDurationUpdatedContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["HyperdriveFactoryMaxPositionDurationUpdatedContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "HyperdriveFactoryMaxPositionDurationUpdatedContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["HyperdriveFactoryMaxPositionDurationUpdatedContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class HyperdriveFactoryMaxTimeStretchAPRUpdatedContractEvent(ContractEvent):
    """ContractEvent for MaxTimeStretchAPRUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "HyperdriveFactoryMaxTimeStretchAPRUpdatedContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["HyperdriveFactoryMaxTimeStretchAPRUpdatedContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "HyperdriveFactoryMaxTimeStretchAPRUpdatedContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["HyperdriveFactoryMaxTimeStretchAPRUpdatedContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class HyperdriveFactoryMinCheckpointDurationUpdatedContractEvent(ContractEvent):
    """ContractEvent for MinCheckpointDurationUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "HyperdriveFactoryMinCheckpointDurationUpdatedContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["HyperdriveFactoryMinCheckpointDurationUpdatedContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "HyperdriveFactoryMinCheckpointDurationUpdatedContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["HyperdriveFactoryMinCheckpointDurationUpdatedContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class HyperdriveFactoryMinFeesUpdatedContractEvent(ContractEvent):
    """ContractEvent for MinFeesUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "HyperdriveFactoryMinFeesUpdatedContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["HyperdriveFactoryMinFeesUpdatedContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "HyperdriveFactoryMinFeesUpdatedContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["HyperdriveFactoryMinFeesUpdatedContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class HyperdriveFactoryMinFixedAPRUpdatedContractEvent(ContractEvent):
    """ContractEvent for MinFixedAPRUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "HyperdriveFactoryMinFixedAPRUpdatedContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["HyperdriveFactoryMinFixedAPRUpdatedContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "HyperdriveFactoryMinFixedAPRUpdatedContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["HyperdriveFactoryMinFixedAPRUpdatedContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class HyperdriveFactoryMinPositionDurationUpdatedContractEvent(ContractEvent):
    """ContractEvent for MinPositionDurationUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "HyperdriveFactoryMinPositionDurationUpdatedContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["HyperdriveFactoryMinPositionDurationUpdatedContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "HyperdriveFactoryMinPositionDurationUpdatedContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["HyperdriveFactoryMinPositionDurationUpdatedContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class HyperdriveFactoryMinTimeStretchAPRUpdatedContractEvent(ContractEvent):
    """ContractEvent for MinTimeStretchAPRUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "HyperdriveFactoryMinTimeStretchAPRUpdatedContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["HyperdriveFactoryMinTimeStretchAPRUpdatedContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "HyperdriveFactoryMinTimeStretchAPRUpdatedContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["HyperdriveFactoryMinTimeStretchAPRUpdatedContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class HyperdriveFactoryContractEvents(ContractEvents):
    """ContractEvents for the HyperdriveFactory contract."""

    CheckpointDurationResolutionUpdated: HyperdriveFactoryCheckpointDurationResolutionUpdatedContractEvent

    DefaultPausersUpdated: HyperdriveFactoryDefaultPausersUpdatedContractEvent

    Deployed: HyperdriveFactoryDeployedContractEvent

    DeployerCoordinatorAdded: HyperdriveFactoryDeployerCoordinatorAddedContractEvent

    DeployerCoordinatorRemoved: HyperdriveFactoryDeployerCoordinatorRemovedContractEvent

    FeeCollectorUpdated: HyperdriveFactoryFeeCollectorUpdatedContractEvent

    GovernanceUpdated: HyperdriveFactoryGovernanceUpdatedContractEvent

    HyperdriveGovernanceUpdated: HyperdriveFactoryHyperdriveGovernanceUpdatedContractEvent

    LinkerCodeHashUpdated: HyperdriveFactoryLinkerCodeHashUpdatedContractEvent

    LinkerFactoryUpdated: HyperdriveFactoryLinkerFactoryUpdatedContractEvent

    MaxCheckpointDurationUpdated: HyperdriveFactoryMaxCheckpointDurationUpdatedContractEvent

    MaxFeesUpdated: HyperdriveFactoryMaxFeesUpdatedContractEvent

    MaxFixedAPRUpdated: HyperdriveFactoryMaxFixedAPRUpdatedContractEvent

    MaxPositionDurationUpdated: HyperdriveFactoryMaxPositionDurationUpdatedContractEvent

    MaxTimeStretchAPRUpdated: HyperdriveFactoryMaxTimeStretchAPRUpdatedContractEvent

    MinCheckpointDurationUpdated: HyperdriveFactoryMinCheckpointDurationUpdatedContractEvent

    MinFeesUpdated: HyperdriveFactoryMinFeesUpdatedContractEvent

    MinFixedAPRUpdated: HyperdriveFactoryMinFixedAPRUpdatedContractEvent

    MinPositionDurationUpdated: HyperdriveFactoryMinPositionDurationUpdatedContractEvent

    MinTimeStretchAPRUpdated: HyperdriveFactoryMinTimeStretchAPRUpdatedContractEvent

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
    ) -> None:
        super().__init__(abi, w3, address)
        self.CheckpointDurationResolutionUpdated = cast(
            HyperdriveFactoryCheckpointDurationResolutionUpdatedContractEvent,
            HyperdriveFactoryCheckpointDurationResolutionUpdatedContractEvent.factory(
                "CheckpointDurationResolutionUpdated",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="CheckpointDurationResolutionUpdated",
            ),
        )
        self.DefaultPausersUpdated = cast(
            HyperdriveFactoryDefaultPausersUpdatedContractEvent,
            HyperdriveFactoryDefaultPausersUpdatedContractEvent.factory(
                "DefaultPausersUpdated", w3=w3, contract_abi=abi, address=address, event_name="DefaultPausersUpdated"
            ),
        )
        self.Deployed = cast(
            HyperdriveFactoryDeployedContractEvent,
            HyperdriveFactoryDeployedContractEvent.factory(
                "Deployed", w3=w3, contract_abi=abi, address=address, event_name="Deployed"
            ),
        )
        self.DeployerCoordinatorAdded = cast(
            HyperdriveFactoryDeployerCoordinatorAddedContractEvent,
            HyperdriveFactoryDeployerCoordinatorAddedContractEvent.factory(
                "DeployerCoordinatorAdded",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="DeployerCoordinatorAdded",
            ),
        )
        self.DeployerCoordinatorRemoved = cast(
            HyperdriveFactoryDeployerCoordinatorRemovedContractEvent,
            HyperdriveFactoryDeployerCoordinatorRemovedContractEvent.factory(
                "DeployerCoordinatorRemoved",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="DeployerCoordinatorRemoved",
            ),
        )
        self.FeeCollectorUpdated = cast(
            HyperdriveFactoryFeeCollectorUpdatedContractEvent,
            HyperdriveFactoryFeeCollectorUpdatedContractEvent.factory(
                "FeeCollectorUpdated", w3=w3, contract_abi=abi, address=address, event_name="FeeCollectorUpdated"
            ),
        )
        self.GovernanceUpdated = cast(
            HyperdriveFactoryGovernanceUpdatedContractEvent,
            HyperdriveFactoryGovernanceUpdatedContractEvent.factory(
                "GovernanceUpdated", w3=w3, contract_abi=abi, address=address, event_name="GovernanceUpdated"
            ),
        )
        self.HyperdriveGovernanceUpdated = cast(
            HyperdriveFactoryHyperdriveGovernanceUpdatedContractEvent,
            HyperdriveFactoryHyperdriveGovernanceUpdatedContractEvent.factory(
                "HyperdriveGovernanceUpdated",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="HyperdriveGovernanceUpdated",
            ),
        )
        self.LinkerCodeHashUpdated = cast(
            HyperdriveFactoryLinkerCodeHashUpdatedContractEvent,
            HyperdriveFactoryLinkerCodeHashUpdatedContractEvent.factory(
                "LinkerCodeHashUpdated", w3=w3, contract_abi=abi, address=address, event_name="LinkerCodeHashUpdated"
            ),
        )
        self.LinkerFactoryUpdated = cast(
            HyperdriveFactoryLinkerFactoryUpdatedContractEvent,
            HyperdriveFactoryLinkerFactoryUpdatedContractEvent.factory(
                "LinkerFactoryUpdated", w3=w3, contract_abi=abi, address=address, event_name="LinkerFactoryUpdated"
            ),
        )
        self.MaxCheckpointDurationUpdated = cast(
            HyperdriveFactoryMaxCheckpointDurationUpdatedContractEvent,
            HyperdriveFactoryMaxCheckpointDurationUpdatedContractEvent.factory(
                "MaxCheckpointDurationUpdated",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="MaxCheckpointDurationUpdated",
            ),
        )
        self.MaxFeesUpdated = cast(
            HyperdriveFactoryMaxFeesUpdatedContractEvent,
            HyperdriveFactoryMaxFeesUpdatedContractEvent.factory(
                "MaxFeesUpdated", w3=w3, contract_abi=abi, address=address, event_name="MaxFeesUpdated"
            ),
        )
        self.MaxFixedAPRUpdated = cast(
            HyperdriveFactoryMaxFixedAPRUpdatedContractEvent,
            HyperdriveFactoryMaxFixedAPRUpdatedContractEvent.factory(
                "MaxFixedAPRUpdated", w3=w3, contract_abi=abi, address=address, event_name="MaxFixedAPRUpdated"
            ),
        )
        self.MaxPositionDurationUpdated = cast(
            HyperdriveFactoryMaxPositionDurationUpdatedContractEvent,
            HyperdriveFactoryMaxPositionDurationUpdatedContractEvent.factory(
                "MaxPositionDurationUpdated",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="MaxPositionDurationUpdated",
            ),
        )
        self.MaxTimeStretchAPRUpdated = cast(
            HyperdriveFactoryMaxTimeStretchAPRUpdatedContractEvent,
            HyperdriveFactoryMaxTimeStretchAPRUpdatedContractEvent.factory(
                "MaxTimeStretchAPRUpdated",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="MaxTimeStretchAPRUpdated",
            ),
        )
        self.MinCheckpointDurationUpdated = cast(
            HyperdriveFactoryMinCheckpointDurationUpdatedContractEvent,
            HyperdriveFactoryMinCheckpointDurationUpdatedContractEvent.factory(
                "MinCheckpointDurationUpdated",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="MinCheckpointDurationUpdated",
            ),
        )
        self.MinFeesUpdated = cast(
            HyperdriveFactoryMinFeesUpdatedContractEvent,
            HyperdriveFactoryMinFeesUpdatedContractEvent.factory(
                "MinFeesUpdated", w3=w3, contract_abi=abi, address=address, event_name="MinFeesUpdated"
            ),
        )
        self.MinFixedAPRUpdated = cast(
            HyperdriveFactoryMinFixedAPRUpdatedContractEvent,
            HyperdriveFactoryMinFixedAPRUpdatedContractEvent.factory(
                "MinFixedAPRUpdated", w3=w3, contract_abi=abi, address=address, event_name="MinFixedAPRUpdated"
            ),
        )
        self.MinPositionDurationUpdated = cast(
            HyperdriveFactoryMinPositionDurationUpdatedContractEvent,
            HyperdriveFactoryMinPositionDurationUpdatedContractEvent.factory(
                "MinPositionDurationUpdated",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="MinPositionDurationUpdated",
            ),
        )
        self.MinTimeStretchAPRUpdated = cast(
            HyperdriveFactoryMinTimeStretchAPRUpdatedContractEvent,
            HyperdriveFactoryMinTimeStretchAPRUpdatedContractEvent.factory(
                "MinTimeStretchAPRUpdated",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="MinTimeStretchAPRUpdated",
            ),
        )


class HyperdriveFactoryAddressEmptyCodeContractError:
    """ContractError for AddressEmptyCode."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveFactoryAddressEmptyCodeContractError",
    ) -> None:
        self.selector = "0x9996b315"
        self.signature = "AddressEmptyCode(address)"

    def decode_error_data(  # type: ignore
        self: "HyperdriveFactoryAddressEmptyCodeContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "AddressEmptyCode" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveFactoryAddressEmptyCodeContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "AddressEmptyCode" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveFactoryAddressInsufficientBalanceContractError:
    """ContractError for AddressInsufficientBalance."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveFactoryAddressInsufficientBalanceContractError",
    ) -> None:
        self.selector = "0xcd786059"
        self.signature = "AddressInsufficientBalance(address)"

    def decode_error_data(  # type: ignore
        self: "HyperdriveFactoryAddressInsufficientBalanceContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "AddressInsufficientBalance" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveFactoryAddressInsufficientBalanceContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "AddressInsufficientBalance" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveFactoryDeployerCoordinatorAlreadyAddedContractError:
    """ContractError for DeployerCoordinatorAlreadyAdded."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveFactoryDeployerCoordinatorAlreadyAddedContractError",
    ) -> None:
        self.selector = "0xbd34634f"
        self.signature = "DeployerCoordinatorAlreadyAdded()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveFactoryDeployerCoordinatorAlreadyAddedContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "DeployerCoordinatorAlreadyAdded" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveFactoryDeployerCoordinatorAlreadyAddedContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "DeployerCoordinatorAlreadyAdded" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveFactoryDeployerCoordinatorIndexMismatchContractError:
    """ContractError for DeployerCoordinatorIndexMismatch."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveFactoryDeployerCoordinatorIndexMismatchContractError",
    ) -> None:
        self.selector = "0x3c9c032c"
        self.signature = "DeployerCoordinatorIndexMismatch()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveFactoryDeployerCoordinatorIndexMismatchContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "DeployerCoordinatorIndexMismatch" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveFactoryDeployerCoordinatorIndexMismatchContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "DeployerCoordinatorIndexMismatch" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveFactoryDeployerCoordinatorNotAddedContractError:
    """ContractError for DeployerCoordinatorNotAdded."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveFactoryDeployerCoordinatorNotAddedContractError",
    ) -> None:
        self.selector = "0x4bf121ab"
        self.signature = "DeployerCoordinatorNotAdded()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveFactoryDeployerCoordinatorNotAddedContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "DeployerCoordinatorNotAdded" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveFactoryDeployerCoordinatorNotAddedContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "DeployerCoordinatorNotAdded" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveFactoryEndIndexTooLargeContractError:
    """ContractError for EndIndexTooLarge."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveFactoryEndIndexTooLargeContractError",
    ) -> None:
        self.selector = "0xe0f7becb"
        self.signature = "EndIndexTooLarge()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveFactoryEndIndexTooLargeContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "EndIndexTooLarge" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveFactoryEndIndexTooLargeContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "EndIndexTooLarge" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveFactoryFailedInnerCallContractError:
    """ContractError for FailedInnerCall."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveFactoryFailedInnerCallContractError",
    ) -> None:
        self.selector = "0x1425ea42"
        self.signature = "FailedInnerCall()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveFactoryFailedInnerCallContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "FailedInnerCall" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveFactoryFailedInnerCallContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "FailedInnerCall" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveFactoryInsufficientValueContractError:
    """ContractError for InsufficientValue."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveFactoryInsufficientValueContractError",
    ) -> None:
        self.selector = "0x11011294"
        self.signature = "InsufficientValue()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveFactoryInsufficientValueContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InsufficientValue" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveFactoryInsufficientValueContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InsufficientValue" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveFactoryInvalidCheckpointDurationContractError:
    """ContractError for InvalidCheckpointDuration."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveFactoryInvalidCheckpointDurationContractError",
    ) -> None:
        self.selector = "0x5428734d"
        self.signature = "InvalidCheckpointDuration()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveFactoryInvalidCheckpointDurationContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidCheckpointDuration" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveFactoryInvalidCheckpointDurationContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidCheckpointDuration" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveFactoryInvalidCheckpointDurationResolutionContractError:
    """ContractError for InvalidCheckpointDurationResolution."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveFactoryInvalidCheckpointDurationResolutionContractError",
    ) -> None:
        self.selector = "0x8dbae0a8"
        self.signature = "InvalidCheckpointDurationResolution()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveFactoryInvalidCheckpointDurationResolutionContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidCheckpointDurationResolution" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveFactoryInvalidCheckpointDurationResolutionContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidCheckpointDurationResolution" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveFactoryInvalidDeployConfigContractError:
    """ContractError for InvalidDeployConfig."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveFactoryInvalidDeployConfigContractError",
    ) -> None:
        self.selector = "0xe8c02dd7"
        self.signature = "InvalidDeployConfig()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveFactoryInvalidDeployConfigContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidDeployConfig" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveFactoryInvalidDeployConfigContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidDeployConfig" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveFactoryInvalidDeployerCoordinatorContractError:
    """ContractError for InvalidDeployerCoordinator."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveFactoryInvalidDeployerCoordinatorContractError",
    ) -> None:
        self.selector = "0x6e623f0f"
        self.signature = "InvalidDeployerCoordinator()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveFactoryInvalidDeployerCoordinatorContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidDeployerCoordinator" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveFactoryInvalidDeployerCoordinatorContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidDeployerCoordinator" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveFactoryInvalidFeesContractError:
    """ContractError for InvalidFees."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveFactoryInvalidFeesContractError",
    ) -> None:
        self.selector = "0x2d8768f9"
        self.signature = "InvalidFees()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveFactoryInvalidFeesContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidFees" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveFactoryInvalidFeesContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidFees" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveFactoryInvalidFixedAPRContractError:
    """ContractError for InvalidFixedAPR."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveFactoryInvalidFixedAPRContractError",
    ) -> None:
        self.selector = "0x30554de1"
        self.signature = "InvalidFixedAPR()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveFactoryInvalidFixedAPRContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidFixedAPR" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveFactoryInvalidFixedAPRContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidFixedAPR" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveFactoryInvalidIndexesContractError:
    """ContractError for InvalidIndexes."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveFactoryInvalidIndexesContractError",
    ) -> None:
        self.selector = "0x764e6b56"
        self.signature = "InvalidIndexes()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveFactoryInvalidIndexesContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidIndexes" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveFactoryInvalidIndexesContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidIndexes" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveFactoryInvalidMaxCheckpointDurationContractError:
    """ContractError for InvalidMaxCheckpointDuration."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveFactoryInvalidMaxCheckpointDurationContractError",
    ) -> None:
        self.selector = "0xf9c0959d"
        self.signature = "InvalidMaxCheckpointDuration()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveFactoryInvalidMaxCheckpointDurationContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidMaxCheckpointDuration" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveFactoryInvalidMaxCheckpointDurationContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidMaxCheckpointDuration" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveFactoryInvalidMaxFeesContractError:
    """ContractError for InvalidMaxFees."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveFactoryInvalidMaxFeesContractError",
    ) -> None:
        self.selector = "0x2c20e3f6"
        self.signature = "InvalidMaxFees()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveFactoryInvalidMaxFeesContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidMaxFees" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveFactoryInvalidMaxFeesContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidMaxFees" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveFactoryInvalidMaxFixedAPRContractError:
    """ContractError for InvalidMaxFixedAPR."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveFactoryInvalidMaxFixedAPRContractError",
    ) -> None:
        self.selector = "0x673edec0"
        self.signature = "InvalidMaxFixedAPR()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveFactoryInvalidMaxFixedAPRContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidMaxFixedAPR" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveFactoryInvalidMaxFixedAPRContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidMaxFixedAPR" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveFactoryInvalidMaxPositionDurationContractError:
    """ContractError for InvalidMaxPositionDuration."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveFactoryInvalidMaxPositionDurationContractError",
    ) -> None:
        self.selector = "0xcfb699cb"
        self.signature = "InvalidMaxPositionDuration()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveFactoryInvalidMaxPositionDurationContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidMaxPositionDuration" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveFactoryInvalidMaxPositionDurationContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidMaxPositionDuration" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveFactoryInvalidMaxTimeStretchAPRContractError:
    """ContractError for InvalidMaxTimeStretchAPR."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveFactoryInvalidMaxTimeStretchAPRContractError",
    ) -> None:
        self.selector = "0xa35539d0"
        self.signature = "InvalidMaxTimeStretchAPR()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveFactoryInvalidMaxTimeStretchAPRContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidMaxTimeStretchAPR" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveFactoryInvalidMaxTimeStretchAPRContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidMaxTimeStretchAPR" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveFactoryInvalidMinCheckpointDurationContractError:
    """ContractError for InvalidMinCheckpointDuration."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveFactoryInvalidMinCheckpointDurationContractError",
    ) -> None:
        self.selector = "0x0433acc6"
        self.signature = "InvalidMinCheckpointDuration()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveFactoryInvalidMinCheckpointDurationContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidMinCheckpointDuration" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveFactoryInvalidMinCheckpointDurationContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidMinCheckpointDuration" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveFactoryInvalidMinFeesContractError:
    """ContractError for InvalidMinFees."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveFactoryInvalidMinFeesContractError",
    ) -> None:
        self.selector = "0x15b05a8f"
        self.signature = "InvalidMinFees()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveFactoryInvalidMinFeesContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidMinFees" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveFactoryInvalidMinFeesContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidMinFees" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveFactoryInvalidMinFixedAPRContractError:
    """ContractError for InvalidMinFixedAPR."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveFactoryInvalidMinFixedAPRContractError",
    ) -> None:
        self.selector = "0x1670f797"
        self.signature = "InvalidMinFixedAPR()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveFactoryInvalidMinFixedAPRContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidMinFixedAPR" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveFactoryInvalidMinFixedAPRContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidMinFixedAPR" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveFactoryInvalidMinPositionDurationContractError:
    """ContractError for InvalidMinPositionDuration."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveFactoryInvalidMinPositionDurationContractError",
    ) -> None:
        self.selector = "0x600f5a02"
        self.signature = "InvalidMinPositionDuration()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveFactoryInvalidMinPositionDurationContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidMinPositionDuration" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveFactoryInvalidMinPositionDurationContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidMinPositionDuration" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveFactoryInvalidMinTimeStretchAPRContractError:
    """ContractError for InvalidMinTimeStretchAPR."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveFactoryInvalidMinTimeStretchAPRContractError",
    ) -> None:
        self.selector = "0x5a8f6557"
        self.signature = "InvalidMinTimeStretchAPR()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveFactoryInvalidMinTimeStretchAPRContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidMinTimeStretchAPR" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveFactoryInvalidMinTimeStretchAPRContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidMinTimeStretchAPR" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveFactoryInvalidPositionDurationContractError:
    """ContractError for InvalidPositionDuration."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveFactoryInvalidPositionDurationContractError",
    ) -> None:
        self.selector = "0x4a7fff9e"
        self.signature = "InvalidPositionDuration()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveFactoryInvalidPositionDurationContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidPositionDuration" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveFactoryInvalidPositionDurationContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidPositionDuration" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveFactoryInvalidTimeStretchAPRContractError:
    """ContractError for InvalidTimeStretchAPR."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveFactoryInvalidTimeStretchAPRContractError",
    ) -> None:
        self.selector = "0x83ebdfb7"
        self.signature = "InvalidTimeStretchAPR()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveFactoryInvalidTimeStretchAPRContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidTimeStretchAPR" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveFactoryInvalidTimeStretchAPRContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidTimeStretchAPR" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveFactoryLnInvalidInputContractError:
    """ContractError for LnInvalidInput."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveFactoryLnInvalidInputContractError",
    ) -> None:
        self.selector = "0xe61b4975"
        self.signature = "LnInvalidInput()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveFactoryLnInvalidInputContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "LnInvalidInput" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveFactoryLnInvalidInputContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "LnInvalidInput" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveFactorySafeERC20FailedOperationContractError:
    """ContractError for SafeERC20FailedOperation."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveFactorySafeERC20FailedOperationContractError",
    ) -> None:
        self.selector = "0x5274afe7"
        self.signature = "SafeERC20FailedOperation(address)"

    def decode_error_data(  # type: ignore
        self: "HyperdriveFactorySafeERC20FailedOperationContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "SafeERC20FailedOperation" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveFactorySafeERC20FailedOperationContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "SafeERC20FailedOperation" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveFactoryTransferFailedContractError:
    """ContractError for TransferFailed."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveFactoryTransferFailedContractError",
    ) -> None:
        self.selector = "0x90b8ec18"
        self.signature = "TransferFailed()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveFactoryTransferFailedContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "TransferFailed" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveFactoryTransferFailedContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "TransferFailed" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveFactoryUnauthorizedContractError:
    """ContractError for Unauthorized."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveFactoryUnauthorizedContractError",
    ) -> None:
        self.selector = "0x82b42900"
        self.signature = "Unauthorized()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveFactoryUnauthorizedContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "Unauthorized" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveFactoryUnauthorizedContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "Unauthorized" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveFactoryUnsafeCastToInt256ContractError:
    """ContractError for UnsafeCastToInt256."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveFactoryUnsafeCastToInt256ContractError",
    ) -> None:
        self.selector = "0x72dd4e02"
        self.signature = "UnsafeCastToInt256()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveFactoryUnsafeCastToInt256ContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "UnsafeCastToInt256" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveFactoryUnsafeCastToInt256ContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "UnsafeCastToInt256" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveFactoryContractErrors:
    """ContractErrors for the HyperdriveFactory contract."""

    AddressEmptyCode: HyperdriveFactoryAddressEmptyCodeContractError

    AddressInsufficientBalance: HyperdriveFactoryAddressInsufficientBalanceContractError

    DeployerCoordinatorAlreadyAdded: HyperdriveFactoryDeployerCoordinatorAlreadyAddedContractError

    DeployerCoordinatorIndexMismatch: HyperdriveFactoryDeployerCoordinatorIndexMismatchContractError

    DeployerCoordinatorNotAdded: HyperdriveFactoryDeployerCoordinatorNotAddedContractError

    EndIndexTooLarge: HyperdriveFactoryEndIndexTooLargeContractError

    FailedInnerCall: HyperdriveFactoryFailedInnerCallContractError

    InsufficientValue: HyperdriveFactoryInsufficientValueContractError

    InvalidCheckpointDuration: HyperdriveFactoryInvalidCheckpointDurationContractError

    InvalidCheckpointDurationResolution: HyperdriveFactoryInvalidCheckpointDurationResolutionContractError

    InvalidDeployConfig: HyperdriveFactoryInvalidDeployConfigContractError

    InvalidDeployerCoordinator: HyperdriveFactoryInvalidDeployerCoordinatorContractError

    InvalidFees: HyperdriveFactoryInvalidFeesContractError

    InvalidFixedAPR: HyperdriveFactoryInvalidFixedAPRContractError

    InvalidIndexes: HyperdriveFactoryInvalidIndexesContractError

    InvalidMaxCheckpointDuration: HyperdriveFactoryInvalidMaxCheckpointDurationContractError

    InvalidMaxFees: HyperdriveFactoryInvalidMaxFeesContractError

    InvalidMaxFixedAPR: HyperdriveFactoryInvalidMaxFixedAPRContractError

    InvalidMaxPositionDuration: HyperdriveFactoryInvalidMaxPositionDurationContractError

    InvalidMaxTimeStretchAPR: HyperdriveFactoryInvalidMaxTimeStretchAPRContractError

    InvalidMinCheckpointDuration: HyperdriveFactoryInvalidMinCheckpointDurationContractError

    InvalidMinFees: HyperdriveFactoryInvalidMinFeesContractError

    InvalidMinFixedAPR: HyperdriveFactoryInvalidMinFixedAPRContractError

    InvalidMinPositionDuration: HyperdriveFactoryInvalidMinPositionDurationContractError

    InvalidMinTimeStretchAPR: HyperdriveFactoryInvalidMinTimeStretchAPRContractError

    InvalidPositionDuration: HyperdriveFactoryInvalidPositionDurationContractError

    InvalidTimeStretchAPR: HyperdriveFactoryInvalidTimeStretchAPRContractError

    LnInvalidInput: HyperdriveFactoryLnInvalidInputContractError

    SafeERC20FailedOperation: HyperdriveFactorySafeERC20FailedOperationContractError

    TransferFailed: HyperdriveFactoryTransferFailedContractError

    Unauthorized: HyperdriveFactoryUnauthorizedContractError

    UnsafeCastToInt256: HyperdriveFactoryUnsafeCastToInt256ContractError

    def __init__(
        self,
    ) -> None:
        self.AddressEmptyCode = HyperdriveFactoryAddressEmptyCodeContractError()
        self.AddressInsufficientBalance = HyperdriveFactoryAddressInsufficientBalanceContractError()
        self.DeployerCoordinatorAlreadyAdded = HyperdriveFactoryDeployerCoordinatorAlreadyAddedContractError()
        self.DeployerCoordinatorIndexMismatch = HyperdriveFactoryDeployerCoordinatorIndexMismatchContractError()
        self.DeployerCoordinatorNotAdded = HyperdriveFactoryDeployerCoordinatorNotAddedContractError()
        self.EndIndexTooLarge = HyperdriveFactoryEndIndexTooLargeContractError()
        self.FailedInnerCall = HyperdriveFactoryFailedInnerCallContractError()
        self.InsufficientValue = HyperdriveFactoryInsufficientValueContractError()
        self.InvalidCheckpointDuration = HyperdriveFactoryInvalidCheckpointDurationContractError()
        self.InvalidCheckpointDurationResolution = HyperdriveFactoryInvalidCheckpointDurationResolutionContractError()
        self.InvalidDeployConfig = HyperdriveFactoryInvalidDeployConfigContractError()
        self.InvalidDeployerCoordinator = HyperdriveFactoryInvalidDeployerCoordinatorContractError()
        self.InvalidFees = HyperdriveFactoryInvalidFeesContractError()
        self.InvalidFixedAPR = HyperdriveFactoryInvalidFixedAPRContractError()
        self.InvalidIndexes = HyperdriveFactoryInvalidIndexesContractError()
        self.InvalidMaxCheckpointDuration = HyperdriveFactoryInvalidMaxCheckpointDurationContractError()
        self.InvalidMaxFees = HyperdriveFactoryInvalidMaxFeesContractError()
        self.InvalidMaxFixedAPR = HyperdriveFactoryInvalidMaxFixedAPRContractError()
        self.InvalidMaxPositionDuration = HyperdriveFactoryInvalidMaxPositionDurationContractError()
        self.InvalidMaxTimeStretchAPR = HyperdriveFactoryInvalidMaxTimeStretchAPRContractError()
        self.InvalidMinCheckpointDuration = HyperdriveFactoryInvalidMinCheckpointDurationContractError()
        self.InvalidMinFees = HyperdriveFactoryInvalidMinFeesContractError()
        self.InvalidMinFixedAPR = HyperdriveFactoryInvalidMinFixedAPRContractError()
        self.InvalidMinPositionDuration = HyperdriveFactoryInvalidMinPositionDurationContractError()
        self.InvalidMinTimeStretchAPR = HyperdriveFactoryInvalidMinTimeStretchAPRContractError()
        self.InvalidPositionDuration = HyperdriveFactoryInvalidPositionDurationContractError()
        self.InvalidTimeStretchAPR = HyperdriveFactoryInvalidTimeStretchAPRContractError()
        self.LnInvalidInput = HyperdriveFactoryLnInvalidInputContractError()
        self.SafeERC20FailedOperation = HyperdriveFactorySafeERC20FailedOperationContractError()
        self.TransferFailed = HyperdriveFactoryTransferFailedContractError()
        self.Unauthorized = HyperdriveFactoryUnauthorizedContractError()
        self.UnsafeCastToInt256 = HyperdriveFactoryUnsafeCastToInt256ContractError()

        self._all = [
            self.AddressEmptyCode,
            self.AddressInsufficientBalance,
            self.DeployerCoordinatorAlreadyAdded,
            self.DeployerCoordinatorIndexMismatch,
            self.DeployerCoordinatorNotAdded,
            self.EndIndexTooLarge,
            self.FailedInnerCall,
            self.InsufficientValue,
            self.InvalidCheckpointDuration,
            self.InvalidCheckpointDurationResolution,
            self.InvalidDeployConfig,
            self.InvalidDeployerCoordinator,
            self.InvalidFees,
            self.InvalidFixedAPR,
            self.InvalidIndexes,
            self.InvalidMaxCheckpointDuration,
            self.InvalidMaxFees,
            self.InvalidMaxFixedAPR,
            self.InvalidMaxPositionDuration,
            self.InvalidMaxTimeStretchAPR,
            self.InvalidMinCheckpointDuration,
            self.InvalidMinFees,
            self.InvalidMinFixedAPR,
            self.InvalidMinPositionDuration,
            self.InvalidMinTimeStretchAPR,
            self.InvalidPositionDuration,
            self.InvalidTimeStretchAPR,
            self.LnInvalidInput,
            self.SafeERC20FailedOperation,
            self.TransferFailed,
            self.Unauthorized,
            self.UnsafeCastToInt256,
        ]

    def decode_custom_error(self, data: str) -> tuple[Any, ...]:
        """Decodes a custom contract error."""
        selector = data[:10]
        for err in self._all:
            if err.selector == selector:
                return err.decode_error_data(HexBytes(data[10:]))

        raise ValueError(f"HyperdriveFactory does not have a selector matching {selector}")


hyperdrivefactory_abi: ABI = cast(
    ABI,
    [
        {
            "type": "constructor",
            "inputs": [
                {
                    "name": "_factoryConfig",
                    "type": "tuple",
                    "internalType": "struct HyperdriveFactory.FactoryConfig",
                    "components": [
                        {"name": "governance", "type": "address", "internalType": "address"},
                        {"name": "hyperdriveGovernance", "type": "address", "internalType": "address"},
                        {"name": "defaultPausers", "type": "address[]", "internalType": "address[]"},
                        {"name": "feeCollector", "type": "address", "internalType": "address"},
                        {"name": "checkpointDurationResolution", "type": "uint256", "internalType": "uint256"},
                        {"name": "minCheckpointDuration", "type": "uint256", "internalType": "uint256"},
                        {"name": "maxCheckpointDuration", "type": "uint256", "internalType": "uint256"},
                        {"name": "minPositionDuration", "type": "uint256", "internalType": "uint256"},
                        {"name": "maxPositionDuration", "type": "uint256", "internalType": "uint256"},
                        {"name": "minFixedAPR", "type": "uint256", "internalType": "uint256"},
                        {"name": "maxFixedAPR", "type": "uint256", "internalType": "uint256"},
                        {"name": "minTimeStretchAPR", "type": "uint256", "internalType": "uint256"},
                        {"name": "maxTimeStretchAPR", "type": "uint256", "internalType": "uint256"},
                        {
                            "name": "minFees",
                            "type": "tuple",
                            "internalType": "struct IHyperdrive.Fees",
                            "components": [
                                {"name": "curve", "type": "uint256", "internalType": "uint256"},
                                {"name": "flat", "type": "uint256", "internalType": "uint256"},
                                {"name": "governanceLP", "type": "uint256", "internalType": "uint256"},
                                {"name": "governanceZombie", "type": "uint256", "internalType": "uint256"},
                            ],
                        },
                        {
                            "name": "maxFees",
                            "type": "tuple",
                            "internalType": "struct IHyperdrive.Fees",
                            "components": [
                                {"name": "curve", "type": "uint256", "internalType": "uint256"},
                                {"name": "flat", "type": "uint256", "internalType": "uint256"},
                                {"name": "governanceLP", "type": "uint256", "internalType": "uint256"},
                                {"name": "governanceZombie", "type": "uint256", "internalType": "uint256"},
                            ],
                        },
                        {"name": "linkerFactory", "type": "address", "internalType": "address"},
                        {"name": "linkerCodeHash", "type": "bytes32", "internalType": "bytes32"},
                    ],
                }
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "addDeployerCoordinator",
            "inputs": [{"name": "_deployerCoordinator", "type": "address", "internalType": "address"}],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "checkpointDurationResolution",
            "inputs": [],
            "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "defaultPausers",
            "inputs": [],
            "outputs": [{"name": "", "type": "address[]", "internalType": "address[]"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "deployAndInitialize",
            "inputs": [
                {"name": "_deploymentId", "type": "bytes32", "internalType": "bytes32"},
                {"name": "_deployerCoordinator", "type": "address", "internalType": "address"},
                {
                    "name": "_config",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.PoolDeployConfig",
                    "components": [
                        {"name": "baseToken", "type": "address", "internalType": "contract IERC20"},
                        {"name": "linkerFactory", "type": "address", "internalType": "address"},
                        {"name": "linkerCodeHash", "type": "bytes32", "internalType": "bytes32"},
                        {"name": "minimumShareReserves", "type": "uint256", "internalType": "uint256"},
                        {"name": "minimumTransactionAmount", "type": "uint256", "internalType": "uint256"},
                        {"name": "positionDuration", "type": "uint256", "internalType": "uint256"},
                        {"name": "checkpointDuration", "type": "uint256", "internalType": "uint256"},
                        {"name": "timeStretch", "type": "uint256", "internalType": "uint256"},
                        {"name": "governance", "type": "address", "internalType": "address"},
                        {"name": "feeCollector", "type": "address", "internalType": "address"},
                        {
                            "name": "fees",
                            "type": "tuple",
                            "internalType": "struct IHyperdrive.Fees",
                            "components": [
                                {"name": "curve", "type": "uint256", "internalType": "uint256"},
                                {"name": "flat", "type": "uint256", "internalType": "uint256"},
                                {"name": "governanceLP", "type": "uint256", "internalType": "uint256"},
                                {"name": "governanceZombie", "type": "uint256", "internalType": "uint256"},
                            ],
                        },
                    ],
                },
                {"name": "_extraData", "type": "bytes", "internalType": "bytes"},
                {"name": "_contribution", "type": "uint256", "internalType": "uint256"},
                {"name": "_fixedAPR", "type": "uint256", "internalType": "uint256"},
                {"name": "_timeStretchAPR", "type": "uint256", "internalType": "uint256"},
                {"name": "_initializeExtraData", "type": "bytes", "internalType": "bytes"},
                {"name": "_salt", "type": "bytes32", "internalType": "bytes32"},
            ],
            "outputs": [{"name": "", "type": "address", "internalType": "contract IHyperdrive"}],
            "stateMutability": "payable",
        },
        {
            "type": "function",
            "name": "deployTarget",
            "inputs": [
                {"name": "_deploymentId", "type": "bytes32", "internalType": "bytes32"},
                {"name": "_deployerCoordinator", "type": "address", "internalType": "address"},
                {
                    "name": "_config",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.PoolDeployConfig",
                    "components": [
                        {"name": "baseToken", "type": "address", "internalType": "contract IERC20"},
                        {"name": "linkerFactory", "type": "address", "internalType": "address"},
                        {"name": "linkerCodeHash", "type": "bytes32", "internalType": "bytes32"},
                        {"name": "minimumShareReserves", "type": "uint256", "internalType": "uint256"},
                        {"name": "minimumTransactionAmount", "type": "uint256", "internalType": "uint256"},
                        {"name": "positionDuration", "type": "uint256", "internalType": "uint256"},
                        {"name": "checkpointDuration", "type": "uint256", "internalType": "uint256"},
                        {"name": "timeStretch", "type": "uint256", "internalType": "uint256"},
                        {"name": "governance", "type": "address", "internalType": "address"},
                        {"name": "feeCollector", "type": "address", "internalType": "address"},
                        {
                            "name": "fees",
                            "type": "tuple",
                            "internalType": "struct IHyperdrive.Fees",
                            "components": [
                                {"name": "curve", "type": "uint256", "internalType": "uint256"},
                                {"name": "flat", "type": "uint256", "internalType": "uint256"},
                                {"name": "governanceLP", "type": "uint256", "internalType": "uint256"},
                                {"name": "governanceZombie", "type": "uint256", "internalType": "uint256"},
                            ],
                        },
                    ],
                },
                {"name": "_extraData", "type": "bytes", "internalType": "bytes"},
                {"name": "_fixedAPR", "type": "uint256", "internalType": "uint256"},
                {"name": "_timeStretchAPR", "type": "uint256", "internalType": "uint256"},
                {"name": "_targetIndex", "type": "uint256", "internalType": "uint256"},
                {"name": "_salt", "type": "bytes32", "internalType": "bytes32"},
            ],
            "outputs": [{"name": "", "type": "address", "internalType": "address"}],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "feeCollector",
            "inputs": [],
            "outputs": [{"name": "", "type": "address", "internalType": "address"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getDeployerCoordinatorAtIndex",
            "inputs": [{"name": "index", "type": "uint256", "internalType": "uint256"}],
            "outputs": [{"name": "", "type": "address", "internalType": "address"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getDeployerCoordinatorsInRange",
            "inputs": [
                {"name": "startIndex", "type": "uint256", "internalType": "uint256"},
                {"name": "endIndex", "type": "uint256", "internalType": "uint256"},
            ],
            "outputs": [{"name": "range", "type": "address[]", "internalType": "address[]"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getInstanceAtIndex",
            "inputs": [{"name": "index", "type": "uint256", "internalType": "uint256"}],
            "outputs": [{"name": "", "type": "address", "internalType": "address"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getInstancesInRange",
            "inputs": [
                {"name": "startIndex", "type": "uint256", "internalType": "uint256"},
                {"name": "endIndex", "type": "uint256", "internalType": "uint256"},
            ],
            "outputs": [{"name": "range", "type": "address[]", "internalType": "address[]"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getNumberOfDeployerCoordinators",
            "inputs": [],
            "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getNumberOfInstances",
            "inputs": [],
            "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "governance",
            "inputs": [],
            "outputs": [{"name": "", "type": "address", "internalType": "address"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "hyperdriveGovernance",
            "inputs": [],
            "outputs": [{"name": "", "type": "address", "internalType": "address"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "instancesToDeployerCoordinators",
            "inputs": [{"name": "instance", "type": "address", "internalType": "address"}],
            "outputs": [{"name": "deployCoordinator", "type": "address", "internalType": "address"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "isDeployerCoordinator",
            "inputs": [{"name": "", "type": "address", "internalType": "address"}],
            "outputs": [{"name": "", "type": "bool", "internalType": "bool"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "isInstance",
            "inputs": [{"name": "", "type": "address", "internalType": "address"}],
            "outputs": [{"name": "", "type": "bool", "internalType": "bool"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "linkerCodeHash",
            "inputs": [],
            "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "linkerFactory",
            "inputs": [],
            "outputs": [{"name": "", "type": "address", "internalType": "address"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "maxCheckpointDuration",
            "inputs": [],
            "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "maxFees",
            "inputs": [],
            "outputs": [
                {
                    "name": "",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.Fees",
                    "components": [
                        {"name": "curve", "type": "uint256", "internalType": "uint256"},
                        {"name": "flat", "type": "uint256", "internalType": "uint256"},
                        {"name": "governanceLP", "type": "uint256", "internalType": "uint256"},
                        {"name": "governanceZombie", "type": "uint256", "internalType": "uint256"},
                    ],
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "maxFixedAPR",
            "inputs": [],
            "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "maxPositionDuration",
            "inputs": [],
            "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "maxTimeStretchAPR",
            "inputs": [],
            "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "minCheckpointDuration",
            "inputs": [],
            "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "minFees",
            "inputs": [],
            "outputs": [
                {
                    "name": "",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.Fees",
                    "components": [
                        {"name": "curve", "type": "uint256", "internalType": "uint256"},
                        {"name": "flat", "type": "uint256", "internalType": "uint256"},
                        {"name": "governanceLP", "type": "uint256", "internalType": "uint256"},
                        {"name": "governanceZombie", "type": "uint256", "internalType": "uint256"},
                    ],
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "minFixedAPR",
            "inputs": [],
            "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "minPositionDuration",
            "inputs": [],
            "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "minTimeStretchAPR",
            "inputs": [],
            "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "removeDeployerCoordinator",
            "inputs": [
                {"name": "_deployerCoordinator", "type": "address", "internalType": "address"},
                {"name": "_index", "type": "uint256", "internalType": "uint256"},
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "updateCheckpointDurationResolution",
            "inputs": [{"name": "_checkpointDurationResolution", "type": "uint256", "internalType": "uint256"}],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "updateDefaultPausers",
            "inputs": [{"name": "_defaultPausers_", "type": "address[]", "internalType": "address[]"}],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "updateFeeCollector",
            "inputs": [{"name": "_feeCollector", "type": "address", "internalType": "address"}],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "updateGovernance",
            "inputs": [{"name": "_governance", "type": "address", "internalType": "address"}],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "updateHyperdriveGovernance",
            "inputs": [{"name": "_hyperdriveGovernance", "type": "address", "internalType": "address"}],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "updateLinkerCodeHash",
            "inputs": [{"name": "_linkerCodeHash", "type": "bytes32", "internalType": "bytes32"}],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "updateLinkerFactory",
            "inputs": [{"name": "_linkerFactory", "type": "address", "internalType": "address"}],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "updateMaxCheckpointDuration",
            "inputs": [{"name": "_maxCheckpointDuration", "type": "uint256", "internalType": "uint256"}],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "updateMaxFees",
            "inputs": [
                {
                    "name": "__maxFees",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.Fees",
                    "components": [
                        {"name": "curve", "type": "uint256", "internalType": "uint256"},
                        {"name": "flat", "type": "uint256", "internalType": "uint256"},
                        {"name": "governanceLP", "type": "uint256", "internalType": "uint256"},
                        {"name": "governanceZombie", "type": "uint256", "internalType": "uint256"},
                    ],
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "updateMaxFixedAPR",
            "inputs": [{"name": "_maxFixedAPR", "type": "uint256", "internalType": "uint256"}],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "updateMaxPositionDuration",
            "inputs": [{"name": "_maxPositionDuration", "type": "uint256", "internalType": "uint256"}],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "updateMaxTimeStretchAPR",
            "inputs": [{"name": "_maxTimeStretchAPR", "type": "uint256", "internalType": "uint256"}],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "updateMinCheckpointDuration",
            "inputs": [{"name": "_minCheckpointDuration", "type": "uint256", "internalType": "uint256"}],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "updateMinFees",
            "inputs": [
                {
                    "name": "__minFees",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.Fees",
                    "components": [
                        {"name": "curve", "type": "uint256", "internalType": "uint256"},
                        {"name": "flat", "type": "uint256", "internalType": "uint256"},
                        {"name": "governanceLP", "type": "uint256", "internalType": "uint256"},
                        {"name": "governanceZombie", "type": "uint256", "internalType": "uint256"},
                    ],
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "updateMinFixedAPR",
            "inputs": [{"name": "_minFixedAPR", "type": "uint256", "internalType": "uint256"}],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "updateMinPositionDuration",
            "inputs": [{"name": "_minPositionDuration", "type": "uint256", "internalType": "uint256"}],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "updateMinTimeStretchAPR",
            "inputs": [{"name": "_minTimeStretchAPR", "type": "uint256", "internalType": "uint256"}],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "event",
            "name": "CheckpointDurationResolutionUpdated",
            "inputs": [
                {
                    "name": "newCheckpointDurationResolution",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "DefaultPausersUpdated",
            "inputs": [
                {"name": "newDefaultPausers", "type": "address[]", "indexed": False, "internalType": "address[]"}
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "Deployed",
            "inputs": [
                {"name": "deployerCoordinator", "type": "address", "indexed": True, "internalType": "address"},
                {"name": "hyperdrive", "type": "address", "indexed": False, "internalType": "address"},
                {
                    "name": "config",
                    "type": "tuple",
                    "indexed": False,
                    "internalType": "struct IHyperdrive.PoolDeployConfig",
                    "components": [
                        {"name": "baseToken", "type": "address", "internalType": "contract IERC20"},
                        {"name": "linkerFactory", "type": "address", "internalType": "address"},
                        {"name": "linkerCodeHash", "type": "bytes32", "internalType": "bytes32"},
                        {"name": "minimumShareReserves", "type": "uint256", "internalType": "uint256"},
                        {"name": "minimumTransactionAmount", "type": "uint256", "internalType": "uint256"},
                        {"name": "positionDuration", "type": "uint256", "internalType": "uint256"},
                        {"name": "checkpointDuration", "type": "uint256", "internalType": "uint256"},
                        {"name": "timeStretch", "type": "uint256", "internalType": "uint256"},
                        {"name": "governance", "type": "address", "internalType": "address"},
                        {"name": "feeCollector", "type": "address", "internalType": "address"},
                        {
                            "name": "fees",
                            "type": "tuple",
                            "internalType": "struct IHyperdrive.Fees",
                            "components": [
                                {"name": "curve", "type": "uint256", "internalType": "uint256"},
                                {"name": "flat", "type": "uint256", "internalType": "uint256"},
                                {"name": "governanceLP", "type": "uint256", "internalType": "uint256"},
                                {"name": "governanceZombie", "type": "uint256", "internalType": "uint256"},
                            ],
                        },
                    ],
                },
                {"name": "extraData", "type": "bytes", "indexed": False, "internalType": "bytes"},
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "DeployerCoordinatorAdded",
            "inputs": [{"name": "deployerCoordinator", "type": "address", "indexed": True, "internalType": "address"}],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "DeployerCoordinatorRemoved",
            "inputs": [{"name": "deployerCoordinator", "type": "address", "indexed": True, "internalType": "address"}],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "FeeCollectorUpdated",
            "inputs": [{"name": "newFeeCollector", "type": "address", "indexed": True, "internalType": "address"}],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "GovernanceUpdated",
            "inputs": [{"name": "governance", "type": "address", "indexed": True, "internalType": "address"}],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "HyperdriveGovernanceUpdated",
            "inputs": [{"name": "hyperdriveGovernance", "type": "address", "indexed": True, "internalType": "address"}],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "LinkerCodeHashUpdated",
            "inputs": [{"name": "newLinkerCodeHash", "type": "bytes32", "indexed": True, "internalType": "bytes32"}],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "LinkerFactoryUpdated",
            "inputs": [{"name": "newLinkerFactory", "type": "address", "indexed": True, "internalType": "address"}],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "MaxCheckpointDurationUpdated",
            "inputs": [
                {"name": "newMaxCheckpointDuration", "type": "uint256", "indexed": False, "internalType": "uint256"}
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "MaxFeesUpdated",
            "inputs": [
                {
                    "name": "newMaxFees",
                    "type": "tuple",
                    "indexed": False,
                    "internalType": "struct IHyperdrive.Fees",
                    "components": [
                        {"name": "curve", "type": "uint256", "internalType": "uint256"},
                        {"name": "flat", "type": "uint256", "internalType": "uint256"},
                        {"name": "governanceLP", "type": "uint256", "internalType": "uint256"},
                        {"name": "governanceZombie", "type": "uint256", "internalType": "uint256"},
                    ],
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "MaxFixedAPRUpdated",
            "inputs": [{"name": "newMaxFixedAPR", "type": "uint256", "indexed": False, "internalType": "uint256"}],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "MaxPositionDurationUpdated",
            "inputs": [
                {"name": "newMaxPositionDuration", "type": "uint256", "indexed": False, "internalType": "uint256"}
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "MaxTimeStretchAPRUpdated",
            "inputs": [
                {"name": "newMaxTimeStretchAPR", "type": "uint256", "indexed": False, "internalType": "uint256"}
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "MinCheckpointDurationUpdated",
            "inputs": [
                {"name": "newMinCheckpointDuration", "type": "uint256", "indexed": False, "internalType": "uint256"}
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "MinFeesUpdated",
            "inputs": [
                {
                    "name": "newMinFees",
                    "type": "tuple",
                    "indexed": False,
                    "internalType": "struct IHyperdrive.Fees",
                    "components": [
                        {"name": "curve", "type": "uint256", "internalType": "uint256"},
                        {"name": "flat", "type": "uint256", "internalType": "uint256"},
                        {"name": "governanceLP", "type": "uint256", "internalType": "uint256"},
                        {"name": "governanceZombie", "type": "uint256", "internalType": "uint256"},
                    ],
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "MinFixedAPRUpdated",
            "inputs": [{"name": "newMinFixedAPR", "type": "uint256", "indexed": False, "internalType": "uint256"}],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "MinPositionDurationUpdated",
            "inputs": [
                {"name": "newMinPositionDuration", "type": "uint256", "indexed": False, "internalType": "uint256"}
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "MinTimeStretchAPRUpdated",
            "inputs": [
                {"name": "newMinTimeStretchAPR", "type": "uint256", "indexed": False, "internalType": "uint256"}
            ],
            "anonymous": False,
        },
        {
            "type": "error",
            "name": "AddressEmptyCode",
            "inputs": [{"name": "target", "type": "address", "internalType": "address"}],
        },
        {
            "type": "error",
            "name": "AddressInsufficientBalance",
            "inputs": [{"name": "account", "type": "address", "internalType": "address"}],
        },
        {"type": "error", "name": "DeployerCoordinatorAlreadyAdded", "inputs": []},
        {"type": "error", "name": "DeployerCoordinatorIndexMismatch", "inputs": []},
        {"type": "error", "name": "DeployerCoordinatorNotAdded", "inputs": []},
        {"type": "error", "name": "EndIndexTooLarge", "inputs": []},
        {"type": "error", "name": "FailedInnerCall", "inputs": []},
        {"type": "error", "name": "InsufficientValue", "inputs": []},
        {"type": "error", "name": "InvalidCheckpointDuration", "inputs": []},
        {"type": "error", "name": "InvalidCheckpointDurationResolution", "inputs": []},
        {"type": "error", "name": "InvalidDeployConfig", "inputs": []},
        {"type": "error", "name": "InvalidDeployerCoordinator", "inputs": []},
        {"type": "error", "name": "InvalidFees", "inputs": []},
        {"type": "error", "name": "InvalidFixedAPR", "inputs": []},
        {"type": "error", "name": "InvalidIndexes", "inputs": []},
        {"type": "error", "name": "InvalidMaxCheckpointDuration", "inputs": []},
        {"type": "error", "name": "InvalidMaxFees", "inputs": []},
        {"type": "error", "name": "InvalidMaxFixedAPR", "inputs": []},
        {"type": "error", "name": "InvalidMaxPositionDuration", "inputs": []},
        {"type": "error", "name": "InvalidMaxTimeStretchAPR", "inputs": []},
        {"type": "error", "name": "InvalidMinCheckpointDuration", "inputs": []},
        {"type": "error", "name": "InvalidMinFees", "inputs": []},
        {"type": "error", "name": "InvalidMinFixedAPR", "inputs": []},
        {"type": "error", "name": "InvalidMinPositionDuration", "inputs": []},
        {"type": "error", "name": "InvalidMinTimeStretchAPR", "inputs": []},
        {"type": "error", "name": "InvalidPositionDuration", "inputs": []},
        {"type": "error", "name": "InvalidTimeStretchAPR", "inputs": []},
        {"type": "error", "name": "LnInvalidInput", "inputs": []},
        {
            "type": "error",
            "name": "SafeERC20FailedOperation",
            "inputs": [{"name": "token", "type": "address", "internalType": "address"}],
        },
        {"type": "error", "name": "TransferFailed", "inputs": []},
        {"type": "error", "name": "Unauthorized", "inputs": []},
        {"type": "error", "name": "UnsafeCastToInt256", "inputs": []},
    ],
)
# pylint: disable=line-too-long
hyperdrivefactory_bytecode = HexStr(
    "0x60806040523480156200001157600080fd5b50604051620038ca380380620038ca8339810160408190526200003491620005cd565b80608001518160a0015110806200005f575080608001518160a001516200005c919062000729565b15155b156200007e57604051630219d66360e11b815260040160405180910390fd5b60a0810151600681905560c08201511080620000ae575080608001518160c00151620000ab919062000729565b15155b15620000cd5760405163f9c0959d60e01b815260040160405180910390fd5b60c0810151600781905560e08201511080620000fd575080608001518160e00151620000fa919062000729565b15155b156200011c57604051633007ad0160e11b815260040160405180910390fd5b60e0810151600881905561010082015110806200014e575080608001518161010001516200014b919062000729565b15155b156200016d5760405163cfb699cb60e01b815260040160405180910390fd5b6101008101516009556101408101516101208201511115620001a2576040516330554de160e01b815260040160405180910390fd5b610120810151600a55610140810151600b556101808101516101608201511115620001e0576040516383ebdfb760e01b815260040160405180910390fd5b610160810151600c55610180810151600d556101c081015151670de0b6b3a764000010806200021f5750670de0b6b3a7640000816101c0015160200151115b806200023b5750670de0b6b3a7640000816101c0015160400151115b80620002575750670de0b6b3a7640000816101c0015160600151115b15620002765760405163161071fb60e11b815260040160405180910390fd5b6101c081015180516012819055602082015160135560408201516014556060909101516015556101a0820151511180620002c15750806101c0015160200151816101a0015160200151115b80620002de5750806101c0015160400151816101a0015160400151115b80620002fb5750806101c0015160600151816101a0015160600151115b156200031a576040516315b05a8f60e01b815260040160405180910390fd5b6101a08101518051600e55602080820151600f556040808301516010556060928301516011558351600080546001600160a01b03199081166001600160a01b03938416179091558386015160018054831691841691909117905593850151600480549095169116179092559082015180516200039b926016920190620003d7565b506101e0810151600280546001600160a01b0319166001600160a01b03909216919091179055610200810151600355608001516005556200074c565b8280548282559060005260206000209081019282156200042f579160200282015b828111156200042f57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190620003f8565b506200043d92915062000441565b5090565b5b808211156200043d576000815560010162000442565b634e487b7160e01b600052604160045260246000fd5b60405161022081016001600160401b038111828210171562000494576200049462000458565b60405290565b80516001600160a01b0381168114620004b257600080fd5b919050565b600082601f830112620004c957600080fd5b815160206001600160401b0380831115620004e857620004e862000458565b8260051b604051601f19603f8301168101818110848211171562000510576200051062000458565b6040529384528581018301938381019250878511156200052f57600080fd5b83870191505b84821015620005595762000549826200049a565b8352918301919083019062000535565b979650505050505050565b6000608082840312156200057757600080fd5b604051608081016001600160401b03811182821017156200059c576200059c62000458565b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b600060208284031215620005e057600080fd5b81516001600160401b0380821115620005f857600080fd5b908301906102e082860312156200060e57600080fd5b620006186200046e565b62000623836200049a565b815262000633602084016200049a565b60208201526040830151828111156200064b57600080fd5b6200065987828601620004b7565b6040830152506200066d606084016200049a565b60608201526080838101519082015260a0808401519082015260c0808401519082015260e08084015190820152610100808401519082015261012080840151908201526101408084015190820152610160808401519082015261018080840151908201526101a09150620006e48683850162000564565b82820152620006f886610220850162000564565b6101c08201526200070d6102a084016200049a565b6101e08201526102c09290920151610200830152509392505050565b6000826200074757634e487b7160e01b600052601260045260246000fd5b500690565b61316e806200075c6000396000f3fe6080604052600436106102885760003560e01c80639af252621161015a578063daac24da116100c1578063e71f34b31161007a578063e71f34b31461078d578063e83e34b1146107ad578063eb71f66c146107c2578063ec895f11146107e2578063f8c09e5914610802578063fe3d5aeb1461083257600080fd5b8063daac24da146106ec578063daf012e61461070c578063dd2b8fbb14610722578063e0e2daaa14610742578063e1b39c8014610758578063e33315551461076d57600080fd5b8063c415b95c11610113578063c415b95c14610654578063c905a4b514610674578063d0f96b921461068a578063d23d7ea3146106a0578063d2c35ce8146106b6578063d6f50169146106d657600080fd5b80639af252621461059a578063a64c90bf146105ba578063b2561263146105dc578063bc30e7a1146105fc578063bf9bd5cd1461061c578063c17225631461063257600080fd5b80636b44e6be116101fe57806383b361e8116101b757806383b361e8146104e457806385229785146105045780638e127cf5146105245780638efc09861461054457806397b0e8ce1461055a57806399623bb11461057a57600080fd5b80636b44e6be146104065780636be6d7d4146104465780636c8cc865146104665780636e95d67c1461049c5780636f6d5c4a146104b15780637324b145146104d157600080fd5b8063421caba811610250578063421caba81461032f578063488007601461034f5780634fbfee77146103785780635720c9d5146103985780635aa6e675146103ae578063628027a3146103e657600080fd5b806310d1dc3e1461028d57806311e77bfe146102af5780631978ebcf146102cf5780632885e3ac146102ef578063411c30351461030f575b600080fd5b34801561029957600080fd5b506102ad6102a83660046128ca565b610852565b005b3480156102bb57600080fd5b506102ad6102ca3660046128dc565b61096b565b3480156102db57600080fd5b506102ad6102ea3660046128dc565b610a44565b3480156102fb57600080fd5b506102ad61030a3660046128ca565b610ac6565b34801561031b57600080fd5b506102ad61032a36600461291a565b610c2c565b34801561033b57600080fd5b506102ad61034a366004612946565b610de4565b34801561035b57600080fd5b50610365600d5481565b6040519081526020015b60405180910390f35b34801561038457600080fd5b506102ad6103933660046128dc565b610ed4565b3480156103a457600080fd5b5061036560065481565b3480156103ba57600080fd5b506000546103ce906001600160a01b031681565b6040516001600160a01b03909116815260200161036f565b3480156103f257600080fd5b506102ad6104013660046128dc565b610f31565b34801561041257600080fd5b50610436610421366004612946565b601b6020526000908152604090205460ff1681565b604051901515815260200161036f565b34801561045257600080fd5b506103ce610461366004612b48565b610fb3565b34801561047257600080fd5b506103ce610481366004612946565b6019602052600090815260409020546001600160a01b031681565b3480156104a857600080fd5b50601a54610365565b3480156104bd57600080fd5b506102ad6104cc3660046128dc565b6110a5565b6103ce6104df366004612bdc565b611149565b3480156104f057600080fd5b506102ad6104ff3660046128dc565b611628565b34801561051057600080fd5b506102ad61051f366004612946565b6116aa565b34801561053057600080fd5b506102ad61053f3660046128dc565b61171e565b34801561055057600080fd5b5061036560095481565b34801561056657600080fd5b506102ad6105753660046128dc565b6117c2565b34801561058657600080fd5b506002546103ce906001600160a01b031681565b3480156105a657600080fd5b506102ad6105b5366004612c9a565b611844565b3480156105c657600080fd5b506105cf6118ac565b60405161036f9190612d0f565b3480156105e857600080fd5b506102ad6105f7366004612946565b61190e565b34801561060857600080fd5b506105cf610617366004612d5c565b611980565b34801561062857600080fd5b50610365600b5481565b34801561063e57600080fd5b50610647611a9d565b60405161036f9190612d7e565b34801561066057600080fd5b506004546103ce906001600160a01b031681565b34801561068057600080fd5b5061036560035481565b34801561069657600080fd5b5061036560055481565b3480156106ac57600080fd5b50610365600a5481565b3480156106c257600080fd5b506102ad6106d1366004612946565b611af5565b3480156106e257600080fd5b50610365600c5481565b3480156106f857600080fd5b506103ce6107073660046128dc565b611b69565b34801561071857600080fd5b5061036560085481565b34801561072e57600080fd5b506102ad61073d366004612946565b611b99565b34801561074e57600080fd5b5061036560075481565b34801561076457600080fd5b50601754610365565b34801561077957600080fd5b506001546103ce906001600160a01b031681565b34801561079957600080fd5b506102ad6107a83660046128dc565b611c0d565b3480156107b957600080fd5b50610647611cb1565b3480156107ce57600080fd5b506102ad6107dd3660046128dc565b611d09565b3480156107ee57600080fd5b506105cf6107fd366004612d5c565b611da1565b34801561080e57600080fd5b5061043661081d366004612946565b60186020526000908152604090205460ff1681565b34801561083e57600080fd5b506103ce61084d3660046128dc565b611eb7565b6000546001600160a01b0316331461087c576040516282b42960e81b815260040160405180910390fd5b60408051608081018252601254808252601354602083015260145492820192909252601554606082015290823511806108bc575080602001518260200135115b806108ce575080604001518260400135115b806108e0575080606001518260600135115b156108fe576040516315b05a8f60e01b815260040160405180910390fd5b8135600e819055602080840135600f81905560408086013560108190556060808801356011819055835196875294860193909352908401528201527fe1c45f8aeb543f30b37cc2fccfbac0f32cc8f234284df921d71cff04e51ef421906080015b60405180910390a15050565b6000546001600160a01b03163314610995576040516282b42960e81b815260040160405180910390fd5b806006546109a39190612da9565b1515806109bc5750806007546109b99190612da9565b15155b806109d35750806008546109d09190612da9565b15155b806109ea5750806009546109e79190612da9565b15155b15610a08576040516311b75c1560e31b815260040160405180910390fd5b60058190556040518181527f04ed835b488b4fcf0a212a46ed67cbbffc2fc81b5cb6a12c546572cbf7b7e06a906020015b60405180910390a150565b6000546001600160a01b03163314610a6e576040516282b42960e81b815260040160405180910390fd5b600b54811115610a9157604051631670f79760e01b815260040160405180910390fd5b600a8190556040518181527faab0ee9100629c405a4d75336e1640cc81e0608fb0d7f17389c06ee8d4f0219190602001610a39565b6000546001600160a01b03163314610af0576040516282b42960e81b815260040160405180910390fd5b60408051608081018252600e548152600f546020820152601054918101919091526011546060820152670de0b6b3a764000082351180610b3b5750670de0b6b3a76400008260200135115b80610b515750670de0b6b3a76400008260400135115b80610b675750670de0b6b3a76400008260600135115b80610b73575080518235105b80610b85575080602001518260200135105b80610b97575080604001518260400135105b80610ba9575080606001518260600135105b15610bc75760405163161071fb60e11b815260040160405180910390fd5b81356012819055602080840135601381905560408086013560148190556060808801356015819055835196875294860193909352908401528201527f8c6093c7e65dd862e88162770c4e156e8a0da57d25d961e0fb6f28cfb7ff89a79060800161095f565b6000546001600160a01b03163314610c56576040516282b42960e81b815260040160405180910390fd5b6001600160a01b03821660009081526018602052604090205460ff16610c8f57604051634bf121ab60e01b815260040160405180910390fd5b816001600160a01b031660178281548110610cac57610cac612dcb565b6000918252602090912001546001600160a01b031614610cdf57604051630f2700cb60e21b815260040160405180910390fd5b6001600160a01b0382166000908152601860205260409020805460ff1916905560178054610d0f90600190612df7565b81548110610d1f57610d1f612dcb565b600091825260209091200154601780546001600160a01b039092169183908110610d4b57610d4b612dcb565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506017805480610d8a57610d8a612e0a565b600082815260208120820160001990810180546001600160a01b03191690559091019091556040516001600160a01b038416917f709b7450bfafda93efd91d29149870a794637ac9d696ca61625fd2f53548afe091a25050565b6000546001600160a01b03163314610e0e576040516282b42960e81b815260040160405180910390fd5b6001600160a01b03811660009081526018602052604090205460ff1615610e485760405163bd34634f60e01b815260040160405180910390fd5b6001600160a01b038116600081815260186020526040808220805460ff1916600190811790915560178054918201815583527fc624b66cc0138b8fabc209247f72d758e1cf3343756d543badbf24212bed8c150180546001600160a01b03191684179055517f16ce88285cfd59829a5aa04370a5ec8090a18c14e7e7fb9d4b12a42291c098e39190a250565b6000546001600160a01b03163314610efe576040516282b42960e81b815260040160405180910390fd5b600381905560405181907f395a61259037298d1c4cd4bf177b64ad5995d38a9394573fcd9060d649314ad090600090a250565b6000546001600160a01b03163314610f5b576040516282b42960e81b815260040160405180910390fd5b600c54811015610f7e57604051630a35539d60e41b815260040160405180910390fd5b600d8190556040518181527fa9e7961bb3342715dbecc208087a6a9df8986d524b3a0a829fd90f5a2f5ba53e90602001610a39565b6001600160a01b03871660009081526018602052604081205460ff16610fec57604051636e623f0f60e01b815260040160405180910390fd5b610ff7878686611ecc565b60408051336020808301919091528183018c905282518083038401815260608301938490528051910120633e61c84960e11b9092526000916001600160a01b038b1691637cc3909291611054918c908c908a908a90606401612f38565b6020604051808303816000875af1158015611073573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110979190612f77565b9a9950505050505050505050565b6000546001600160a01b031633146110cf576040516282b42960e81b815260040160405180910390fd5b6006548110806110ea57506005546110e79082612da9565b15155b806110f6575060085481115b156111145760405163f9c0959d60e01b815260040160405180910390fd5b60078190556040518181527f31407ddd1722f500b8aa2c18e112398626dd7c2869a5f80731ec30b244d9b5f290602001610a39565b6001600160a01b03881660009081526018602052604081205460ff1661118257604051636e623f0f60e01b815260040160405180910390fd5b61118d888686611ecc565b60408051336020808301919091528183018d90528251808303840181526060830193849052805191012063311fa43160e21b9092526000916001600160a01b038c169163c47e90c4916111e8918d908d908990606401612f94565b6020604051808303816000875af1158015611207573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061122b9190612f77565b6001600160a01b038181166000908152601960205260409081902080546001600160a01b0319168e84169081179091556001549092166101008d015251919250907f2b2f18d6a5803b503bcb3d887ccd7a77aa7e1e644a4c99effef843bf3e3071579061129d9084908d908d90612fcf565b60405180910390a2601a805460018082019092557f057c384a7d1c54f3a1b2e5e67b2617b8224fdfd1ea7234eea573a6ff665ff63e0180546001600160a01b0319166001600160a01b038481169182179092556000908152601b60205260408120805460ff19169093179092558a511673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed19016113e257873410156113495760405163044044a560e21b815260040160405180910390fd5b5060408051606081018252338152600160208201528082018690529051631df417fd60e21b815234899003916001600160a01b038416916377d05ff4918b916113999183918d919060040161300a565b60206040518083038185885af11580156113b7573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906113dc9190613050565b5061149f565b50885134906113fc906001600160a01b031633308b6121bf565b8951611412906001600160a01b0316838a61222c565b60408051606081018252338152600160208201528082018790529051631df417fd60e21b81526001600160a01b038416916377d05ff49161145a918c918c919060040161300a565b6020604051808303816000875af1158015611479573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061149d9190613050565b505b60005b60165481101561154557826001600160a01b0316637180c8ca601683815481106114ce576114ce612dcb565b60009182526020909120015460405160e083901b6001600160e01b03191681526001600160a01b03909116600482015260016024820152604401600060405180830381600087803b15801561152257600080fd5b505af1158015611536573d6000803e3d6000fd5b505050508060010190506114a2565b5060015460405163ab033ea960e01b81526001600160a01b0391821660048201529083169063ab033ea990602401600060405180830381600087803b15801561158d57600080fd5b505af11580156115a1573d6000803e3d6000fd5b50505050600081111561161957604051600090339083908381818185875af1925050503d80600081146115f0576040519150601f19603f3d011682016040523d82523d6000602084013e6115f5565b606091505b5050905080611617576040516312171d8360e31b815260040160405180910390fd5b505b509a9950505050505050505050565b6000546001600160a01b03163314611652576040516282b42960e81b815260040160405180910390fd5b600d5481111561167557604051635a8f655760e01b815260040160405180910390fd5b600c8190556040518181527f490eb2a91746aa933c9ffe2f7939aa06498f3259139f8805f008b12c8c697a4690602001610a39565b6000546001600160a01b031633146116d4576040516282b42960e81b815260040160405180910390fd5b600280546001600160a01b0319166001600160a01b0383169081179091556040517f03aa5b0fb65014eea89fda04a7bc11742014881f3c078f2c75b7226ce10d941890600090a250565b6000546001600160a01b03163314611748576040516282b42960e81b815260040160405180910390fd5b60055481108061176357506005546117609082612da9565b15155b8061176f575060075481115b1561178d57604051630219d66360e11b815260040160405180910390fd5b60068190556040518181527f6f8175cdbac1b4d238abba24a17d2554d7b9750bbeda6414e191c478384b763190602001610a39565b6000546001600160a01b031633146117ec576040516282b42960e81b815260040160405180910390fd5b600a5481101561180f5760405163019cfb7b60e61b815260040160405180910390fd5b600b8190556040518181527f4fa35c11ce9a45ae882c154ecb53ab5cac52a74a5b9b0373be36deb30c78297890602001610a39565b6000546001600160a01b0316331461186e576040516282b42960e81b815260040160405180910390fd5b61187a6016838361285b565b507f2a85276cf604a3822e19b29a3e97aebfbc47a19025c2e8f6e80b3af774dcbc38828260405161095f929190613069565b6060601680548060200260200160405190810160405280929190818152602001828054801561190457602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116118e6575b5050505050905090565b6000546001600160a01b03163314611938576040516282b42960e81b815260040160405180910390fd5b600080546001600160a01b0319166001600160a01b038316908117825560405190917f9d3e522e1e47a2f6009739342b9cc7b252a1888154e843ab55ee1c81745795ab91a250565b6060818311156119a357604051633b2735ab60e11b815260040160405180910390fd5b601a5482106119c55760405163e0f7becb60e01b815260040160405180910390fd5b6119cf8383612df7565b6119da9060016130b7565b67ffffffffffffffff8111156119f2576119f2612963565b604051908082528060200260200182016040528015611a1b578160200160208202803683370190505b509050825b828111611a9657601a8181548110611a3a57611a3a612dcb565b9060005260206000200160009054906101000a90046001600160a01b03168285830381518110611a6c57611a6c612dcb565b6001600160a01b039092166020928302919091019091015280611a8e816130ca565b915050611a20565b5092915050565b611ac86040518060800160405280600081526020016000815260200160008152602001600081525090565b5060408051608081018252600e548152600f54602082015260105491810191909152601154606082015290565b6000546001600160a01b03163314611b1f576040516282b42960e81b815260040160405180910390fd5b600480546001600160a01b0319166001600160a01b0383169081179091556040517fe5693914d19c789bdee50a362998c0bc8d035a835f9871da5d51152f0582c34f90600090a250565b6000601a8281548110611b7e57611b7e612dcb565b6000918252602090912001546001600160a01b031692915050565b6000546001600160a01b03163314611bc3576040516282b42960e81b815260040160405180910390fd5b600180546001600160a01b0319166001600160a01b0383169081179091556040517ff3e07b4bb4394f2ff320bd1dd151551dff304d5e948b401d8558b228482c97d890600090a250565b6000546001600160a01b03163314611c37576040516282b42960e81b815260040160405180910390fd5b600754811080611c525750600554611c4f9082612da9565b15155b80611c5e575060095481115b15611c7c57604051633007ad0160e11b815260040160405180910390fd5b60088190556040518181527fe9ef3e93dff799d4db8a12ff79e0918a5a78d75b10527864f4b1c920f6f4f17890602001610a39565b611cdc6040518060800160405280600081526020016000815260200160008152602001600081525090565b50604080516080810182526012548152601354602082015260145491810191909152601554606082015290565b6000546001600160a01b03163314611d33576040516282b42960e81b815260040160405180910390fd5b600854811080611d4e5750600554611d4b9082612da9565b15155b15611d6c5760405163cfb699cb60e01b815260040160405180910390fd5b60098190556040518181527f866fe9485f9983afceaa1385307b6eb0fd3df5a250ae2b0bf76dc9ddd316926b90602001610a39565b606081831115611dc457604051633b2735ab60e11b815260040160405180910390fd5b6017548210611de65760405163e0f7becb60e01b815260040160405180910390fd5b611df08383612df7565b611dfb9060016130b7565b67ffffffffffffffff811115611e1357611e13612963565b604051908082528060200260200182016040528015611e3c578160200160208202803683370190505b509050825b828111611a965760178181548110611e5b57611e5b612dcb565b9060005260206000200160009054906101000a90046001600160a01b03168285830381518110611e8d57611e8d612dcb565b6001600160a01b039092166020928302919091019091015280611eaf816130ca565b915050611e41565b600060178281548110611b7e57611b7e612dcb565b6006548360c001511080611ee557506007548360c00151115b80611f0057506005548360c00151611efd9190612da9565b15155b15611f1e57604051635428734d60e01b815260040160405180910390fd5b6008548360a001511080611f3757506009548360a00151115b80611f5457508260c001518360a00151611f519190612da9565b15155b15611f725760405163253fffcf60e11b815260040160405180910390fd5b601254610140840151511180611f92575060135461014084015160200151115b80611fa7575060145461014084015160400151115b80611fbc575060155461014084015160600151115b80611fce5750600e5461014084015151105b80611fe35750600f5461014084015160200151105b80611ff8575060105461014084015160400151105b8061200d575060115461014084015160600151105b1561202b57604051632d8768f960e01b815260040160405180910390fd5b600a5482108061203c5750600b5482115b1561205a576040516330554de160e01b815260040160405180910390fd5b600061207f6611c37937e0800061207985671bc16d674ec800006122bc565b906122da565b600c5490915061208f90826122da565b8210806120c257506120bf6120b6671bc16d674ec800006120b086856122da565b906122f0565b600d5490612305565b82115b156120e0576040516383ebdfb760e01b815260040160405180910390fd5b60006120f0838660a0015161231a565b60025460208701519192506001600160a01b03918216911614158061211b5750600354856040015114155b8061213a57506004546101208601516001600160a01b03908116911614155b8061215957506001546101008601516001600160a01b03908116911614155b80612167575060e085015115155b156121855760405163e8c02dd760e01b815260040160405180910390fd5b6002546001600160a01b0390811660208701526003546040870152600454166101208601523061010086015260e090940193909352505050565b6040516001600160a01b0384811660248301528381166044830152606482018390526122269186918216906323b872dd906084015b604051602081830303815290604052915060e01b6020820180516001600160e01b0383818316178352505050506123bf565b50505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b17905261227d848261242c565b612226576040516001600160a01b038481166024830152600060448301526122b291869182169063095ea7b3906064016121f4565b61222684826123bf565b60006122d183670de0b6b3a7640000846124d4565b90505b92915050565b60008183116122e957816122d1565b5090919050565b60006122d18383670de0b6b3a76400006124d4565b600081831161231457826122d1565b50919050565b60008061234b61233c61232e8660646130e3565b66a5bbed86c5a000906122f0565b6748cd4072281e0000906122bc565b905061235f670de0b6b3a7640000826122bc565b90506123b7816120b061238a61238561238089670de0b6b3a76400006130b7565b6124f2565b612520565b6123b161238561239f8a8a6301e133806124d4565b61238090670de0b6b3a76400006130b7565b906122bc565b949350505050565b60006123d46001600160a01b0384168361274f565b905080516000141580156123f95750808060200190518101906123f791906130fa565b155b1561242757604051635274afe760e01b81526001600160a01b03841660048201526024015b60405180910390fd5b505050565b6000806000846001600160a01b031684604051612449919061311c565b6000604051808303816000865af19150503d8060008114612486576040519150601f19603f3d011682016040523d82523d6000602084013e61248b565b606091505b50915091508180156124b55750805115806124b55750808060200190518101906124b591906130fa565b80156124cb57506000856001600160a01b03163b115b95945050505050565b60008260001904841183021582026124eb57600080fd5b5091020490565b60006001600160ff1b0382111561251c5760405163396ea70160e11b815260040160405180910390fd5b5090565b60008082136125425760405163e61b497560e01b815260040160405180910390fd5b506fffffffffffffffffffffffffffffffff811160071b81811c67ffffffffffffffff1060061b1781811c63ffffffff1060051b1781811c61ffff1060041b1781811c60ff10600390811b90911782811c600f1060021b1782811c909110600190811b90911782811c90911017609f8181036060019290921b91605f198201906125ce9084901c6124f2565b6c465772b2bbbb5f824b15207a3081018102606090811d6d0388eaa27412d5aca026815d636e018202811d6d0df99ac502031bf953eff472fdcc018202811d6d13cdffb29d51d99322bdff5f2211018202811d6d0a0f742023def783a307a986912e018202811d6d01920d8043ca89b5239253284e42018202811d6c0b7a86d7375468fac667a0a527016c29508e458543d8aa4df2abee7883018302821d6d0139601a2efabe717e604cbb4894018302821d6d02247f7a7b6594320649aa03aba1018302821d6c8c3f38e95a6b1ff2ab1c3b343619018302821d6d02384773bdf1ac5676facced60901901830290911d6cb9a025d814b29c212b8b1a07cd1901909102780a09507084cc699bb0e71ea869ffffffffffffffffffffffff190105711340daa0d5f769dba1915cef59f0815a5506027d0267a36c0c95b3975ab3ee5b203a7614a3f75373f047d803ae7b6687f2b391909102017d57115e47018c7177eebf7cd370a3356a1b7863008a5ae8028c72b88642840160ae1d92915050565b60606122d18383600084600080856001600160a01b03168486604051612775919061311c565b60006040518083038185875af1925050503d80600081146127b2576040519150601f19603f3d011682016040523d82523d6000602084013e6127b7565b606091505b50915091506127c78683836127d3565b925050505b9392505050565b6060826127e8576127e38261282f565b6127cc565b81511580156127ff57506001600160a01b0384163b155b1561282857604051639996b31560e01b81526001600160a01b038516600482015260240161241e565b50806127cc565b80511561283f5780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b50565b8280548282559060005260206000209081019282156128ae579160200282015b828111156128ae5781546001600160a01b0319166001600160a01b0384351617825560209092019160019091019061287b565b5061251c9291505b8082111561251c57600081556001016128b6565b60006080828403121561231457600080fd5b6000602082840312156128ee57600080fd5b5035919050565b6001600160a01b038116811461285857600080fd5b8035612915816128f5565b919050565b6000806040838503121561292d57600080fd5b8235612938816128f5565b946020939093013593505050565b60006020828403121561295857600080fd5b81356127cc816128f5565b634e487b7160e01b600052604160045260246000fd5b604051610160810167ffffffffffffffff8111828210171561299d5761299d612963565b60405290565b6000608082840312156129b557600080fd5b6040516080810181811067ffffffffffffffff821117156129d8576129d8612963565b8060405250809150823581526020830135602082015260408301356040820152606083013560608201525092915050565b60006101c08284031215612a1c57600080fd5b612a24612979565b9050612a2f8261290a565b8152612a3d6020830161290a565b602082015260408201356040820152606082013560608201526080820135608082015260a082013560a082015260c082013560c082015260e082013560e0820152610100612a8c81840161290a565b90820152610120612a9e83820161290a565b90820152610140612ab1848483016129a3565b9082015292915050565b600082601f830112612acc57600080fd5b813567ffffffffffffffff80821115612ae757612ae7612963565b604051601f8301601f19908116603f01168101908282118183101715612b0f57612b0f612963565b81604052838152866020858801011115612b2857600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806000806000806000806102a0898b031215612b6557600080fd5b883597506020890135612b77816128f5565b9650612b868a60408b01612a09565b955061020089013567ffffffffffffffff811115612ba357600080fd5b612baf8b828c01612abb565b989b979a509598610220810135976102408201359750610260820135965061028090910135945092505050565b60008060008060008060008060006102c08a8c031215612bfb57600080fd5b8935985060208a0135612c0d816128f5565b9750612c1c8b60408c01612a09565b96506102008a013567ffffffffffffffff80821115612c3a57600080fd5b612c468d838e01612abb565b97506102208c013596506102408c013595506102608c013594506102808c0135915080821115612c7557600080fd5b50612c828c828d01612abb565b9250506102a08a013590509295985092959850929598565b60008060208385031215612cad57600080fd5b823567ffffffffffffffff80821115612cc557600080fd5b818501915085601f830112612cd957600080fd5b813581811115612ce857600080fd5b8660208260051b8501011115612cfd57600080fd5b60209290920196919550909350505050565b6020808252825182820181905260009190848201906040850190845b81811015612d505783516001600160a01b031683529284019291840191600101612d2b565b50909695505050505050565b60008060408385031215612d6f57600080fd5b50508035926020909101359150565b81518152602080830151908201526040808301519082015260608083015190820152608081016122d4565b600082612dc657634e487b7160e01b600052601260045260246000fd5b500690565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b818103818111156122d4576122d4612de1565b634e487b7160e01b600052603160045260246000fd5b80516001600160a01b031682526020810151612e4760208401826001600160a01b03169052565b5060408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e083015261010080820151612e9f828501826001600160a01b03169052565b5050610120818101516001600160a01b031690830152610140808201518051828501526020810151610160850152604081015161018085015260608101516101a0850152612226565b60005b83811015612f03578181015183820152602001612eeb565b50506000910152565b60008151808452612f24816020860160208601612ee8565b601f01601f19169290920160200192915050565b6000610240878352612f4d6020840188612e20565b806101e0840152612f6081840187612f0c565b610200840195909552505061022001529392505050565b600060208284031215612f8957600080fd5b81516127cc816128f5565b6000610220868352612fa96020840187612e20565b806101e0840152612fbc81840186612f0c565b9150508261020083015295945050505050565b6001600160a01b03841681526000610200612fed6020840186612e20565b806101e084015261300081840185612f0c565b9695505050505050565b8381528260208201526060604082015260018060a01b03825116606082015260208201511515608082015260006040830151606060a084015261300060c0840182612f0c565b60006020828403121561306257600080fd5b5051919050565b60208082528181018390526000908460408401835b868110156130ac578235613091816128f5565b6001600160a01b03168252918301919083019060010161307e565b509695505050505050565b808201808211156122d4576122d4612de1565b6000600182016130dc576130dc612de1565b5060010190565b80820281158282048414176122d4576122d4612de1565b60006020828403121561310c57600080fd5b815180151581146127cc57600080fd5b6000825161312e818460208701612ee8565b919091019291505056fea264697066735822122070714ee9f83601cb4655f882ddb1bfd40c754dbc47b888b431df466a66c20b1c64736f6c63430008140033"
)


class HyperdriveFactoryContract(Contract):
    """A web3.py Contract class for the HyperdriveFactory contract."""

    abi: ABI = hyperdrivefactory_abi
    bytecode: bytes = HexBytes(hyperdrivefactory_bytecode)

    def __init__(self, address: ChecksumAddress | None = None) -> None:
        try:
            # Initialize parent Contract class
            super().__init__(address=address)
            self.functions = HyperdriveFactoryContractFunctions(hyperdrivefactory_abi, self.w3, address)  # type: ignore
            self.events = HyperdriveFactoryContractEvents(hyperdrivefactory_abi, self.w3, address)  # type: ignore
            self.errors = HyperdriveFactoryContractErrors()

        except FallbackNotFound:
            print("Fallback function not found. Continuing...")

    events: HyperdriveFactoryContractEvents

    errors: HyperdriveFactoryContractErrors = HyperdriveFactoryContractErrors()

    functions: HyperdriveFactoryContractFunctions

    class ConstructorArgs(NamedTuple):
        """Arguments to pass the contract's constructor function."""

        factoryConfig: FactoryConfig

    @classmethod
    def constructor(cls, factoryConfig: FactoryConfig) -> ContractConstructor:  # type: ignore
        """Creates a transaction with the contract's constructor function.

        Parameters
        ----------

        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.

        """

        return super().constructor(dataclass_to_tuple(factoryConfig))

    @classmethod
    def deploy(cls, w3: Web3, account: LocalAccount | ChecksumAddress, constructorArgs: ConstructorArgs) -> Self:
        """Deploys and instance of the contract.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.
        """
        deployer = cls.factory(w3=w3)
        constructor_fn = deployer.constructor(*constructorArgs)

        # if an address is supplied, try to use a web3 default account
        if isinstance(account, str):
            tx_hash = constructor_fn.transact({"from": account})
            tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

            deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
            return deployed_contract

        # otherwise use the account provided.
        deployment_tx = constructor_fn.build_transaction()
        current_nonce = w3.eth.get_transaction_count(account.address)
        deployment_tx.update({"nonce": current_nonce})

        # Sign the transaction with local account private key
        signed_tx = account.sign_transaction(deployment_tx)

        # Send the signed transaction and wait for receipt
        tx_hash = w3.eth.send_raw_transaction(signed_tx.rawTransaction)
        tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

        deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
        return deployed_contract

    @classmethod
    def factory(cls, w3: Web3, class_name: str | None = None, **kwargs: Any) -> Type[Self]:
        """Deploys and instance of the contract.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        class_name: str | None
            The instance class name.

        Returns
        -------
        Self
            A deployed instance of the contract.
        """
        contract = super().factory(w3, class_name, **kwargs)
        contract.functions = HyperdriveFactoryContractFunctions(hyperdrivefactory_abi, w3, None)
        contract.errors = HyperdriveFactoryContractErrors()

        return contract
