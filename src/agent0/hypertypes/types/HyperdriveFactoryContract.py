"""A web3.py Contract class for the HyperdriveFactory contract.

DO NOT EDIT.  This file was generated by pypechain.  See documentation at
https://github.com/delvtech/pypechain"""

# contracts have PascalCase names
# pylint: disable=invalid-name

# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments

# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return

# This file is bound to get very long depending on contract sizes.
# pylint: disable=too-many-lines

# methods are overriden with specific arguments instead of generic *args, **kwargs
# pylint: disable=arguments-differ

# consumers have too many opinions on line length
# pylint: disable=line-too-long


from __future__ import annotations

from typing import Any, Iterable, NamedTuple, Sequence, Type, cast

from eth_abi.codec import ABICodec
from eth_abi.registry import registry as default_registry
from eth_account.signers.local import LocalAccount
from eth_typing import ChecksumAddress, HexStr
from hexbytes import HexBytes
from typing_extensions import Self
from web3 import Web3
from web3._utils.filters import LogFilter
from web3.contract.contract import (
    Contract,
    ContractConstructor,
    ContractEvent,
    ContractEvents,
    ContractFunction,
    ContractFunctions,
)
from web3.exceptions import FallbackNotFound
from web3.types import ABI, ABIFunction, BlockIdentifier, CallOverride, EventData, TxParams

from .HyperdriveFactoryTypes import FactoryConfig
from .IHyperdriveTypes import Fees, Options, PoolDeployConfig
from .utilities import dataclass_to_tuple, get_abi_input_types, rename_returned_types, try_bytecode_hexbytes

structs = {
    "Fees": Fees,
    "FactoryConfig": FactoryConfig,
    "PoolDeployConfig": PoolDeployConfig,
    "Options": Options,
}


class HyperdriveFactory_instancesToDeployerCoordinatorsContractFunction(ContractFunction):
    """ContractFunction for the _instancesToDeployerCoordinators method."""

    def __call__(self, instance: str) -> HyperdriveFactory_instancesToDeployerCoordinatorsContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(instance))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(str, rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryAddDeployerCoordinatorContractFunction(ContractFunction):
    """ContractFunction for the addDeployerCoordinator method."""

    def __call__(self, deployerCoordinator: str) -> HyperdriveFactoryAddDeployerCoordinatorContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(deployerCoordinator))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class HyperdriveFactoryCheckpointDurationResolutionContractFunction(ContractFunction):
    """ContractFunction for the checkpointDurationResolution method."""

    def __call__(self) -> HyperdriveFactoryCheckpointDurationResolutionContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(int, rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryDefaultPausersContractFunction(ContractFunction):
    """ContractFunction for the defaultPausers method."""

    def __call__(self) -> HyperdriveFactoryDefaultPausersContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[str]:
        """returns list[str]."""
        # Define the expected return types from the smart contract call

        return_types = list[str]

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(list[str], rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryDeployAndInitializeContractFunction(ContractFunction):
    """ContractFunction for the deployAndInitialize method."""

    def __call__(self, deploymentId: bytes, deployerCoordinator: str, config: PoolDeployConfig, extraData: bytes, contribution: int, fixedAPR: int, timeStretchAPR: int, options: Options, salt: bytes) -> HyperdriveFactoryDeployAndInitializeContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(deploymentId),
            dataclass_to_tuple(deployerCoordinator),
            dataclass_to_tuple(config),
            dataclass_to_tuple(extraData),
            dataclass_to_tuple(contribution),
            dataclass_to_tuple(fixedAPR),
            dataclass_to_tuple(timeStretchAPR),
            dataclass_to_tuple(options),
            dataclass_to_tuple(salt),
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(str, rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryDeployTargetContractFunction(ContractFunction):
    """ContractFunction for the deployTarget method."""

    def __call__(self, deploymentId: bytes, deployerCoordinator: str, config: PoolDeployConfig, extraData: bytes, fixedAPR: int, timeStretchAPR: int, targetIndex: int, salt: bytes) -> HyperdriveFactoryDeployTargetContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(deploymentId),
            dataclass_to_tuple(deployerCoordinator),
            dataclass_to_tuple(config),
            dataclass_to_tuple(extraData),
            dataclass_to_tuple(fixedAPR),
            dataclass_to_tuple(timeStretchAPR),
            dataclass_to_tuple(targetIndex),
            dataclass_to_tuple(salt),
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(str, rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryDeployerCoordinatorManagerContractFunction(ContractFunction):
    """ContractFunction for the deployerCoordinatorManager method."""

    def __call__(self) -> HyperdriveFactoryDeployerCoordinatorManagerContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(str, rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryFeeCollectorContractFunction(ContractFunction):
    """ContractFunction for the feeCollector method."""

    def __call__(self) -> HyperdriveFactoryFeeCollectorContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(str, rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryGetDeployerCoordinatorAtIndexContractFunction(ContractFunction):
    """ContractFunction for the getDeployerCoordinatorAtIndex method."""

    def __call__(self, index: int) -> HyperdriveFactoryGetDeployerCoordinatorAtIndexContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(index))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(str, rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryGetDeployerCoordinatorByInstancesContractFunction(ContractFunction):
    """ContractFunction for the getDeployerCoordinatorByInstances method."""

    def __call__(self, instances: list[str]) -> HyperdriveFactoryGetDeployerCoordinatorByInstancesContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(instances))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[str]:
        """returns list[str]."""
        # Define the expected return types from the smart contract call

        return_types = list[str]

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(list[str], rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryGetDeployerCoordinatorsInRangeContractFunction(ContractFunction):
    """ContractFunction for the getDeployerCoordinatorsInRange method."""

    def __call__(self, startIndex: int, endIndex: int) -> HyperdriveFactoryGetDeployerCoordinatorsInRangeContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(startIndex), dataclass_to_tuple(endIndex))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[str]:
        """returns list[str]."""
        # Define the expected return types from the smart contract call

        return_types = list[str]

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(list[str], rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryGetInstanceAtIndexContractFunction(ContractFunction):
    """ContractFunction for the getInstanceAtIndex method."""

    def __call__(self, index: int) -> HyperdriveFactoryGetInstanceAtIndexContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(index))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(str, rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryGetInstancesInRangeContractFunction(ContractFunction):
    """ContractFunction for the getInstancesInRange method."""

    def __call__(self, startIndex: int, endIndex: int) -> HyperdriveFactoryGetInstancesInRangeContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(startIndex), dataclass_to_tuple(endIndex))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[str]:
        """returns list[str]."""
        # Define the expected return types from the smart contract call

        return_types = list[str]

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(list[str], rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryGetNumberOfDeployerCoordinatorsContractFunction(ContractFunction):
    """ContractFunction for the getNumberOfDeployerCoordinators method."""

    def __call__(self) -> HyperdriveFactoryGetNumberOfDeployerCoordinatorsContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(int, rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryGetNumberOfInstancesContractFunction(ContractFunction):
    """ContractFunction for the getNumberOfInstances method."""

    def __call__(self) -> HyperdriveFactoryGetNumberOfInstancesContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(int, rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryGovernanceContractFunction(ContractFunction):
    """ContractFunction for the governance method."""

    def __call__(self) -> HyperdriveFactoryGovernanceContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(str, rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryHyperdriveGovernanceContractFunction(ContractFunction):
    """ContractFunction for the hyperdriveGovernance method."""

    def __call__(self) -> HyperdriveFactoryHyperdriveGovernanceContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(str, rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryIsDeployerCoordinatorContractFunction(ContractFunction):
    """ContractFunction for the isDeployerCoordinator method."""

    def __call__(self, arg1: str) -> HyperdriveFactoryIsDeployerCoordinatorContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(arg1))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bool:
        """returns bool."""
        # Define the expected return types from the smart contract call

        return_types = bool

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(bool, rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryIsInstanceContractFunction(ContractFunction):
    """ContractFunction for the isInstance method."""

    def __call__(self, arg1: str) -> HyperdriveFactoryIsInstanceContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(arg1))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bool:
        """returns bool."""
        # Define the expected return types from the smart contract call

        return_types = bool

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(bool, rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryLinkerCodeHashContractFunction(ContractFunction):
    """ContractFunction for the linkerCodeHash method."""

    def __call__(self) -> HyperdriveFactoryLinkerCodeHashContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bytes:
        """returns bytes."""
        # Define the expected return types from the smart contract call

        return_types = bytes

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(bytes, rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryLinkerFactoryContractFunction(ContractFunction):
    """ContractFunction for the linkerFactory method."""

    def __call__(self) -> HyperdriveFactoryLinkerFactoryContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(str, rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryMaxCheckpointDurationContractFunction(ContractFunction):
    """ContractFunction for the maxCheckpointDuration method."""

    def __call__(self) -> HyperdriveFactoryMaxCheckpointDurationContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(int, rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryMaxCircuitBreakerDeltaContractFunction(ContractFunction):
    """ContractFunction for the maxCircuitBreakerDelta method."""

    def __call__(self) -> HyperdriveFactoryMaxCircuitBreakerDeltaContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(int, rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryMaxFeesContractFunction(ContractFunction):
    """ContractFunction for the maxFees method."""

    def __call__(self) -> HyperdriveFactoryMaxFeesContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> Fees:
        """returns Fees."""
        # Define the expected return types from the smart contract call

        return_types = Fees

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(Fees, rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryMaxFixedAPRContractFunction(ContractFunction):
    """ContractFunction for the maxFixedAPR method."""

    def __call__(self) -> HyperdriveFactoryMaxFixedAPRContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(int, rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryMaxPositionDurationContractFunction(ContractFunction):
    """ContractFunction for the maxPositionDuration method."""

    def __call__(self) -> HyperdriveFactoryMaxPositionDurationContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(int, rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryMaxTimeStretchAPRContractFunction(ContractFunction):
    """ContractFunction for the maxTimeStretchAPR method."""

    def __call__(self) -> HyperdriveFactoryMaxTimeStretchAPRContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(int, rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryMinCheckpointDurationContractFunction(ContractFunction):
    """ContractFunction for the minCheckpointDuration method."""

    def __call__(self) -> HyperdriveFactoryMinCheckpointDurationContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(int, rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryMinCircuitBreakerDeltaContractFunction(ContractFunction):
    """ContractFunction for the minCircuitBreakerDelta method."""

    def __call__(self) -> HyperdriveFactoryMinCircuitBreakerDeltaContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(int, rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryMinFeesContractFunction(ContractFunction):
    """ContractFunction for the minFees method."""

    def __call__(self) -> HyperdriveFactoryMinFeesContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> Fees:
        """returns Fees."""
        # Define the expected return types from the smart contract call

        return_types = Fees

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(Fees, rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryMinFixedAPRContractFunction(ContractFunction):
    """ContractFunction for the minFixedAPR method."""

    def __call__(self) -> HyperdriveFactoryMinFixedAPRContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(int, rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryMinPositionDurationContractFunction(ContractFunction):
    """ContractFunction for the minPositionDuration method."""

    def __call__(self) -> HyperdriveFactoryMinPositionDurationContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(int, rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryMinTimeStretchAPRContractFunction(ContractFunction):
    """ContractFunction for the minTimeStretchAPR method."""

    def __call__(self) -> HyperdriveFactoryMinTimeStretchAPRContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(int, rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryNameContractFunction(ContractFunction):
    """ContractFunction for the name method."""

    def __call__(self) -> HyperdriveFactoryNameContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(str, rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryRemoveDeployerCoordinatorContractFunction(ContractFunction):
    """ContractFunction for the removeDeployerCoordinator method."""

    def __call__(self, deployerCoordinator: str, index: int) -> HyperdriveFactoryRemoveDeployerCoordinatorContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(deployerCoordinator), dataclass_to_tuple(index))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class HyperdriveFactorySweepCollectorContractFunction(ContractFunction):
    """ContractFunction for the sweepCollector method."""

    def __call__(self) -> HyperdriveFactorySweepCollectorContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(str, rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryUpdateCheckpointDurationResolutionContractFunction(ContractFunction):
    """ContractFunction for the updateCheckpointDurationResolution method."""

    def __call__(self, checkpointDurationResolution: int) -> HyperdriveFactoryUpdateCheckpointDurationResolutionContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(checkpointDurationResolution))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class HyperdriveFactoryUpdateDefaultPausersContractFunction(ContractFunction):
    """ContractFunction for the updateDefaultPausers method."""

    def __call__(self, defaultPausers_: list[str]) -> HyperdriveFactoryUpdateDefaultPausersContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(defaultPausers_))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class HyperdriveFactoryUpdateDeployerCoordinatorManagerContractFunction(ContractFunction):
    """ContractFunction for the updateDeployerCoordinatorManager method."""

    def __call__(self, deployerCoordinatorManager: str) -> HyperdriveFactoryUpdateDeployerCoordinatorManagerContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(deployerCoordinatorManager))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class HyperdriveFactoryUpdateFeeCollectorContractFunction(ContractFunction):
    """ContractFunction for the updateFeeCollector method."""

    def __call__(self, feeCollector: str) -> HyperdriveFactoryUpdateFeeCollectorContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(feeCollector))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class HyperdriveFactoryUpdateGovernanceContractFunction(ContractFunction):
    """ContractFunction for the updateGovernance method."""

    def __call__(self, governance: str) -> HyperdriveFactoryUpdateGovernanceContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(governance))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class HyperdriveFactoryUpdateHyperdriveGovernanceContractFunction(ContractFunction):
    """ContractFunction for the updateHyperdriveGovernance method."""

    def __call__(self, hyperdriveGovernance: str) -> HyperdriveFactoryUpdateHyperdriveGovernanceContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(hyperdriveGovernance))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class HyperdriveFactoryUpdateLinkerCodeHashContractFunction(ContractFunction):
    """ContractFunction for the updateLinkerCodeHash method."""

    def __call__(self, linkerCodeHash: bytes) -> HyperdriveFactoryUpdateLinkerCodeHashContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(linkerCodeHash))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class HyperdriveFactoryUpdateLinkerFactoryContractFunction(ContractFunction):
    """ContractFunction for the updateLinkerFactory method."""

    def __call__(self, linkerFactory: str) -> HyperdriveFactoryUpdateLinkerFactoryContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(linkerFactory))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class HyperdriveFactoryUpdateMaxCheckpointDurationContractFunction(ContractFunction):
    """ContractFunction for the updateMaxCheckpointDuration method."""

    def __call__(self, maxCheckpointDuration: int) -> HyperdriveFactoryUpdateMaxCheckpointDurationContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(maxCheckpointDuration))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class HyperdriveFactoryUpdateMaxCircuitBreakerDeltaContractFunction(ContractFunction):
    """ContractFunction for the updateMaxCircuitBreakerDelta method."""

    def __call__(self, maxCircuitBreakerDelta: int) -> HyperdriveFactoryUpdateMaxCircuitBreakerDeltaContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(maxCircuitBreakerDelta))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class HyperdriveFactoryUpdateMaxFeesContractFunction(ContractFunction):
    """ContractFunction for the updateMaxFees method."""

    def __call__(self, maxFees: Fees) -> HyperdriveFactoryUpdateMaxFeesContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(maxFees))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class HyperdriveFactoryUpdateMaxFixedAPRContractFunction(ContractFunction):
    """ContractFunction for the updateMaxFixedAPR method."""

    def __call__(self, maxFixedAPR: int) -> HyperdriveFactoryUpdateMaxFixedAPRContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(maxFixedAPR))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class HyperdriveFactoryUpdateMaxPositionDurationContractFunction(ContractFunction):
    """ContractFunction for the updateMaxPositionDuration method."""

    def __call__(self, maxPositionDuration: int) -> HyperdriveFactoryUpdateMaxPositionDurationContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(maxPositionDuration))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class HyperdriveFactoryUpdateMaxTimeStretchAPRContractFunction(ContractFunction):
    """ContractFunction for the updateMaxTimeStretchAPR method."""

    def __call__(self, maxTimeStretchAPR: int) -> HyperdriveFactoryUpdateMaxTimeStretchAPRContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(maxTimeStretchAPR))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class HyperdriveFactoryUpdateMinCheckpointDurationContractFunction(ContractFunction):
    """ContractFunction for the updateMinCheckpointDuration method."""

    def __call__(self, minCheckpointDuration: int) -> HyperdriveFactoryUpdateMinCheckpointDurationContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(minCheckpointDuration))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class HyperdriveFactoryUpdateMinCircuitBreakerDeltaContractFunction(ContractFunction):
    """ContractFunction for the updateMinCircuitBreakerDelta method."""

    def __call__(self, minCircuitBreakerDelta: int) -> HyperdriveFactoryUpdateMinCircuitBreakerDeltaContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(minCircuitBreakerDelta))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class HyperdriveFactoryUpdateMinFeesContractFunction(ContractFunction):
    """ContractFunction for the updateMinFees method."""

    def __call__(self, minFees: Fees) -> HyperdriveFactoryUpdateMinFeesContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(minFees))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class HyperdriveFactoryUpdateMinFixedAPRContractFunction(ContractFunction):
    """ContractFunction for the updateMinFixedAPR method."""

    def __call__(self, minFixedAPR: int) -> HyperdriveFactoryUpdateMinFixedAPRContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(minFixedAPR))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class HyperdriveFactoryUpdateMinPositionDurationContractFunction(ContractFunction):
    """ContractFunction for the updateMinPositionDuration method."""

    def __call__(self, minPositionDuration: int) -> HyperdriveFactoryUpdateMinPositionDurationContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(minPositionDuration))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class HyperdriveFactoryUpdateMinTimeStretchAPRContractFunction(ContractFunction):
    """ContractFunction for the updateMinTimeStretchAPR method."""

    def __call__(self, minTimeStretchAPR: int) -> HyperdriveFactoryUpdateMinTimeStretchAPRContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(minTimeStretchAPR))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class HyperdriveFactoryUpdateSweepCollectorContractFunction(ContractFunction):
    """ContractFunction for the updateSweepCollector method."""

    def __call__(self, sweepCollector: str) -> HyperdriveFactoryUpdateSweepCollectorContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(sweepCollector))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class HyperdriveFactoryVersionContractFunction(ContractFunction):
    """ContractFunction for the version method."""

    def __call__(self) -> HyperdriveFactoryVersionContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(str, rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryContractFunctions(ContractFunctions):
    """ContractFunctions for the HyperdriveFactory contract."""

    _instancesToDeployerCoordinators: HyperdriveFactory_instancesToDeployerCoordinatorsContractFunction

    addDeployerCoordinator: HyperdriveFactoryAddDeployerCoordinatorContractFunction

    checkpointDurationResolution: HyperdriveFactoryCheckpointDurationResolutionContractFunction

    defaultPausers: HyperdriveFactoryDefaultPausersContractFunction

    deployAndInitialize: HyperdriveFactoryDeployAndInitializeContractFunction

    deployTarget: HyperdriveFactoryDeployTargetContractFunction

    deployerCoordinatorManager: HyperdriveFactoryDeployerCoordinatorManagerContractFunction

    feeCollector: HyperdriveFactoryFeeCollectorContractFunction

    getDeployerCoordinatorAtIndex: HyperdriveFactoryGetDeployerCoordinatorAtIndexContractFunction

    getDeployerCoordinatorByInstances: HyperdriveFactoryGetDeployerCoordinatorByInstancesContractFunction

    getDeployerCoordinatorsInRange: HyperdriveFactoryGetDeployerCoordinatorsInRangeContractFunction

    getInstanceAtIndex: HyperdriveFactoryGetInstanceAtIndexContractFunction

    getInstancesInRange: HyperdriveFactoryGetInstancesInRangeContractFunction

    getNumberOfDeployerCoordinators: HyperdriveFactoryGetNumberOfDeployerCoordinatorsContractFunction

    getNumberOfInstances: HyperdriveFactoryGetNumberOfInstancesContractFunction

    governance: HyperdriveFactoryGovernanceContractFunction

    hyperdriveGovernance: HyperdriveFactoryHyperdriveGovernanceContractFunction

    isDeployerCoordinator: HyperdriveFactoryIsDeployerCoordinatorContractFunction

    isInstance: HyperdriveFactoryIsInstanceContractFunction

    linkerCodeHash: HyperdriveFactoryLinkerCodeHashContractFunction

    linkerFactory: HyperdriveFactoryLinkerFactoryContractFunction

    maxCheckpointDuration: HyperdriveFactoryMaxCheckpointDurationContractFunction

    maxCircuitBreakerDelta: HyperdriveFactoryMaxCircuitBreakerDeltaContractFunction

    maxFees: HyperdriveFactoryMaxFeesContractFunction

    maxFixedAPR: HyperdriveFactoryMaxFixedAPRContractFunction

    maxPositionDuration: HyperdriveFactoryMaxPositionDurationContractFunction

    maxTimeStretchAPR: HyperdriveFactoryMaxTimeStretchAPRContractFunction

    minCheckpointDuration: HyperdriveFactoryMinCheckpointDurationContractFunction

    minCircuitBreakerDelta: HyperdriveFactoryMinCircuitBreakerDeltaContractFunction

    minFees: HyperdriveFactoryMinFeesContractFunction

    minFixedAPR: HyperdriveFactoryMinFixedAPRContractFunction

    minPositionDuration: HyperdriveFactoryMinPositionDurationContractFunction

    minTimeStretchAPR: HyperdriveFactoryMinTimeStretchAPRContractFunction

    name: HyperdriveFactoryNameContractFunction

    removeDeployerCoordinator: HyperdriveFactoryRemoveDeployerCoordinatorContractFunction

    sweepCollector: HyperdriveFactorySweepCollectorContractFunction

    updateCheckpointDurationResolution: HyperdriveFactoryUpdateCheckpointDurationResolutionContractFunction

    updateDefaultPausers: HyperdriveFactoryUpdateDefaultPausersContractFunction

    updateDeployerCoordinatorManager: HyperdriveFactoryUpdateDeployerCoordinatorManagerContractFunction

    updateFeeCollector: HyperdriveFactoryUpdateFeeCollectorContractFunction

    updateGovernance: HyperdriveFactoryUpdateGovernanceContractFunction

    updateHyperdriveGovernance: HyperdriveFactoryUpdateHyperdriveGovernanceContractFunction

    updateLinkerCodeHash: HyperdriveFactoryUpdateLinkerCodeHashContractFunction

    updateLinkerFactory: HyperdriveFactoryUpdateLinkerFactoryContractFunction

    updateMaxCheckpointDuration: HyperdriveFactoryUpdateMaxCheckpointDurationContractFunction

    updateMaxCircuitBreakerDelta: HyperdriveFactoryUpdateMaxCircuitBreakerDeltaContractFunction

    updateMaxFees: HyperdriveFactoryUpdateMaxFeesContractFunction

    updateMaxFixedAPR: HyperdriveFactoryUpdateMaxFixedAPRContractFunction

    updateMaxPositionDuration: HyperdriveFactoryUpdateMaxPositionDurationContractFunction

    updateMaxTimeStretchAPR: HyperdriveFactoryUpdateMaxTimeStretchAPRContractFunction

    updateMinCheckpointDuration: HyperdriveFactoryUpdateMinCheckpointDurationContractFunction

    updateMinCircuitBreakerDelta: HyperdriveFactoryUpdateMinCircuitBreakerDeltaContractFunction

    updateMinFees: HyperdriveFactoryUpdateMinFeesContractFunction

    updateMinFixedAPR: HyperdriveFactoryUpdateMinFixedAPRContractFunction

    updateMinPositionDuration: HyperdriveFactoryUpdateMinPositionDurationContractFunction

    updateMinTimeStretchAPR: HyperdriveFactoryUpdateMinTimeStretchAPRContractFunction

    updateSweepCollector: HyperdriveFactoryUpdateSweepCollectorContractFunction

    version: HyperdriveFactoryVersionContractFunction

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
        decode_tuples: bool | None = False,
    ) -> None:
        super().__init__(abi, w3, address, decode_tuples)
        self._instancesToDeployerCoordinators = (
            HyperdriveFactory_instancesToDeployerCoordinatorsContractFunction.factory(
                "_instancesToDeployerCoordinators",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                function_identifier="_instancesToDeployerCoordinators",
            )
        )
        self.addDeployerCoordinator = HyperdriveFactoryAddDeployerCoordinatorContractFunction.factory(
            "addDeployerCoordinator",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="addDeployerCoordinator",
        )
        self.checkpointDurationResolution = HyperdriveFactoryCheckpointDurationResolutionContractFunction.factory(
            "checkpointDurationResolution",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="checkpointDurationResolution",
        )
        self.defaultPausers = HyperdriveFactoryDefaultPausersContractFunction.factory(
            "defaultPausers",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="defaultPausers",
        )
        self.deployAndInitialize = HyperdriveFactoryDeployAndInitializeContractFunction.factory(
            "deployAndInitialize",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="deployAndInitialize",
        )
        self.deployTarget = HyperdriveFactoryDeployTargetContractFunction.factory(
            "deployTarget",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="deployTarget",
        )
        self.deployerCoordinatorManager = HyperdriveFactoryDeployerCoordinatorManagerContractFunction.factory(
            "deployerCoordinatorManager",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="deployerCoordinatorManager",
        )
        self.feeCollector = HyperdriveFactoryFeeCollectorContractFunction.factory(
            "feeCollector",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="feeCollector",
        )
        self.getDeployerCoordinatorAtIndex = HyperdriveFactoryGetDeployerCoordinatorAtIndexContractFunction.factory(
            "getDeployerCoordinatorAtIndex",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="getDeployerCoordinatorAtIndex",
        )
        self.getDeployerCoordinatorByInstances = (
            HyperdriveFactoryGetDeployerCoordinatorByInstancesContractFunction.factory(
                "getDeployerCoordinatorByInstances",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                function_identifier="getDeployerCoordinatorByInstances",
            )
        )
        self.getDeployerCoordinatorsInRange = HyperdriveFactoryGetDeployerCoordinatorsInRangeContractFunction.factory(
            "getDeployerCoordinatorsInRange",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="getDeployerCoordinatorsInRange",
        )
        self.getInstanceAtIndex = HyperdriveFactoryGetInstanceAtIndexContractFunction.factory(
            "getInstanceAtIndex",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="getInstanceAtIndex",
        )
        self.getInstancesInRange = HyperdriveFactoryGetInstancesInRangeContractFunction.factory(
            "getInstancesInRange",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="getInstancesInRange",
        )
        self.getNumberOfDeployerCoordinators = HyperdriveFactoryGetNumberOfDeployerCoordinatorsContractFunction.factory(
            "getNumberOfDeployerCoordinators",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="getNumberOfDeployerCoordinators",
        )
        self.getNumberOfInstances = HyperdriveFactoryGetNumberOfInstancesContractFunction.factory(
            "getNumberOfInstances",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="getNumberOfInstances",
        )
        self.governance = HyperdriveFactoryGovernanceContractFunction.factory(
            "governance",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="governance",
        )
        self.hyperdriveGovernance = HyperdriveFactoryHyperdriveGovernanceContractFunction.factory(
            "hyperdriveGovernance",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="hyperdriveGovernance",
        )
        self.isDeployerCoordinator = HyperdriveFactoryIsDeployerCoordinatorContractFunction.factory(
            "isDeployerCoordinator",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="isDeployerCoordinator",
        )
        self.isInstance = HyperdriveFactoryIsInstanceContractFunction.factory(
            "isInstance",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="isInstance",
        )
        self.linkerCodeHash = HyperdriveFactoryLinkerCodeHashContractFunction.factory(
            "linkerCodeHash",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="linkerCodeHash",
        )
        self.linkerFactory = HyperdriveFactoryLinkerFactoryContractFunction.factory(
            "linkerFactory",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="linkerFactory",
        )
        self.maxCheckpointDuration = HyperdriveFactoryMaxCheckpointDurationContractFunction.factory(
            "maxCheckpointDuration",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="maxCheckpointDuration",
        )
        self.maxCircuitBreakerDelta = HyperdriveFactoryMaxCircuitBreakerDeltaContractFunction.factory(
            "maxCircuitBreakerDelta",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="maxCircuitBreakerDelta",
        )
        self.maxFees = HyperdriveFactoryMaxFeesContractFunction.factory(
            "maxFees",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="maxFees",
        )
        self.maxFixedAPR = HyperdriveFactoryMaxFixedAPRContractFunction.factory(
            "maxFixedAPR",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="maxFixedAPR",
        )
        self.maxPositionDuration = HyperdriveFactoryMaxPositionDurationContractFunction.factory(
            "maxPositionDuration",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="maxPositionDuration",
        )
        self.maxTimeStretchAPR = HyperdriveFactoryMaxTimeStretchAPRContractFunction.factory(
            "maxTimeStretchAPR",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="maxTimeStretchAPR",
        )
        self.minCheckpointDuration = HyperdriveFactoryMinCheckpointDurationContractFunction.factory(
            "minCheckpointDuration",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="minCheckpointDuration",
        )
        self.minCircuitBreakerDelta = HyperdriveFactoryMinCircuitBreakerDeltaContractFunction.factory(
            "minCircuitBreakerDelta",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="minCircuitBreakerDelta",
        )
        self.minFees = HyperdriveFactoryMinFeesContractFunction.factory(
            "minFees",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="minFees",
        )
        self.minFixedAPR = HyperdriveFactoryMinFixedAPRContractFunction.factory(
            "minFixedAPR",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="minFixedAPR",
        )
        self.minPositionDuration = HyperdriveFactoryMinPositionDurationContractFunction.factory(
            "minPositionDuration",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="minPositionDuration",
        )
        self.minTimeStretchAPR = HyperdriveFactoryMinTimeStretchAPRContractFunction.factory(
            "minTimeStretchAPR",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="minTimeStretchAPR",
        )
        self.name = HyperdriveFactoryNameContractFunction.factory(
            "name",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="name",
        )
        self.removeDeployerCoordinator = HyperdriveFactoryRemoveDeployerCoordinatorContractFunction.factory(
            "removeDeployerCoordinator",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="removeDeployerCoordinator",
        )
        self.sweepCollector = HyperdriveFactorySweepCollectorContractFunction.factory(
            "sweepCollector",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="sweepCollector",
        )
        self.updateCheckpointDurationResolution = (
            HyperdriveFactoryUpdateCheckpointDurationResolutionContractFunction.factory(
                "updateCheckpointDurationResolution",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                function_identifier="updateCheckpointDurationResolution",
            )
        )
        self.updateDefaultPausers = HyperdriveFactoryUpdateDefaultPausersContractFunction.factory(
            "updateDefaultPausers",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="updateDefaultPausers",
        )
        self.updateDeployerCoordinatorManager = (
            HyperdriveFactoryUpdateDeployerCoordinatorManagerContractFunction.factory(
                "updateDeployerCoordinatorManager",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                function_identifier="updateDeployerCoordinatorManager",
            )
        )
        self.updateFeeCollector = HyperdriveFactoryUpdateFeeCollectorContractFunction.factory(
            "updateFeeCollector",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="updateFeeCollector",
        )
        self.updateGovernance = HyperdriveFactoryUpdateGovernanceContractFunction.factory(
            "updateGovernance",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="updateGovernance",
        )
        self.updateHyperdriveGovernance = HyperdriveFactoryUpdateHyperdriveGovernanceContractFunction.factory(
            "updateHyperdriveGovernance",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="updateHyperdriveGovernance",
        )
        self.updateLinkerCodeHash = HyperdriveFactoryUpdateLinkerCodeHashContractFunction.factory(
            "updateLinkerCodeHash",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="updateLinkerCodeHash",
        )
        self.updateLinkerFactory = HyperdriveFactoryUpdateLinkerFactoryContractFunction.factory(
            "updateLinkerFactory",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="updateLinkerFactory",
        )
        self.updateMaxCheckpointDuration = HyperdriveFactoryUpdateMaxCheckpointDurationContractFunction.factory(
            "updateMaxCheckpointDuration",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="updateMaxCheckpointDuration",
        )
        self.updateMaxCircuitBreakerDelta = HyperdriveFactoryUpdateMaxCircuitBreakerDeltaContractFunction.factory(
            "updateMaxCircuitBreakerDelta",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="updateMaxCircuitBreakerDelta",
        )
        self.updateMaxFees = HyperdriveFactoryUpdateMaxFeesContractFunction.factory(
            "updateMaxFees",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="updateMaxFees",
        )
        self.updateMaxFixedAPR = HyperdriveFactoryUpdateMaxFixedAPRContractFunction.factory(
            "updateMaxFixedAPR",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="updateMaxFixedAPR",
        )
        self.updateMaxPositionDuration = HyperdriveFactoryUpdateMaxPositionDurationContractFunction.factory(
            "updateMaxPositionDuration",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="updateMaxPositionDuration",
        )
        self.updateMaxTimeStretchAPR = HyperdriveFactoryUpdateMaxTimeStretchAPRContractFunction.factory(
            "updateMaxTimeStretchAPR",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="updateMaxTimeStretchAPR",
        )
        self.updateMinCheckpointDuration = HyperdriveFactoryUpdateMinCheckpointDurationContractFunction.factory(
            "updateMinCheckpointDuration",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="updateMinCheckpointDuration",
        )
        self.updateMinCircuitBreakerDelta = HyperdriveFactoryUpdateMinCircuitBreakerDeltaContractFunction.factory(
            "updateMinCircuitBreakerDelta",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="updateMinCircuitBreakerDelta",
        )
        self.updateMinFees = HyperdriveFactoryUpdateMinFeesContractFunction.factory(
            "updateMinFees",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="updateMinFees",
        )
        self.updateMinFixedAPR = HyperdriveFactoryUpdateMinFixedAPRContractFunction.factory(
            "updateMinFixedAPR",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="updateMinFixedAPR",
        )
        self.updateMinPositionDuration = HyperdriveFactoryUpdateMinPositionDurationContractFunction.factory(
            "updateMinPositionDuration",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="updateMinPositionDuration",
        )
        self.updateMinTimeStretchAPR = HyperdriveFactoryUpdateMinTimeStretchAPRContractFunction.factory(
            "updateMinTimeStretchAPR",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="updateMinTimeStretchAPR",
        )
        self.updateSweepCollector = HyperdriveFactoryUpdateSweepCollectorContractFunction.factory(
            "updateSweepCollector",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="updateSweepCollector",
        )
        self.version = HyperdriveFactoryVersionContractFunction.factory(
            "version",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="version",
        )


class HyperdriveFactoryCheckpointDurationResolutionUpdatedContractEvent(ContractEvent):
    """ContractEvent for CheckpointDurationResolutionUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "HyperdriveFactoryCheckpointDurationResolutionUpdatedContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["HyperdriveFactoryCheckpointDurationResolutionUpdatedContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "HyperdriveFactoryCheckpointDurationResolutionUpdatedContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["HyperdriveFactoryCheckpointDurationResolutionUpdatedContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class HyperdriveFactoryDefaultPausersUpdatedContractEvent(ContractEvent):
    """ContractEvent for DefaultPausersUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "HyperdriveFactoryDefaultPausersUpdatedContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["HyperdriveFactoryDefaultPausersUpdatedContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "HyperdriveFactoryDefaultPausersUpdatedContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["HyperdriveFactoryDefaultPausersUpdatedContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class HyperdriveFactoryDeployedContractEvent(ContractEvent):
    """ContractEvent for Deployed."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "HyperdriveFactoryDeployedContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["HyperdriveFactoryDeployedContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "HyperdriveFactoryDeployedContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["HyperdriveFactoryDeployedContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class HyperdriveFactoryDeployerCoordinatorAddedContractEvent(ContractEvent):
    """ContractEvent for DeployerCoordinatorAdded."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "HyperdriveFactoryDeployerCoordinatorAddedContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["HyperdriveFactoryDeployerCoordinatorAddedContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "HyperdriveFactoryDeployerCoordinatorAddedContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["HyperdriveFactoryDeployerCoordinatorAddedContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class HyperdriveFactoryDeployerCoordinatorManagerUpdatedContractEvent(ContractEvent):
    """ContractEvent for DeployerCoordinatorManagerUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "HyperdriveFactoryDeployerCoordinatorManagerUpdatedContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["HyperdriveFactoryDeployerCoordinatorManagerUpdatedContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "HyperdriveFactoryDeployerCoordinatorManagerUpdatedContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["HyperdriveFactoryDeployerCoordinatorManagerUpdatedContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class HyperdriveFactoryDeployerCoordinatorRemovedContractEvent(ContractEvent):
    """ContractEvent for DeployerCoordinatorRemoved."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "HyperdriveFactoryDeployerCoordinatorRemovedContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["HyperdriveFactoryDeployerCoordinatorRemovedContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "HyperdriveFactoryDeployerCoordinatorRemovedContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["HyperdriveFactoryDeployerCoordinatorRemovedContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class HyperdriveFactoryFeeCollectorUpdatedContractEvent(ContractEvent):
    """ContractEvent for FeeCollectorUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "HyperdriveFactoryFeeCollectorUpdatedContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["HyperdriveFactoryFeeCollectorUpdatedContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "HyperdriveFactoryFeeCollectorUpdatedContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["HyperdriveFactoryFeeCollectorUpdatedContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class HyperdriveFactoryGovernanceUpdatedContractEvent(ContractEvent):
    """ContractEvent for GovernanceUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "HyperdriveFactoryGovernanceUpdatedContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["HyperdriveFactoryGovernanceUpdatedContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "HyperdriveFactoryGovernanceUpdatedContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["HyperdriveFactoryGovernanceUpdatedContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class HyperdriveFactoryHyperdriveGovernanceUpdatedContractEvent(ContractEvent):
    """ContractEvent for HyperdriveGovernanceUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "HyperdriveFactoryHyperdriveGovernanceUpdatedContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["HyperdriveFactoryHyperdriveGovernanceUpdatedContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "HyperdriveFactoryHyperdriveGovernanceUpdatedContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["HyperdriveFactoryHyperdriveGovernanceUpdatedContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class HyperdriveFactoryLinkerCodeHashUpdatedContractEvent(ContractEvent):
    """ContractEvent for LinkerCodeHashUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "HyperdriveFactoryLinkerCodeHashUpdatedContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["HyperdriveFactoryLinkerCodeHashUpdatedContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "HyperdriveFactoryLinkerCodeHashUpdatedContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["HyperdriveFactoryLinkerCodeHashUpdatedContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class HyperdriveFactoryLinkerFactoryUpdatedContractEvent(ContractEvent):
    """ContractEvent for LinkerFactoryUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "HyperdriveFactoryLinkerFactoryUpdatedContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["HyperdriveFactoryLinkerFactoryUpdatedContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "HyperdriveFactoryLinkerFactoryUpdatedContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["HyperdriveFactoryLinkerFactoryUpdatedContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class HyperdriveFactoryMaxCheckpointDurationUpdatedContractEvent(ContractEvent):
    """ContractEvent for MaxCheckpointDurationUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "HyperdriveFactoryMaxCheckpointDurationUpdatedContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["HyperdriveFactoryMaxCheckpointDurationUpdatedContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "HyperdriveFactoryMaxCheckpointDurationUpdatedContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["HyperdriveFactoryMaxCheckpointDurationUpdatedContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class HyperdriveFactoryMaxCircuitBreakerDeltaUpdatedContractEvent(ContractEvent):
    """ContractEvent for MaxCircuitBreakerDeltaUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "HyperdriveFactoryMaxCircuitBreakerDeltaUpdatedContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["HyperdriveFactoryMaxCircuitBreakerDeltaUpdatedContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "HyperdriveFactoryMaxCircuitBreakerDeltaUpdatedContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["HyperdriveFactoryMaxCircuitBreakerDeltaUpdatedContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class HyperdriveFactoryMaxFeesUpdatedContractEvent(ContractEvent):
    """ContractEvent for MaxFeesUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "HyperdriveFactoryMaxFeesUpdatedContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["HyperdriveFactoryMaxFeesUpdatedContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "HyperdriveFactoryMaxFeesUpdatedContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["HyperdriveFactoryMaxFeesUpdatedContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class HyperdriveFactoryMaxFixedAPRUpdatedContractEvent(ContractEvent):
    """ContractEvent for MaxFixedAPRUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "HyperdriveFactoryMaxFixedAPRUpdatedContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["HyperdriveFactoryMaxFixedAPRUpdatedContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "HyperdriveFactoryMaxFixedAPRUpdatedContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["HyperdriveFactoryMaxFixedAPRUpdatedContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class HyperdriveFactoryMaxPositionDurationUpdatedContractEvent(ContractEvent):
    """ContractEvent for MaxPositionDurationUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "HyperdriveFactoryMaxPositionDurationUpdatedContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["HyperdriveFactoryMaxPositionDurationUpdatedContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "HyperdriveFactoryMaxPositionDurationUpdatedContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["HyperdriveFactoryMaxPositionDurationUpdatedContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class HyperdriveFactoryMaxTimeStretchAPRUpdatedContractEvent(ContractEvent):
    """ContractEvent for MaxTimeStretchAPRUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "HyperdriveFactoryMaxTimeStretchAPRUpdatedContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["HyperdriveFactoryMaxTimeStretchAPRUpdatedContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "HyperdriveFactoryMaxTimeStretchAPRUpdatedContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["HyperdriveFactoryMaxTimeStretchAPRUpdatedContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class HyperdriveFactoryMinCheckpointDurationUpdatedContractEvent(ContractEvent):
    """ContractEvent for MinCheckpointDurationUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "HyperdriveFactoryMinCheckpointDurationUpdatedContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["HyperdriveFactoryMinCheckpointDurationUpdatedContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "HyperdriveFactoryMinCheckpointDurationUpdatedContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["HyperdriveFactoryMinCheckpointDurationUpdatedContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class HyperdriveFactoryMinCircuitBreakerDeltaUpdatedContractEvent(ContractEvent):
    """ContractEvent for MinCircuitBreakerDeltaUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "HyperdriveFactoryMinCircuitBreakerDeltaUpdatedContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["HyperdriveFactoryMinCircuitBreakerDeltaUpdatedContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "HyperdriveFactoryMinCircuitBreakerDeltaUpdatedContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["HyperdriveFactoryMinCircuitBreakerDeltaUpdatedContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class HyperdriveFactoryMinFeesUpdatedContractEvent(ContractEvent):
    """ContractEvent for MinFeesUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "HyperdriveFactoryMinFeesUpdatedContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["HyperdriveFactoryMinFeesUpdatedContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "HyperdriveFactoryMinFeesUpdatedContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["HyperdriveFactoryMinFeesUpdatedContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class HyperdriveFactoryMinFixedAPRUpdatedContractEvent(ContractEvent):
    """ContractEvent for MinFixedAPRUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "HyperdriveFactoryMinFixedAPRUpdatedContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["HyperdriveFactoryMinFixedAPRUpdatedContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "HyperdriveFactoryMinFixedAPRUpdatedContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["HyperdriveFactoryMinFixedAPRUpdatedContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class HyperdriveFactoryMinPositionDurationUpdatedContractEvent(ContractEvent):
    """ContractEvent for MinPositionDurationUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "HyperdriveFactoryMinPositionDurationUpdatedContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["HyperdriveFactoryMinPositionDurationUpdatedContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "HyperdriveFactoryMinPositionDurationUpdatedContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["HyperdriveFactoryMinPositionDurationUpdatedContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class HyperdriveFactoryMinTimeStretchAPRUpdatedContractEvent(ContractEvent):
    """ContractEvent for MinTimeStretchAPRUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "HyperdriveFactoryMinTimeStretchAPRUpdatedContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["HyperdriveFactoryMinTimeStretchAPRUpdatedContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "HyperdriveFactoryMinTimeStretchAPRUpdatedContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["HyperdriveFactoryMinTimeStretchAPRUpdatedContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class HyperdriveFactorySweepCollectorUpdatedContractEvent(ContractEvent):
    """ContractEvent for SweepCollectorUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "HyperdriveFactorySweepCollectorUpdatedContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["HyperdriveFactorySweepCollectorUpdatedContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "HyperdriveFactorySweepCollectorUpdatedContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["HyperdriveFactorySweepCollectorUpdatedContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class HyperdriveFactoryContractEvents(ContractEvents):
    """ContractEvents for the HyperdriveFactory contract."""

    CheckpointDurationResolutionUpdated: HyperdriveFactoryCheckpointDurationResolutionUpdatedContractEvent

    DefaultPausersUpdated: HyperdriveFactoryDefaultPausersUpdatedContractEvent

    Deployed: HyperdriveFactoryDeployedContractEvent

    DeployerCoordinatorAdded: HyperdriveFactoryDeployerCoordinatorAddedContractEvent

    DeployerCoordinatorManagerUpdated: HyperdriveFactoryDeployerCoordinatorManagerUpdatedContractEvent

    DeployerCoordinatorRemoved: HyperdriveFactoryDeployerCoordinatorRemovedContractEvent

    FeeCollectorUpdated: HyperdriveFactoryFeeCollectorUpdatedContractEvent

    GovernanceUpdated: HyperdriveFactoryGovernanceUpdatedContractEvent

    HyperdriveGovernanceUpdated: HyperdriveFactoryHyperdriveGovernanceUpdatedContractEvent

    LinkerCodeHashUpdated: HyperdriveFactoryLinkerCodeHashUpdatedContractEvent

    LinkerFactoryUpdated: HyperdriveFactoryLinkerFactoryUpdatedContractEvent

    MaxCheckpointDurationUpdated: HyperdriveFactoryMaxCheckpointDurationUpdatedContractEvent

    MaxCircuitBreakerDeltaUpdated: HyperdriveFactoryMaxCircuitBreakerDeltaUpdatedContractEvent

    MaxFeesUpdated: HyperdriveFactoryMaxFeesUpdatedContractEvent

    MaxFixedAPRUpdated: HyperdriveFactoryMaxFixedAPRUpdatedContractEvent

    MaxPositionDurationUpdated: HyperdriveFactoryMaxPositionDurationUpdatedContractEvent

    MaxTimeStretchAPRUpdated: HyperdriveFactoryMaxTimeStretchAPRUpdatedContractEvent

    MinCheckpointDurationUpdated: HyperdriveFactoryMinCheckpointDurationUpdatedContractEvent

    MinCircuitBreakerDeltaUpdated: HyperdriveFactoryMinCircuitBreakerDeltaUpdatedContractEvent

    MinFeesUpdated: HyperdriveFactoryMinFeesUpdatedContractEvent

    MinFixedAPRUpdated: HyperdriveFactoryMinFixedAPRUpdatedContractEvent

    MinPositionDurationUpdated: HyperdriveFactoryMinPositionDurationUpdatedContractEvent

    MinTimeStretchAPRUpdated: HyperdriveFactoryMinTimeStretchAPRUpdatedContractEvent

    SweepCollectorUpdated: HyperdriveFactorySweepCollectorUpdatedContractEvent

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
    ) -> None:
        super().__init__(abi, w3, address)
        self.CheckpointDurationResolutionUpdated = cast(
            HyperdriveFactoryCheckpointDurationResolutionUpdatedContractEvent,
            HyperdriveFactoryCheckpointDurationResolutionUpdatedContractEvent.factory(
                "CheckpointDurationResolutionUpdated",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="CheckpointDurationResolutionUpdated",
            ),
        )
        self.DefaultPausersUpdated = cast(
            HyperdriveFactoryDefaultPausersUpdatedContractEvent,
            HyperdriveFactoryDefaultPausersUpdatedContractEvent.factory(
                "DefaultPausersUpdated", w3=w3, contract_abi=abi, address=address, event_name="DefaultPausersUpdated"
            ),
        )
        self.Deployed = cast(
            HyperdriveFactoryDeployedContractEvent,
            HyperdriveFactoryDeployedContractEvent.factory(
                "Deployed", w3=w3, contract_abi=abi, address=address, event_name="Deployed"
            ),
        )
        self.DeployerCoordinatorAdded = cast(
            HyperdriveFactoryDeployerCoordinatorAddedContractEvent,
            HyperdriveFactoryDeployerCoordinatorAddedContractEvent.factory(
                "DeployerCoordinatorAdded",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="DeployerCoordinatorAdded",
            ),
        )
        self.DeployerCoordinatorManagerUpdated = cast(
            HyperdriveFactoryDeployerCoordinatorManagerUpdatedContractEvent,
            HyperdriveFactoryDeployerCoordinatorManagerUpdatedContractEvent.factory(
                "DeployerCoordinatorManagerUpdated",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="DeployerCoordinatorManagerUpdated",
            ),
        )
        self.DeployerCoordinatorRemoved = cast(
            HyperdriveFactoryDeployerCoordinatorRemovedContractEvent,
            HyperdriveFactoryDeployerCoordinatorRemovedContractEvent.factory(
                "DeployerCoordinatorRemoved",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="DeployerCoordinatorRemoved",
            ),
        )
        self.FeeCollectorUpdated = cast(
            HyperdriveFactoryFeeCollectorUpdatedContractEvent,
            HyperdriveFactoryFeeCollectorUpdatedContractEvent.factory(
                "FeeCollectorUpdated", w3=w3, contract_abi=abi, address=address, event_name="FeeCollectorUpdated"
            ),
        )
        self.GovernanceUpdated = cast(
            HyperdriveFactoryGovernanceUpdatedContractEvent,
            HyperdriveFactoryGovernanceUpdatedContractEvent.factory(
                "GovernanceUpdated", w3=w3, contract_abi=abi, address=address, event_name="GovernanceUpdated"
            ),
        )
        self.HyperdriveGovernanceUpdated = cast(
            HyperdriveFactoryHyperdriveGovernanceUpdatedContractEvent,
            HyperdriveFactoryHyperdriveGovernanceUpdatedContractEvent.factory(
                "HyperdriveGovernanceUpdated",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="HyperdriveGovernanceUpdated",
            ),
        )
        self.LinkerCodeHashUpdated = cast(
            HyperdriveFactoryLinkerCodeHashUpdatedContractEvent,
            HyperdriveFactoryLinkerCodeHashUpdatedContractEvent.factory(
                "LinkerCodeHashUpdated", w3=w3, contract_abi=abi, address=address, event_name="LinkerCodeHashUpdated"
            ),
        )
        self.LinkerFactoryUpdated = cast(
            HyperdriveFactoryLinkerFactoryUpdatedContractEvent,
            HyperdriveFactoryLinkerFactoryUpdatedContractEvent.factory(
                "LinkerFactoryUpdated", w3=w3, contract_abi=abi, address=address, event_name="LinkerFactoryUpdated"
            ),
        )
        self.MaxCheckpointDurationUpdated = cast(
            HyperdriveFactoryMaxCheckpointDurationUpdatedContractEvent,
            HyperdriveFactoryMaxCheckpointDurationUpdatedContractEvent.factory(
                "MaxCheckpointDurationUpdated",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="MaxCheckpointDurationUpdated",
            ),
        )
        self.MaxCircuitBreakerDeltaUpdated = cast(
            HyperdriveFactoryMaxCircuitBreakerDeltaUpdatedContractEvent,
            HyperdriveFactoryMaxCircuitBreakerDeltaUpdatedContractEvent.factory(
                "MaxCircuitBreakerDeltaUpdated",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="MaxCircuitBreakerDeltaUpdated",
            ),
        )
        self.MaxFeesUpdated = cast(
            HyperdriveFactoryMaxFeesUpdatedContractEvent,
            HyperdriveFactoryMaxFeesUpdatedContractEvent.factory(
                "MaxFeesUpdated", w3=w3, contract_abi=abi, address=address, event_name="MaxFeesUpdated"
            ),
        )
        self.MaxFixedAPRUpdated = cast(
            HyperdriveFactoryMaxFixedAPRUpdatedContractEvent,
            HyperdriveFactoryMaxFixedAPRUpdatedContractEvent.factory(
                "MaxFixedAPRUpdated", w3=w3, contract_abi=abi, address=address, event_name="MaxFixedAPRUpdated"
            ),
        )
        self.MaxPositionDurationUpdated = cast(
            HyperdriveFactoryMaxPositionDurationUpdatedContractEvent,
            HyperdriveFactoryMaxPositionDurationUpdatedContractEvent.factory(
                "MaxPositionDurationUpdated",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="MaxPositionDurationUpdated",
            ),
        )
        self.MaxTimeStretchAPRUpdated = cast(
            HyperdriveFactoryMaxTimeStretchAPRUpdatedContractEvent,
            HyperdriveFactoryMaxTimeStretchAPRUpdatedContractEvent.factory(
                "MaxTimeStretchAPRUpdated",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="MaxTimeStretchAPRUpdated",
            ),
        )
        self.MinCheckpointDurationUpdated = cast(
            HyperdriveFactoryMinCheckpointDurationUpdatedContractEvent,
            HyperdriveFactoryMinCheckpointDurationUpdatedContractEvent.factory(
                "MinCheckpointDurationUpdated",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="MinCheckpointDurationUpdated",
            ),
        )
        self.MinCircuitBreakerDeltaUpdated = cast(
            HyperdriveFactoryMinCircuitBreakerDeltaUpdatedContractEvent,
            HyperdriveFactoryMinCircuitBreakerDeltaUpdatedContractEvent.factory(
                "MinCircuitBreakerDeltaUpdated",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="MinCircuitBreakerDeltaUpdated",
            ),
        )
        self.MinFeesUpdated = cast(
            HyperdriveFactoryMinFeesUpdatedContractEvent,
            HyperdriveFactoryMinFeesUpdatedContractEvent.factory(
                "MinFeesUpdated", w3=w3, contract_abi=abi, address=address, event_name="MinFeesUpdated"
            ),
        )
        self.MinFixedAPRUpdated = cast(
            HyperdriveFactoryMinFixedAPRUpdatedContractEvent,
            HyperdriveFactoryMinFixedAPRUpdatedContractEvent.factory(
                "MinFixedAPRUpdated", w3=w3, contract_abi=abi, address=address, event_name="MinFixedAPRUpdated"
            ),
        )
        self.MinPositionDurationUpdated = cast(
            HyperdriveFactoryMinPositionDurationUpdatedContractEvent,
            HyperdriveFactoryMinPositionDurationUpdatedContractEvent.factory(
                "MinPositionDurationUpdated",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="MinPositionDurationUpdated",
            ),
        )
        self.MinTimeStretchAPRUpdated = cast(
            HyperdriveFactoryMinTimeStretchAPRUpdatedContractEvent,
            HyperdriveFactoryMinTimeStretchAPRUpdatedContractEvent.factory(
                "MinTimeStretchAPRUpdated",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="MinTimeStretchAPRUpdated",
            ),
        )
        self.SweepCollectorUpdated = cast(
            HyperdriveFactorySweepCollectorUpdatedContractEvent,
            HyperdriveFactorySweepCollectorUpdatedContractEvent.factory(
                "SweepCollectorUpdated", w3=w3, contract_abi=abi, address=address, event_name="SweepCollectorUpdated"
            ),
        )


class HyperdriveFactoryDeployerCoordinatorAlreadyAddedContractError:
    """ContractError for DeployerCoordinatorAlreadyAdded."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveFactoryDeployerCoordinatorAlreadyAddedContractError",
    ) -> None:
        self.selector = "0xbd34634f"
        self.signature = "DeployerCoordinatorAlreadyAdded()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveFactoryDeployerCoordinatorAlreadyAddedContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "DeployerCoordinatorAlreadyAdded" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveFactoryDeployerCoordinatorAlreadyAddedContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "DeployerCoordinatorAlreadyAdded" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveFactoryDeployerCoordinatorIndexMismatchContractError:
    """ContractError for DeployerCoordinatorIndexMismatch."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveFactoryDeployerCoordinatorIndexMismatchContractError",
    ) -> None:
        self.selector = "0x3c9c032c"
        self.signature = "DeployerCoordinatorIndexMismatch()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveFactoryDeployerCoordinatorIndexMismatchContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "DeployerCoordinatorIndexMismatch" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveFactoryDeployerCoordinatorIndexMismatchContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "DeployerCoordinatorIndexMismatch" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveFactoryDeployerCoordinatorNotAddedContractError:
    """ContractError for DeployerCoordinatorNotAdded."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveFactoryDeployerCoordinatorNotAddedContractError",
    ) -> None:
        self.selector = "0x4bf121ab"
        self.signature = "DeployerCoordinatorNotAdded()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveFactoryDeployerCoordinatorNotAddedContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "DeployerCoordinatorNotAdded" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveFactoryDeployerCoordinatorNotAddedContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "DeployerCoordinatorNotAdded" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveFactoryEndIndexTooLargeContractError:
    """ContractError for EndIndexTooLarge."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveFactoryEndIndexTooLargeContractError",
    ) -> None:
        self.selector = "0xe0f7becb"
        self.signature = "EndIndexTooLarge()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveFactoryEndIndexTooLargeContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "EndIndexTooLarge" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveFactoryEndIndexTooLargeContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "EndIndexTooLarge" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveFactoryInvalidCheckpointDurationContractError:
    """ContractError for InvalidCheckpointDuration."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveFactoryInvalidCheckpointDurationContractError",
    ) -> None:
        self.selector = "0x5428734d"
        self.signature = "InvalidCheckpointDuration()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveFactoryInvalidCheckpointDurationContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidCheckpointDuration" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveFactoryInvalidCheckpointDurationContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidCheckpointDuration" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveFactoryInvalidCheckpointDurationResolutionContractError:
    """ContractError for InvalidCheckpointDurationResolution."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveFactoryInvalidCheckpointDurationResolutionContractError",
    ) -> None:
        self.selector = "0x8dbae0a8"
        self.signature = "InvalidCheckpointDurationResolution()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveFactoryInvalidCheckpointDurationResolutionContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidCheckpointDurationResolution" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveFactoryInvalidCheckpointDurationResolutionContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidCheckpointDurationResolution" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveFactoryInvalidCircuitBreakerDeltaContractError:
    """ContractError for InvalidCircuitBreakerDelta."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveFactoryInvalidCircuitBreakerDeltaContractError",
    ) -> None:
        self.selector = "0xef9bc65f"
        self.signature = "InvalidCircuitBreakerDelta()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveFactoryInvalidCircuitBreakerDeltaContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidCircuitBreakerDelta" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveFactoryInvalidCircuitBreakerDeltaContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidCircuitBreakerDelta" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveFactoryInvalidDeployConfigContractError:
    """ContractError for InvalidDeployConfig."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveFactoryInvalidDeployConfigContractError",
    ) -> None:
        self.selector = "0xe8c02dd7"
        self.signature = "InvalidDeployConfig()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveFactoryInvalidDeployConfigContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidDeployConfig" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveFactoryInvalidDeployConfigContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidDeployConfig" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveFactoryInvalidDeployerCoordinatorContractError:
    """ContractError for InvalidDeployerCoordinator."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveFactoryInvalidDeployerCoordinatorContractError",
    ) -> None:
        self.selector = "0x6e623f0f"
        self.signature = "InvalidDeployerCoordinator()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveFactoryInvalidDeployerCoordinatorContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidDeployerCoordinator" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveFactoryInvalidDeployerCoordinatorContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidDeployerCoordinator" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveFactoryInvalidFeesContractError:
    """ContractError for InvalidFees."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveFactoryInvalidFeesContractError",
    ) -> None:
        self.selector = "0x2d8768f9"
        self.signature = "InvalidFees()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveFactoryInvalidFeesContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidFees" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveFactoryInvalidFeesContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidFees" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveFactoryInvalidFixedAPRContractError:
    """ContractError for InvalidFixedAPR."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveFactoryInvalidFixedAPRContractError",
    ) -> None:
        self.selector = "0x30554de1"
        self.signature = "InvalidFixedAPR()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveFactoryInvalidFixedAPRContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidFixedAPR" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveFactoryInvalidFixedAPRContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidFixedAPR" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveFactoryInvalidIndexesContractError:
    """ContractError for InvalidIndexes."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveFactoryInvalidIndexesContractError",
    ) -> None:
        self.selector = "0x764e6b56"
        self.signature = "InvalidIndexes()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveFactoryInvalidIndexesContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidIndexes" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveFactoryInvalidIndexesContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidIndexes" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveFactoryInvalidMaxCheckpointDurationContractError:
    """ContractError for InvalidMaxCheckpointDuration."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveFactoryInvalidMaxCheckpointDurationContractError",
    ) -> None:
        self.selector = "0xf9c0959d"
        self.signature = "InvalidMaxCheckpointDuration()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveFactoryInvalidMaxCheckpointDurationContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidMaxCheckpointDuration" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveFactoryInvalidMaxCheckpointDurationContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidMaxCheckpointDuration" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveFactoryInvalidMaxCircuitBreakerDeltaContractError:
    """ContractError for InvalidMaxCircuitBreakerDelta."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveFactoryInvalidMaxCircuitBreakerDeltaContractError",
    ) -> None:
        self.selector = "0xfdb80c26"
        self.signature = "InvalidMaxCircuitBreakerDelta()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveFactoryInvalidMaxCircuitBreakerDeltaContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidMaxCircuitBreakerDelta" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveFactoryInvalidMaxCircuitBreakerDeltaContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidMaxCircuitBreakerDelta" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveFactoryInvalidMaxFeesContractError:
    """ContractError for InvalidMaxFees."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveFactoryInvalidMaxFeesContractError",
    ) -> None:
        self.selector = "0x2c20e3f6"
        self.signature = "InvalidMaxFees()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveFactoryInvalidMaxFeesContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidMaxFees" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveFactoryInvalidMaxFeesContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidMaxFees" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveFactoryInvalidMaxFixedAPRContractError:
    """ContractError for InvalidMaxFixedAPR."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveFactoryInvalidMaxFixedAPRContractError",
    ) -> None:
        self.selector = "0x673edec0"
        self.signature = "InvalidMaxFixedAPR()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveFactoryInvalidMaxFixedAPRContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidMaxFixedAPR" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveFactoryInvalidMaxFixedAPRContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidMaxFixedAPR" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveFactoryInvalidMaxPositionDurationContractError:
    """ContractError for InvalidMaxPositionDuration."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveFactoryInvalidMaxPositionDurationContractError",
    ) -> None:
        self.selector = "0xcfb699cb"
        self.signature = "InvalidMaxPositionDuration()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveFactoryInvalidMaxPositionDurationContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidMaxPositionDuration" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveFactoryInvalidMaxPositionDurationContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidMaxPositionDuration" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveFactoryInvalidMaxTimeStretchAPRContractError:
    """ContractError for InvalidMaxTimeStretchAPR."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveFactoryInvalidMaxTimeStretchAPRContractError",
    ) -> None:
        self.selector = "0xa35539d0"
        self.signature = "InvalidMaxTimeStretchAPR()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveFactoryInvalidMaxTimeStretchAPRContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidMaxTimeStretchAPR" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveFactoryInvalidMaxTimeStretchAPRContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidMaxTimeStretchAPR" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveFactoryInvalidMinCheckpointDurationContractError:
    """ContractError for InvalidMinCheckpointDuration."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveFactoryInvalidMinCheckpointDurationContractError",
    ) -> None:
        self.selector = "0x0433acc6"
        self.signature = "InvalidMinCheckpointDuration()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveFactoryInvalidMinCheckpointDurationContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidMinCheckpointDuration" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveFactoryInvalidMinCheckpointDurationContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidMinCheckpointDuration" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveFactoryInvalidMinCircuitBreakerDeltaContractError:
    """ContractError for InvalidMinCircuitBreakerDelta."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveFactoryInvalidMinCircuitBreakerDeltaContractError",
    ) -> None:
        self.selector = "0x28a2d9a9"
        self.signature = "InvalidMinCircuitBreakerDelta()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveFactoryInvalidMinCircuitBreakerDeltaContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidMinCircuitBreakerDelta" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveFactoryInvalidMinCircuitBreakerDeltaContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidMinCircuitBreakerDelta" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveFactoryInvalidMinFeesContractError:
    """ContractError for InvalidMinFees."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveFactoryInvalidMinFeesContractError",
    ) -> None:
        self.selector = "0x15b05a8f"
        self.signature = "InvalidMinFees()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveFactoryInvalidMinFeesContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidMinFees" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveFactoryInvalidMinFeesContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidMinFees" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveFactoryInvalidMinFixedAPRContractError:
    """ContractError for InvalidMinFixedAPR."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveFactoryInvalidMinFixedAPRContractError",
    ) -> None:
        self.selector = "0x1670f797"
        self.signature = "InvalidMinFixedAPR()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveFactoryInvalidMinFixedAPRContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidMinFixedAPR" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveFactoryInvalidMinFixedAPRContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidMinFixedAPR" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveFactoryInvalidMinPositionDurationContractError:
    """ContractError for InvalidMinPositionDuration."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveFactoryInvalidMinPositionDurationContractError",
    ) -> None:
        self.selector = "0x600f5a02"
        self.signature = "InvalidMinPositionDuration()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveFactoryInvalidMinPositionDurationContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidMinPositionDuration" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveFactoryInvalidMinPositionDurationContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidMinPositionDuration" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveFactoryInvalidMinTimeStretchAPRContractError:
    """ContractError for InvalidMinTimeStretchAPR."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveFactoryInvalidMinTimeStretchAPRContractError",
    ) -> None:
        self.selector = "0x5a8f6557"
        self.signature = "InvalidMinTimeStretchAPR()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveFactoryInvalidMinTimeStretchAPRContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidMinTimeStretchAPR" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveFactoryInvalidMinTimeStretchAPRContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidMinTimeStretchAPR" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveFactoryInvalidPositionDurationContractError:
    """ContractError for InvalidPositionDuration."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveFactoryInvalidPositionDurationContractError",
    ) -> None:
        self.selector = "0x4a7fff9e"
        self.signature = "InvalidPositionDuration()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveFactoryInvalidPositionDurationContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidPositionDuration" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveFactoryInvalidPositionDurationContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidPositionDuration" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveFactoryInvalidTimeStretchAPRContractError:
    """ContractError for InvalidTimeStretchAPR."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveFactoryInvalidTimeStretchAPRContractError",
    ) -> None:
        self.selector = "0x83ebdfb7"
        self.signature = "InvalidTimeStretchAPR()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveFactoryInvalidTimeStretchAPRContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidTimeStretchAPR" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveFactoryInvalidTimeStretchAPRContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidTimeStretchAPR" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveFactoryLnInvalidInputContractError:
    """ContractError for LnInvalidInput."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveFactoryLnInvalidInputContractError",
    ) -> None:
        self.selector = "0xe61b4975"
        self.signature = "LnInvalidInput()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveFactoryLnInvalidInputContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "LnInvalidInput" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveFactoryLnInvalidInputContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "LnInvalidInput" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveFactoryReceiveLockedContractError:
    """ContractError for ReceiveLocked."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveFactoryReceiveLockedContractError",
    ) -> None:
        self.selector = "0x5563ada8"
        self.signature = "ReceiveLocked()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveFactoryReceiveLockedContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "ReceiveLocked" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveFactoryReceiveLockedContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "ReceiveLocked" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveFactoryTransferFailedContractError:
    """ContractError for TransferFailed."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveFactoryTransferFailedContractError",
    ) -> None:
        self.selector = "0x90b8ec18"
        self.signature = "TransferFailed()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveFactoryTransferFailedContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "TransferFailed" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveFactoryTransferFailedContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "TransferFailed" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveFactoryUnauthorizedContractError:
    """ContractError for Unauthorized."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveFactoryUnauthorizedContractError",
    ) -> None:
        self.selector = "0x82b42900"
        self.signature = "Unauthorized()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveFactoryUnauthorizedContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "Unauthorized" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveFactoryUnauthorizedContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "Unauthorized" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveFactoryUnsafeCastToInt256ContractError:
    """ContractError for UnsafeCastToInt256."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveFactoryUnsafeCastToInt256ContractError",
    ) -> None:
        self.selector = "0x72dd4e02"
        self.signature = "UnsafeCastToInt256()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveFactoryUnsafeCastToInt256ContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "UnsafeCastToInt256" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveFactoryUnsafeCastToInt256ContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "UnsafeCastToInt256" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveFactoryContractErrors:
    """ContractErrors for the HyperdriveFactory contract."""

    DeployerCoordinatorAlreadyAdded: HyperdriveFactoryDeployerCoordinatorAlreadyAddedContractError

    DeployerCoordinatorIndexMismatch: HyperdriveFactoryDeployerCoordinatorIndexMismatchContractError

    DeployerCoordinatorNotAdded: HyperdriveFactoryDeployerCoordinatorNotAddedContractError

    EndIndexTooLarge: HyperdriveFactoryEndIndexTooLargeContractError

    InvalidCheckpointDuration: HyperdriveFactoryInvalidCheckpointDurationContractError

    InvalidCheckpointDurationResolution: HyperdriveFactoryInvalidCheckpointDurationResolutionContractError

    InvalidCircuitBreakerDelta: HyperdriveFactoryInvalidCircuitBreakerDeltaContractError

    InvalidDeployConfig: HyperdriveFactoryInvalidDeployConfigContractError

    InvalidDeployerCoordinator: HyperdriveFactoryInvalidDeployerCoordinatorContractError

    InvalidFees: HyperdriveFactoryInvalidFeesContractError

    InvalidFixedAPR: HyperdriveFactoryInvalidFixedAPRContractError

    InvalidIndexes: HyperdriveFactoryInvalidIndexesContractError

    InvalidMaxCheckpointDuration: HyperdriveFactoryInvalidMaxCheckpointDurationContractError

    InvalidMaxCircuitBreakerDelta: HyperdriveFactoryInvalidMaxCircuitBreakerDeltaContractError

    InvalidMaxFees: HyperdriveFactoryInvalidMaxFeesContractError

    InvalidMaxFixedAPR: HyperdriveFactoryInvalidMaxFixedAPRContractError

    InvalidMaxPositionDuration: HyperdriveFactoryInvalidMaxPositionDurationContractError

    InvalidMaxTimeStretchAPR: HyperdriveFactoryInvalidMaxTimeStretchAPRContractError

    InvalidMinCheckpointDuration: HyperdriveFactoryInvalidMinCheckpointDurationContractError

    InvalidMinCircuitBreakerDelta: HyperdriveFactoryInvalidMinCircuitBreakerDeltaContractError

    InvalidMinFees: HyperdriveFactoryInvalidMinFeesContractError

    InvalidMinFixedAPR: HyperdriveFactoryInvalidMinFixedAPRContractError

    InvalidMinPositionDuration: HyperdriveFactoryInvalidMinPositionDurationContractError

    InvalidMinTimeStretchAPR: HyperdriveFactoryInvalidMinTimeStretchAPRContractError

    InvalidPositionDuration: HyperdriveFactoryInvalidPositionDurationContractError

    InvalidTimeStretchAPR: HyperdriveFactoryInvalidTimeStretchAPRContractError

    LnInvalidInput: HyperdriveFactoryLnInvalidInputContractError

    ReceiveLocked: HyperdriveFactoryReceiveLockedContractError

    TransferFailed: HyperdriveFactoryTransferFailedContractError

    Unauthorized: HyperdriveFactoryUnauthorizedContractError

    UnsafeCastToInt256: HyperdriveFactoryUnsafeCastToInt256ContractError

    def __init__(
        self,
    ) -> None:
        self.DeployerCoordinatorAlreadyAdded = HyperdriveFactoryDeployerCoordinatorAlreadyAddedContractError()
        self.DeployerCoordinatorIndexMismatch = HyperdriveFactoryDeployerCoordinatorIndexMismatchContractError()
        self.DeployerCoordinatorNotAdded = HyperdriveFactoryDeployerCoordinatorNotAddedContractError()
        self.EndIndexTooLarge = HyperdriveFactoryEndIndexTooLargeContractError()
        self.InvalidCheckpointDuration = HyperdriveFactoryInvalidCheckpointDurationContractError()
        self.InvalidCheckpointDurationResolution = HyperdriveFactoryInvalidCheckpointDurationResolutionContractError()
        self.InvalidCircuitBreakerDelta = HyperdriveFactoryInvalidCircuitBreakerDeltaContractError()
        self.InvalidDeployConfig = HyperdriveFactoryInvalidDeployConfigContractError()
        self.InvalidDeployerCoordinator = HyperdriveFactoryInvalidDeployerCoordinatorContractError()
        self.InvalidFees = HyperdriveFactoryInvalidFeesContractError()
        self.InvalidFixedAPR = HyperdriveFactoryInvalidFixedAPRContractError()
        self.InvalidIndexes = HyperdriveFactoryInvalidIndexesContractError()
        self.InvalidMaxCheckpointDuration = HyperdriveFactoryInvalidMaxCheckpointDurationContractError()
        self.InvalidMaxCircuitBreakerDelta = HyperdriveFactoryInvalidMaxCircuitBreakerDeltaContractError()
        self.InvalidMaxFees = HyperdriveFactoryInvalidMaxFeesContractError()
        self.InvalidMaxFixedAPR = HyperdriveFactoryInvalidMaxFixedAPRContractError()
        self.InvalidMaxPositionDuration = HyperdriveFactoryInvalidMaxPositionDurationContractError()
        self.InvalidMaxTimeStretchAPR = HyperdriveFactoryInvalidMaxTimeStretchAPRContractError()
        self.InvalidMinCheckpointDuration = HyperdriveFactoryInvalidMinCheckpointDurationContractError()
        self.InvalidMinCircuitBreakerDelta = HyperdriveFactoryInvalidMinCircuitBreakerDeltaContractError()
        self.InvalidMinFees = HyperdriveFactoryInvalidMinFeesContractError()
        self.InvalidMinFixedAPR = HyperdriveFactoryInvalidMinFixedAPRContractError()
        self.InvalidMinPositionDuration = HyperdriveFactoryInvalidMinPositionDurationContractError()
        self.InvalidMinTimeStretchAPR = HyperdriveFactoryInvalidMinTimeStretchAPRContractError()
        self.InvalidPositionDuration = HyperdriveFactoryInvalidPositionDurationContractError()
        self.InvalidTimeStretchAPR = HyperdriveFactoryInvalidTimeStretchAPRContractError()
        self.LnInvalidInput = HyperdriveFactoryLnInvalidInputContractError()
        self.ReceiveLocked = HyperdriveFactoryReceiveLockedContractError()
        self.TransferFailed = HyperdriveFactoryTransferFailedContractError()
        self.Unauthorized = HyperdriveFactoryUnauthorizedContractError()
        self.UnsafeCastToInt256 = HyperdriveFactoryUnsafeCastToInt256ContractError()

        self._all = [
            self.DeployerCoordinatorAlreadyAdded,
            self.DeployerCoordinatorIndexMismatch,
            self.DeployerCoordinatorNotAdded,
            self.EndIndexTooLarge,
            self.InvalidCheckpointDuration,
            self.InvalidCheckpointDurationResolution,
            self.InvalidCircuitBreakerDelta,
            self.InvalidDeployConfig,
            self.InvalidDeployerCoordinator,
            self.InvalidFees,
            self.InvalidFixedAPR,
            self.InvalidIndexes,
            self.InvalidMaxCheckpointDuration,
            self.InvalidMaxCircuitBreakerDelta,
            self.InvalidMaxFees,
            self.InvalidMaxFixedAPR,
            self.InvalidMaxPositionDuration,
            self.InvalidMaxTimeStretchAPR,
            self.InvalidMinCheckpointDuration,
            self.InvalidMinCircuitBreakerDelta,
            self.InvalidMinFees,
            self.InvalidMinFixedAPR,
            self.InvalidMinPositionDuration,
            self.InvalidMinTimeStretchAPR,
            self.InvalidPositionDuration,
            self.InvalidTimeStretchAPR,
            self.LnInvalidInput,
            self.ReceiveLocked,
            self.TransferFailed,
            self.Unauthorized,
            self.UnsafeCastToInt256,
        ]

    def decode_custom_error(self, data: str) -> tuple[Any, ...]:
        """Decodes a custom contract error."""
        selector = data[:10]
        for err in self._all:
            if err.selector == selector:
                return err.decode_error_data(HexBytes(data[10:]))

        raise ValueError(f"HyperdriveFactory does not have a selector matching {selector}")


hyperdrivefactory_abi: ABI = cast(
    ABI,
    [
        {
            "type": "constructor",
            "inputs": [
                {
                    "name": "_factoryConfig",
                    "type": "tuple",
                    "internalType": "struct HyperdriveFactory.FactoryConfig",
                    "components": [
                        {"name": "governance", "type": "address", "internalType": "address"},
                        {"name": "deployerCoordinatorManager", "type": "address", "internalType": "address"},
                        {"name": "hyperdriveGovernance", "type": "address", "internalType": "address"},
                        {"name": "defaultPausers", "type": "address[]", "internalType": "address[]"},
                        {"name": "feeCollector", "type": "address", "internalType": "address"},
                        {"name": "sweepCollector", "type": "address", "internalType": "address"},
                        {"name": "checkpointDurationResolution", "type": "uint256", "internalType": "uint256"},
                        {"name": "minCheckpointDuration", "type": "uint256", "internalType": "uint256"},
                        {"name": "maxCheckpointDuration", "type": "uint256", "internalType": "uint256"},
                        {"name": "minPositionDuration", "type": "uint256", "internalType": "uint256"},
                        {"name": "maxPositionDuration", "type": "uint256", "internalType": "uint256"},
                        {"name": "minCircuitBreakerDelta", "type": "uint256", "internalType": "uint256"},
                        {"name": "maxCircuitBreakerDelta", "type": "uint256", "internalType": "uint256"},
                        {"name": "minFixedAPR", "type": "uint256", "internalType": "uint256"},
                        {"name": "maxFixedAPR", "type": "uint256", "internalType": "uint256"},
                        {"name": "minTimeStretchAPR", "type": "uint256", "internalType": "uint256"},
                        {"name": "maxTimeStretchAPR", "type": "uint256", "internalType": "uint256"},
                        {
                            "name": "minFees",
                            "type": "tuple",
                            "internalType": "struct IHyperdrive.Fees",
                            "components": [
                                {"name": "curve", "type": "uint256", "internalType": "uint256"},
                                {"name": "flat", "type": "uint256", "internalType": "uint256"},
                                {"name": "governanceLP", "type": "uint256", "internalType": "uint256"},
                                {"name": "governanceZombie", "type": "uint256", "internalType": "uint256"},
                            ],
                        },
                        {
                            "name": "maxFees",
                            "type": "tuple",
                            "internalType": "struct IHyperdrive.Fees",
                            "components": [
                                {"name": "curve", "type": "uint256", "internalType": "uint256"},
                                {"name": "flat", "type": "uint256", "internalType": "uint256"},
                                {"name": "governanceLP", "type": "uint256", "internalType": "uint256"},
                                {"name": "governanceZombie", "type": "uint256", "internalType": "uint256"},
                            ],
                        },
                        {"name": "linkerFactory", "type": "address", "internalType": "address"},
                        {"name": "linkerCodeHash", "type": "bytes32", "internalType": "bytes32"},
                    ],
                },
                {"name": "_name", "type": "string", "internalType": "string"},
            ],
            "stateMutability": "nonpayable",
        },
        {"type": "receive", "stateMutability": "payable"},
        {
            "type": "function",
            "name": "_instancesToDeployerCoordinators",
            "inputs": [{"name": "instance", "type": "address", "internalType": "address"}],
            "outputs": [{"name": "deployCoordinator", "type": "address", "internalType": "address"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "addDeployerCoordinator",
            "inputs": [{"name": "_deployerCoordinator", "type": "address", "internalType": "address"}],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "checkpointDurationResolution",
            "inputs": [],
            "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "defaultPausers",
            "inputs": [],
            "outputs": [{"name": "", "type": "address[]", "internalType": "address[]"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "deployAndInitialize",
            "inputs": [
                {"name": "_deploymentId", "type": "bytes32", "internalType": "bytes32"},
                {"name": "_deployerCoordinator", "type": "address", "internalType": "address"},
                {
                    "name": "_config",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.PoolDeployConfig",
                    "components": [
                        {"name": "baseToken", "type": "address", "internalType": "contract IERC20"},
                        {"name": "vaultSharesToken", "type": "address", "internalType": "contract IERC20"},
                        {"name": "linkerFactory", "type": "address", "internalType": "address"},
                        {"name": "linkerCodeHash", "type": "bytes32", "internalType": "bytes32"},
                        {"name": "minimumShareReserves", "type": "uint256", "internalType": "uint256"},
                        {"name": "minimumTransactionAmount", "type": "uint256", "internalType": "uint256"},
                        {"name": "circuitBreakerDelta", "type": "uint256", "internalType": "uint256"},
                        {"name": "positionDuration", "type": "uint256", "internalType": "uint256"},
                        {"name": "checkpointDuration", "type": "uint256", "internalType": "uint256"},
                        {"name": "timeStretch", "type": "uint256", "internalType": "uint256"},
                        {"name": "governance", "type": "address", "internalType": "address"},
                        {"name": "feeCollector", "type": "address", "internalType": "address"},
                        {"name": "sweepCollector", "type": "address", "internalType": "address"},
                        {
                            "name": "fees",
                            "type": "tuple",
                            "internalType": "struct IHyperdrive.Fees",
                            "components": [
                                {"name": "curve", "type": "uint256", "internalType": "uint256"},
                                {"name": "flat", "type": "uint256", "internalType": "uint256"},
                                {"name": "governanceLP", "type": "uint256", "internalType": "uint256"},
                                {"name": "governanceZombie", "type": "uint256", "internalType": "uint256"},
                            ],
                        },
                    ],
                },
                {"name": "_extraData", "type": "bytes", "internalType": "bytes"},
                {"name": "_contribution", "type": "uint256", "internalType": "uint256"},
                {"name": "_fixedAPR", "type": "uint256", "internalType": "uint256"},
                {"name": "_timeStretchAPR", "type": "uint256", "internalType": "uint256"},
                {
                    "name": "_options",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.Options",
                    "components": [
                        {"name": "destination", "type": "address", "internalType": "address"},
                        {"name": "asBase", "type": "bool", "internalType": "bool"},
                        {"name": "extraData", "type": "bytes", "internalType": "bytes"},
                    ],
                },
                {"name": "_salt", "type": "bytes32", "internalType": "bytes32"},
            ],
            "outputs": [{"name": "", "type": "address", "internalType": "contract IHyperdrive"}],
            "stateMutability": "payable",
        },
        {
            "type": "function",
            "name": "deployTarget",
            "inputs": [
                {"name": "_deploymentId", "type": "bytes32", "internalType": "bytes32"},
                {"name": "_deployerCoordinator", "type": "address", "internalType": "address"},
                {
                    "name": "_config",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.PoolDeployConfig",
                    "components": [
                        {"name": "baseToken", "type": "address", "internalType": "contract IERC20"},
                        {"name": "vaultSharesToken", "type": "address", "internalType": "contract IERC20"},
                        {"name": "linkerFactory", "type": "address", "internalType": "address"},
                        {"name": "linkerCodeHash", "type": "bytes32", "internalType": "bytes32"},
                        {"name": "minimumShareReserves", "type": "uint256", "internalType": "uint256"},
                        {"name": "minimumTransactionAmount", "type": "uint256", "internalType": "uint256"},
                        {"name": "circuitBreakerDelta", "type": "uint256", "internalType": "uint256"},
                        {"name": "positionDuration", "type": "uint256", "internalType": "uint256"},
                        {"name": "checkpointDuration", "type": "uint256", "internalType": "uint256"},
                        {"name": "timeStretch", "type": "uint256", "internalType": "uint256"},
                        {"name": "governance", "type": "address", "internalType": "address"},
                        {"name": "feeCollector", "type": "address", "internalType": "address"},
                        {"name": "sweepCollector", "type": "address", "internalType": "address"},
                        {
                            "name": "fees",
                            "type": "tuple",
                            "internalType": "struct IHyperdrive.Fees",
                            "components": [
                                {"name": "curve", "type": "uint256", "internalType": "uint256"},
                                {"name": "flat", "type": "uint256", "internalType": "uint256"},
                                {"name": "governanceLP", "type": "uint256", "internalType": "uint256"},
                                {"name": "governanceZombie", "type": "uint256", "internalType": "uint256"},
                            ],
                        },
                    ],
                },
                {"name": "_extraData", "type": "bytes", "internalType": "bytes"},
                {"name": "_fixedAPR", "type": "uint256", "internalType": "uint256"},
                {"name": "_timeStretchAPR", "type": "uint256", "internalType": "uint256"},
                {"name": "_targetIndex", "type": "uint256", "internalType": "uint256"},
                {"name": "_salt", "type": "bytes32", "internalType": "bytes32"},
            ],
            "outputs": [{"name": "", "type": "address", "internalType": "address"}],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "deployerCoordinatorManager",
            "inputs": [],
            "outputs": [{"name": "", "type": "address", "internalType": "address"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "feeCollector",
            "inputs": [],
            "outputs": [{"name": "", "type": "address", "internalType": "address"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getDeployerCoordinatorAtIndex",
            "inputs": [{"name": "_index", "type": "uint256", "internalType": "uint256"}],
            "outputs": [{"name": "", "type": "address", "internalType": "address"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getDeployerCoordinatorByInstances",
            "inputs": [{"name": "__instances", "type": "address[]", "internalType": "address[]"}],
            "outputs": [{"name": "coordinators", "type": "address[]", "internalType": "address[]"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getDeployerCoordinatorsInRange",
            "inputs": [
                {"name": "_startIndex", "type": "uint256", "internalType": "uint256"},
                {"name": "_endIndex", "type": "uint256", "internalType": "uint256"},
            ],
            "outputs": [{"name": "range", "type": "address[]", "internalType": "address[]"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getInstanceAtIndex",
            "inputs": [{"name": "_index", "type": "uint256", "internalType": "uint256"}],
            "outputs": [{"name": "", "type": "address", "internalType": "address"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getInstancesInRange",
            "inputs": [
                {"name": "_startIndex", "type": "uint256", "internalType": "uint256"},
                {"name": "_endIndex", "type": "uint256", "internalType": "uint256"},
            ],
            "outputs": [{"name": "range", "type": "address[]", "internalType": "address[]"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getNumberOfDeployerCoordinators",
            "inputs": [],
            "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getNumberOfInstances",
            "inputs": [],
            "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "governance",
            "inputs": [],
            "outputs": [{"name": "", "type": "address", "internalType": "address"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "hyperdriveGovernance",
            "inputs": [],
            "outputs": [{"name": "", "type": "address", "internalType": "address"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "isDeployerCoordinator",
            "inputs": [{"name": "", "type": "address", "internalType": "address"}],
            "outputs": [{"name": "", "type": "bool", "internalType": "bool"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "isInstance",
            "inputs": [{"name": "", "type": "address", "internalType": "address"}],
            "outputs": [{"name": "", "type": "bool", "internalType": "bool"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "linkerCodeHash",
            "inputs": [],
            "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "linkerFactory",
            "inputs": [],
            "outputs": [{"name": "", "type": "address", "internalType": "address"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "maxCheckpointDuration",
            "inputs": [],
            "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "maxCircuitBreakerDelta",
            "inputs": [],
            "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "maxFees",
            "inputs": [],
            "outputs": [
                {
                    "name": "",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.Fees",
                    "components": [
                        {"name": "curve", "type": "uint256", "internalType": "uint256"},
                        {"name": "flat", "type": "uint256", "internalType": "uint256"},
                        {"name": "governanceLP", "type": "uint256", "internalType": "uint256"},
                        {"name": "governanceZombie", "type": "uint256", "internalType": "uint256"},
                    ],
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "maxFixedAPR",
            "inputs": [],
            "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "maxPositionDuration",
            "inputs": [],
            "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "maxTimeStretchAPR",
            "inputs": [],
            "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "minCheckpointDuration",
            "inputs": [],
            "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "minCircuitBreakerDelta",
            "inputs": [],
            "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "minFees",
            "inputs": [],
            "outputs": [
                {
                    "name": "",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.Fees",
                    "components": [
                        {"name": "curve", "type": "uint256", "internalType": "uint256"},
                        {"name": "flat", "type": "uint256", "internalType": "uint256"},
                        {"name": "governanceLP", "type": "uint256", "internalType": "uint256"},
                        {"name": "governanceZombie", "type": "uint256", "internalType": "uint256"},
                    ],
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "minFixedAPR",
            "inputs": [],
            "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "minPositionDuration",
            "inputs": [],
            "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "minTimeStretchAPR",
            "inputs": [],
            "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "name",
            "inputs": [],
            "outputs": [{"name": "", "type": "string", "internalType": "string"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "removeDeployerCoordinator",
            "inputs": [
                {"name": "_deployerCoordinator", "type": "address", "internalType": "address"},
                {"name": "_index", "type": "uint256", "internalType": "uint256"},
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "sweepCollector",
            "inputs": [],
            "outputs": [{"name": "", "type": "address", "internalType": "address"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "updateCheckpointDurationResolution",
            "inputs": [{"name": "_checkpointDurationResolution", "type": "uint256", "internalType": "uint256"}],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "updateDefaultPausers",
            "inputs": [{"name": "_defaultPausers_", "type": "address[]", "internalType": "address[]"}],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "updateDeployerCoordinatorManager",
            "inputs": [{"name": "_deployerCoordinatorManager", "type": "address", "internalType": "address"}],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "updateFeeCollector",
            "inputs": [{"name": "_feeCollector", "type": "address", "internalType": "address"}],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "updateGovernance",
            "inputs": [{"name": "_governance", "type": "address", "internalType": "address"}],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "updateHyperdriveGovernance",
            "inputs": [{"name": "_hyperdriveGovernance", "type": "address", "internalType": "address"}],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "updateLinkerCodeHash",
            "inputs": [{"name": "_linkerCodeHash", "type": "bytes32", "internalType": "bytes32"}],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "updateLinkerFactory",
            "inputs": [{"name": "_linkerFactory", "type": "address", "internalType": "address"}],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "updateMaxCheckpointDuration",
            "inputs": [{"name": "_maxCheckpointDuration", "type": "uint256", "internalType": "uint256"}],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "updateMaxCircuitBreakerDelta",
            "inputs": [{"name": "_maxCircuitBreakerDelta", "type": "uint256", "internalType": "uint256"}],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "updateMaxFees",
            "inputs": [
                {
                    "name": "__maxFees",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.Fees",
                    "components": [
                        {"name": "curve", "type": "uint256", "internalType": "uint256"},
                        {"name": "flat", "type": "uint256", "internalType": "uint256"},
                        {"name": "governanceLP", "type": "uint256", "internalType": "uint256"},
                        {"name": "governanceZombie", "type": "uint256", "internalType": "uint256"},
                    ],
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "updateMaxFixedAPR",
            "inputs": [{"name": "_maxFixedAPR", "type": "uint256", "internalType": "uint256"}],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "updateMaxPositionDuration",
            "inputs": [{"name": "_maxPositionDuration", "type": "uint256", "internalType": "uint256"}],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "updateMaxTimeStretchAPR",
            "inputs": [{"name": "_maxTimeStretchAPR", "type": "uint256", "internalType": "uint256"}],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "updateMinCheckpointDuration",
            "inputs": [{"name": "_minCheckpointDuration", "type": "uint256", "internalType": "uint256"}],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "updateMinCircuitBreakerDelta",
            "inputs": [{"name": "_minCircuitBreakerDelta", "type": "uint256", "internalType": "uint256"}],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "updateMinFees",
            "inputs": [
                {
                    "name": "__minFees",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.Fees",
                    "components": [
                        {"name": "curve", "type": "uint256", "internalType": "uint256"},
                        {"name": "flat", "type": "uint256", "internalType": "uint256"},
                        {"name": "governanceLP", "type": "uint256", "internalType": "uint256"},
                        {"name": "governanceZombie", "type": "uint256", "internalType": "uint256"},
                    ],
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "updateMinFixedAPR",
            "inputs": [{"name": "_minFixedAPR", "type": "uint256", "internalType": "uint256"}],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "updateMinPositionDuration",
            "inputs": [{"name": "_minPositionDuration", "type": "uint256", "internalType": "uint256"}],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "updateMinTimeStretchAPR",
            "inputs": [{"name": "_minTimeStretchAPR", "type": "uint256", "internalType": "uint256"}],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "updateSweepCollector",
            "inputs": [{"name": "_sweepCollector", "type": "address", "internalType": "address"}],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "version",
            "inputs": [],
            "outputs": [{"name": "", "type": "string", "internalType": "string"}],
            "stateMutability": "view",
        },
        {
            "type": "event",
            "name": "CheckpointDurationResolutionUpdated",
            "inputs": [
                {
                    "name": "newCheckpointDurationResolution",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "DefaultPausersUpdated",
            "inputs": [
                {"name": "newDefaultPausers", "type": "address[]", "indexed": False, "internalType": "address[]"}
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "Deployed",
            "inputs": [
                {"name": "deployerCoordinator", "type": "address", "indexed": True, "internalType": "address"},
                {"name": "hyperdrive", "type": "address", "indexed": False, "internalType": "address"},
                {
                    "name": "config",
                    "type": "tuple",
                    "indexed": False,
                    "internalType": "struct IHyperdrive.PoolDeployConfig",
                    "components": [
                        {"name": "baseToken", "type": "address", "internalType": "contract IERC20"},
                        {"name": "vaultSharesToken", "type": "address", "internalType": "contract IERC20"},
                        {"name": "linkerFactory", "type": "address", "internalType": "address"},
                        {"name": "linkerCodeHash", "type": "bytes32", "internalType": "bytes32"},
                        {"name": "minimumShareReserves", "type": "uint256", "internalType": "uint256"},
                        {"name": "minimumTransactionAmount", "type": "uint256", "internalType": "uint256"},
                        {"name": "circuitBreakerDelta", "type": "uint256", "internalType": "uint256"},
                        {"name": "positionDuration", "type": "uint256", "internalType": "uint256"},
                        {"name": "checkpointDuration", "type": "uint256", "internalType": "uint256"},
                        {"name": "timeStretch", "type": "uint256", "internalType": "uint256"},
                        {"name": "governance", "type": "address", "internalType": "address"},
                        {"name": "feeCollector", "type": "address", "internalType": "address"},
                        {"name": "sweepCollector", "type": "address", "internalType": "address"},
                        {
                            "name": "fees",
                            "type": "tuple",
                            "internalType": "struct IHyperdrive.Fees",
                            "components": [
                                {"name": "curve", "type": "uint256", "internalType": "uint256"},
                                {"name": "flat", "type": "uint256", "internalType": "uint256"},
                                {"name": "governanceLP", "type": "uint256", "internalType": "uint256"},
                                {"name": "governanceZombie", "type": "uint256", "internalType": "uint256"},
                            ],
                        },
                    ],
                },
                {"name": "extraData", "type": "bytes", "indexed": False, "internalType": "bytes"},
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "DeployerCoordinatorAdded",
            "inputs": [{"name": "deployerCoordinator", "type": "address", "indexed": True, "internalType": "address"}],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "DeployerCoordinatorManagerUpdated",
            "inputs": [
                {"name": "deployerCoordinatorManager", "type": "address", "indexed": True, "internalType": "address"}
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "DeployerCoordinatorRemoved",
            "inputs": [{"name": "deployerCoordinator", "type": "address", "indexed": True, "internalType": "address"}],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "FeeCollectorUpdated",
            "inputs": [{"name": "newFeeCollector", "type": "address", "indexed": True, "internalType": "address"}],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "GovernanceUpdated",
            "inputs": [{"name": "governance", "type": "address", "indexed": True, "internalType": "address"}],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "HyperdriveGovernanceUpdated",
            "inputs": [{"name": "hyperdriveGovernance", "type": "address", "indexed": True, "internalType": "address"}],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "LinkerCodeHashUpdated",
            "inputs": [{"name": "newLinkerCodeHash", "type": "bytes32", "indexed": True, "internalType": "bytes32"}],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "LinkerFactoryUpdated",
            "inputs": [{"name": "newLinkerFactory", "type": "address", "indexed": True, "internalType": "address"}],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "MaxCheckpointDurationUpdated",
            "inputs": [
                {"name": "newMaxCheckpointDuration", "type": "uint256", "indexed": False, "internalType": "uint256"}
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "MaxCircuitBreakerDeltaUpdated",
            "inputs": [
                {"name": "newMaxCircuitBreakerDelta", "type": "uint256", "indexed": False, "internalType": "uint256"}
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "MaxFeesUpdated",
            "inputs": [
                {
                    "name": "newMaxFees",
                    "type": "tuple",
                    "indexed": False,
                    "internalType": "struct IHyperdrive.Fees",
                    "components": [
                        {"name": "curve", "type": "uint256", "internalType": "uint256"},
                        {"name": "flat", "type": "uint256", "internalType": "uint256"},
                        {"name": "governanceLP", "type": "uint256", "internalType": "uint256"},
                        {"name": "governanceZombie", "type": "uint256", "internalType": "uint256"},
                    ],
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "MaxFixedAPRUpdated",
            "inputs": [{"name": "newMaxFixedAPR", "type": "uint256", "indexed": False, "internalType": "uint256"}],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "MaxPositionDurationUpdated",
            "inputs": [
                {"name": "newMaxPositionDuration", "type": "uint256", "indexed": False, "internalType": "uint256"}
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "MaxTimeStretchAPRUpdated",
            "inputs": [
                {"name": "newMaxTimeStretchAPR", "type": "uint256", "indexed": False, "internalType": "uint256"}
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "MinCheckpointDurationUpdated",
            "inputs": [
                {"name": "newMinCheckpointDuration", "type": "uint256", "indexed": False, "internalType": "uint256"}
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "MinCircuitBreakerDeltaUpdated",
            "inputs": [
                {"name": "newMinCircuitBreakerDelta", "type": "uint256", "indexed": False, "internalType": "uint256"}
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "MinFeesUpdated",
            "inputs": [
                {
                    "name": "newMinFees",
                    "type": "tuple",
                    "indexed": False,
                    "internalType": "struct IHyperdrive.Fees",
                    "components": [
                        {"name": "curve", "type": "uint256", "internalType": "uint256"},
                        {"name": "flat", "type": "uint256", "internalType": "uint256"},
                        {"name": "governanceLP", "type": "uint256", "internalType": "uint256"},
                        {"name": "governanceZombie", "type": "uint256", "internalType": "uint256"},
                    ],
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "MinFixedAPRUpdated",
            "inputs": [{"name": "newMinFixedAPR", "type": "uint256", "indexed": False, "internalType": "uint256"}],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "MinPositionDurationUpdated",
            "inputs": [
                {"name": "newMinPositionDuration", "type": "uint256", "indexed": False, "internalType": "uint256"}
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "MinTimeStretchAPRUpdated",
            "inputs": [
                {"name": "newMinTimeStretchAPR", "type": "uint256", "indexed": False, "internalType": "uint256"}
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "SweepCollectorUpdated",
            "inputs": [{"name": "newSweepCollector", "type": "address", "indexed": True, "internalType": "address"}],
            "anonymous": False,
        },
        {"type": "error", "name": "DeployerCoordinatorAlreadyAdded", "inputs": []},
        {"type": "error", "name": "DeployerCoordinatorIndexMismatch", "inputs": []},
        {"type": "error", "name": "DeployerCoordinatorNotAdded", "inputs": []},
        {"type": "error", "name": "EndIndexTooLarge", "inputs": []},
        {"type": "error", "name": "InvalidCheckpointDuration", "inputs": []},
        {"type": "error", "name": "InvalidCheckpointDurationResolution", "inputs": []},
        {"type": "error", "name": "InvalidCircuitBreakerDelta", "inputs": []},
        {"type": "error", "name": "InvalidDeployConfig", "inputs": []},
        {"type": "error", "name": "InvalidDeployerCoordinator", "inputs": []},
        {"type": "error", "name": "InvalidFees", "inputs": []},
        {"type": "error", "name": "InvalidFixedAPR", "inputs": []},
        {"type": "error", "name": "InvalidIndexes", "inputs": []},
        {"type": "error", "name": "InvalidMaxCheckpointDuration", "inputs": []},
        {"type": "error", "name": "InvalidMaxCircuitBreakerDelta", "inputs": []},
        {"type": "error", "name": "InvalidMaxFees", "inputs": []},
        {"type": "error", "name": "InvalidMaxFixedAPR", "inputs": []},
        {"type": "error", "name": "InvalidMaxPositionDuration", "inputs": []},
        {"type": "error", "name": "InvalidMaxTimeStretchAPR", "inputs": []},
        {"type": "error", "name": "InvalidMinCheckpointDuration", "inputs": []},
        {"type": "error", "name": "InvalidMinCircuitBreakerDelta", "inputs": []},
        {"type": "error", "name": "InvalidMinFees", "inputs": []},
        {"type": "error", "name": "InvalidMinFixedAPR", "inputs": []},
        {"type": "error", "name": "InvalidMinPositionDuration", "inputs": []},
        {"type": "error", "name": "InvalidMinTimeStretchAPR", "inputs": []},
        {"type": "error", "name": "InvalidPositionDuration", "inputs": []},
        {"type": "error", "name": "InvalidTimeStretchAPR", "inputs": []},
        {"type": "error", "name": "LnInvalidInput", "inputs": []},
        {"type": "error", "name": "ReceiveLocked", "inputs": []},
        {"type": "error", "name": "TransferFailed", "inputs": []},
        {"type": "error", "name": "Unauthorized", "inputs": []},
        {"type": "error", "name": "UnsafeCastToInt256", "inputs": []},
    ],
)
# pylint: disable=line-too-long
hyperdrivefactory_bytecode = HexStr(
    "0x608060405260026001553480156200001657600080fd5b5060405162003f2238038062003f228339810160408190526200003991620006f1565b600062000047828262000940565b508160c001518260e0015110806200007357508160c001518260e0015162000070919062000a0c565b15155b156200009257604051630219d66360e11b815260040160405180910390fd5b60e0820151600a8190556101008301511080620000c457508160c00151826101000151620000c1919062000a0c565b15155b15620000e35760405163f9c0959d60e01b815260040160405180910390fd5b610100820151600b81905561012083015110806200011657508160c0015182610120015162000113919062000a0c565b15155b156200013557604051633007ad0160e11b815260040160405180910390fd5b610120820151600c81905561014083015110806200016857508160c0015182610140015162000165919062000a0c565b15155b15620001875760405163cfb699cb60e01b815260040160405180910390fd5b610140820151600d556101808201516101608301511115620001bc5760405163ef9bc65f60e01b815260040160405180910390fd5b610160820151600e55610180820151600f556101c08201516101a08301511115620001fa576040516330554de160e01b815260040160405180910390fd5b6101a08201516010556101c08201516011556102008201516101e0830151111562000238576040516383ebdfb760e01b815260040160405180910390fd5b6101e082015160125561020082015160135561024082015151670de0b6b3a76400001080620002775750670de0b6b3a764000082610240015160200151115b80620002935750670de0b6b3a764000082610240015160400151115b80620002af5750670de0b6b3a764000082610240015160600151115b15620002ce5760405163161071fb60e11b815260040160405180910390fd5b6102408201518051601881905560208201516019556040820151601a55606090910151601b556102208301515111806200031957508161024001516020015182610220015160200151115b806200033657508161024001516040015182610220015160400151115b806200035357508161024001516060015182610220015160600151115b1562000372576040516315b05a8f60e01b815260040160405180910390fd5b61022082015180516014556020808201516015556040808301516016556060928301516017558451600280546001600160a01b03199081166001600160a01b03938416179091558387015160038054831691841691909117905591860151600480548416918316919091179055608086015160078054841691831691909117905560a08601516008805490931691161790559083015180516200041a92601c92019062000457565b5050610260810151600580546001600160a01b0319166001600160a01b0390921691909117905561028081015160065560c0015160095562000a2f565b828054828255906000526020600020908101928215620004af579160200282015b82811115620004af57825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019062000478565b50620004bd929150620004c1565b5090565b5b80821115620004bd5760008155600101620004c2565b634e487b7160e01b600052604160045260246000fd5b6040516102a081016001600160401b0381118282101715620005145762000514620004d8565b60405290565b604051601f8201601f191681016001600160401b0381118282101715620005455762000545620004d8565b604052919050565b80516001600160a01b03811681146200056557600080fd5b919050565b600082601f8301126200057c57600080fd5b815160206001600160401b038211156200059a576200059a620004d8565b8160051b620005ab8282016200051a565b9283528481018201928281019087851115620005c657600080fd5b83870192505b84831015620005f057620005e0836200054d565b82529183019190830190620005cc565b979650505050505050565b6000608082840312156200060e57600080fd5b604051608081016001600160401b0381118282101715620006335762000633620004d8565b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b600082601f8301126200067657600080fd5b81516001600160401b03811115620006925762000692620004d8565b6020620006a8601f8301601f191682016200051a565b8281528582848701011115620006bd57600080fd5b60005b83811015620006dd578581018301518282018401528201620006c0565b506000928101909101919091529392505050565b600080604083850312156200070557600080fd5b82516001600160401b03808211156200071d57600080fd5b9084019061036082870312156200073357600080fd5b6200073d620004ee565b62000748836200054d565b815262000758602084016200054d565b60208201526200076b604084016200054d565b60408201526060830151828111156200078357600080fd5b62000791888286016200056a565b606083015250620007a5608084016200054d565b6080820152620007b860a084016200054d565b60a082015260c0838101519082015260e08084015190820152610100808401519082015261012080840151908201526101408084015190820152610160808401519082015261018080840151908201526101a080840151908201526101c080840151908201526101e0808401519082015261020080840151908201526102206200084588828601620005fb565b9082015262000859876102a08501620005fb565b6102408201526200086e61032084016200054d565b61026082015261034092909201516102808301526020850151919350808211156200089857600080fd5b50620008a78582860162000664565b9150509250929050565b600181811c90821680620008c657607f821691505b602082108103620008e757634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200093b57600081815260208120601f850160051c81016020861015620009165750805b601f850160051c820191505b81811015620009375782815560010162000922565b5050505b505050565b81516001600160401b038111156200095c576200095c620004d8565b62000974816200096d8454620008b1565b84620008ed565b602080601f831160018114620009ac5760008415620009935750858301515b600019600386901b1c1916600185901b17855562000937565b600085815260208120601f198616915b82811015620009dd57888601518255948401946001909101908401620009bc565b5085821015620009fc5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60008262000a2a57634e487b7160e01b600052601260045260246000fd5b500690565b6134e38062000a3f6000396000f3fe6080604052600436106103855760003560e01c806399623bb1116101d1578063d6f5016911610102578063e4e7148f116100a0578063ec895f111161006f578063ec895f1114610a4c578063f8c09e5914610a6c578063fe3d5aeb14610a9c578063fec4513914610abc57600080fd5b8063e4e7148f146109d7578063e71f34b3146109f7578063e83e34b114610a17578063eb71f66c14610a2c57600080fd5b8063dd2b8fbb116100dc578063dd2b8fbb1461096c578063e0e2daaa1461098c578063e1b39c80146109a2578063e3331555146109b757600080fd5b8063d6f5016914610920578063daac24da14610936578063daf012e61461095657600080fd5b8063bf9bd5cd1161016f578063c905a4b511610149578063c905a4b5146108be578063d0f96b92146108d4578063d23d7ea3146108ea578063d2c35ce81461090057600080fd5b8063bf9bd5cd14610866578063c17225631461087c578063c415b95c1461089e57600080fd5b8063a98a46db116101ab578063a98a46db146107f3578063b256126314610813578063b9fdb31914610833578063bc30e7a11461084657600080fd5b806399623bb11461079e5780639af25262146107be578063a64c90bf146107de57600080fd5b80634fbfee77116102b65780636f6d5c4a116102545780638627a4f0116102235780638627a4f0146107285780638e127cf5146107485780638efc09861461076857806397b0e8ce1461077e57600080fd5b80636f6d5c4a146106a857806383b361e8146106c857806384c19aab146106e8578063852297851461070857600080fd5b80635aa6e675116102905780635aa6e67514610613578063628027a3146106335780636b44e6be146106535780636e95d67c1461069357600080fd5b80634fbfee77146105aa57806354fd4d50146105ca5780635720c9d5146105fd57600080fd5b80632885e3ac11610323578063411c3035116102fd578063411c30351461053e578063421caba81461055e5780634554f9a91461057e578063488007601461059457600080fd5b80632885e3ac146104c85780632907d3dd146104e85780632b58f4181461050857600080fd5b806311e77bfe1161035f57806311e77bfe146104375780631978ebcf146104575780631b59be0c146104775780631ecda0fe146104a457600080fd5b806306fdde03146103b457806310780f73146103df57806310d1dc3e1461041757600080fd5b366103af576002600154036103ad57604051630aac75b560e31b815260040160405180910390fd5b005b600080fd5b3480156103c057600080fd5b506103c9610adc565b6040516103d69190612b88565b60405180910390f35b3480156103eb57600080fd5b506008546103ff906001600160a01b031681565b6040516001600160a01b0390911681526020016103d6565b34801561042357600080fd5b506103ad610432366004612b9b565b610b6a565b34801561044357600080fd5b506103ad610452366004612bad565b610c83565b34801561046357600080fd5b506103ad610472366004612bad565b610d5c565b34801561048357600080fd5b50610497610492366004612bc6565b610dde565b6040516103d69190612c3b565b3480156104b057600080fd5b506104ba600e5481565b6040519081526020016103d6565b3480156104d457600080fd5b506103ad6104e3366004612b9b565b610ec3565b3480156104f457600080fd5b506103ad610503366004612bad565b611029565b34801561051457600080fd5b506103ff610523366004612cb0565b601f602052600090815260409020546001600160a01b031681565b34801561054a57600080fd5b506103ad610559366004612ccd565b6110ab565b34801561056a57600080fd5b506103ad610579366004612cb0565b61127c565b34801561058a57600080fd5b506104ba600f5481565b3480156105a057600080fd5b506104ba60135481565b3480156105b657600080fd5b506103ad6105c5366004612bad565b611385565b3480156105d657600080fd5b506103c960405180604001604052806007815260200166076312e302e31360cc1b81525081565b34801561060957600080fd5b506104ba600a5481565b34801561061f57600080fd5b506002546103ff906001600160a01b031681565b34801561063f57600080fd5b506103ad61064e366004612bad565b6113e2565b34801561065f57600080fd5b5061068361066e366004612cb0565b60216020526000908152604090205460ff1681565b60405190151581526020016103d6565b34801561069f57600080fd5b506020546104ba565b3480156106b457600080fd5b506103ad6106c3366004612bad565b611464565b3480156106d457600080fd5b506103ad6106e3366004612bad565b611508565b3480156106f457600080fd5b506103ad610703366004612bad565b61158a565b34801561071457600080fd5b506103ad610723366004612cb0565b61160c565b34801561073457600080fd5b506103ad610743366004612cb0565b611680565b34801561075457600080fd5b506103ad610763366004612bad565b6116f4565b34801561077457600080fd5b506104ba600d5481565b34801561078a57600080fd5b506103ad610799366004612bad565b611798565b3480156107aa57600080fd5b506005546103ff906001600160a01b031681565b3480156107ca57600080fd5b506103ad6107d9366004612bc6565b61181a565b3480156107ea57600080fd5b50610497611882565b3480156107ff57600080fd5b506103ad61080e366004612cb0565b6118e4565b34801561081f57600080fd5b506103ad61082e366004612cb0565b611958565b6103ff610841366004612f0f565b6119cc565b34801561085257600080fd5b5061049761086136600461303e565b611dbc565b34801561087257600080fd5b506104ba60115481565b34801561088857600080fd5b50610891611ec8565b6040516103d69190613060565b3480156108aa57600080fd5b506007546103ff906001600160a01b031681565b3480156108ca57600080fd5b506104ba60065481565b3480156108e057600080fd5b506104ba60095481565b3480156108f657600080fd5b506104ba60105481565b34801561090c57600080fd5b506103ad61091b366004612cb0565b611f20565b34801561092c57600080fd5b506104ba60125481565b34801561094257600080fd5b506103ff610951366004612bad565b611f94565b34801561096257600080fd5b506104ba600c5481565b34801561097857600080fd5b506103ad610987366004612cb0565b611fc4565b34801561099857600080fd5b506104ba600b5481565b3480156109ae57600080fd5b50601d546104ba565b3480156109c357600080fd5b506004546103ff906001600160a01b031681565b3480156109e357600080fd5b506003546103ff906001600160a01b031681565b348015610a0357600080fd5b506103ad610a12366004612bad565b612038565b348015610a2357600080fd5b506108916120dc565b348015610a3857600080fd5b506103ad610a47366004612bad565b612134565b348015610a5857600080fd5b50610497610a6736600461303e565b6121cc565b348015610a7857600080fd5b50610683610a87366004612cb0565b601e6020526000908152604090205460ff1681565b348015610aa857600080fd5b506103ff610ab7366004612bad565b6122d8565b348015610ac857600080fd5b506103ff610ad736600461308b565b6122ed565b60008054610ae99061311f565b80601f0160208091040260200160405190810160405280929190818152602001828054610b159061311f565b8015610b625780601f10610b3757610100808354040283529160200191610b62565b820191906000526020600020905b815481529060010190602001808311610b4557829003601f168201915b505050505081565b6002546001600160a01b03163314610b94576040516282b42960e81b815260040160405180910390fd5b604080516080810182526018548082526019546020830152601a5492820192909252601b5460608201529082351180610bd4575080602001518260200135115b80610be6575080604001518260400135115b80610bf8575080606001518260600135115b15610c16576040516315b05a8f60e01b815260040160405180910390fd5b81356014819055602080840135601581905560408086013560168190556060808801356017819055835196875294860193909352908401528201527fe1c45f8aeb543f30b37cc2fccfbac0f32cc8f234284df921d71cff04e51ef421906080015b60405180910390a15050565b6002546001600160a01b03163314610cad576040516282b42960e81b815260040160405180910390fd5b80600a54610cbb9190613153565b151580610cd4575080600b54610cd19190613153565b15155b80610ceb575080600c54610ce89190613153565b15155b80610d02575080600d54610cff9190613153565b15155b15610d20576040516311b75c1560e31b815260040160405180910390fd5b60098190556040518181527f04ed835b488b4fcf0a212a46ed67cbbffc2fc81b5cb6a12c546572cbf7b7e06a906020015b60405180910390a150565b6002546001600160a01b03163314610d86576040516282b42960e81b815260040160405180910390fd5b601154811115610da957604051631670f79760e01b815260040160405180910390fd5b60108190556040518181527faab0ee9100629c405a4d75336e1640cc81e0608fb0d7f17389c06ee8d4f0219190602001610d51565b60205460609067ffffffffffffffff811115610dfc57610dfc612cf9565b604051908082528060200260200182016040528015610e25578160200160208202803683370190505b50905060005b82811015610ebb57601f6000858584818110610e4957610e49613175565b9050602002016020810190610e5e9190612cb0565b6001600160a01b0390811682526020820192909252604001600020548351911690839083908110610e9157610e91613175565b6001600160a01b039092166020928302919091019091015280610eb3816131a1565b915050610e2b565b505b92915050565b6002546001600160a01b03163314610eed576040516282b42960e81b815260040160405180910390fd5b6040805160808101825260145481526015546020820152601654918101919091526017546060820152670de0b6b3a764000082351180610f385750670de0b6b3a76400008260200135115b80610f4e5750670de0b6b3a76400008260400135115b80610f645750670de0b6b3a76400008260600135115b80610f70575080518235105b80610f82575080602001518260200135105b80610f94575080604001518260400135105b80610fa6575080606001518260600135105b15610fc45760405163161071fb60e11b815260040160405180910390fd5b813560188190556020808401356019819055604080860135601a819055606080880135601b819055835196875294860193909352908401528201527f8c6093c7e65dd862e88162770c4e156e8a0da57d25d961e0fb6f28cfb7ff89a790608001610c77565b6002546001600160a01b03163314611053576040516282b42960e81b815260040160405180910390fd5b600f54811115611076576040516328a2d9a960e01b815260040160405180910390fd5b600e8190556040518181527f41f729b931ad8e33d697fff6bc6736a1ac6ee09e8265efae2794ac1635c217a690602001610d51565b6002546001600160a01b031633148015906110d157506003546001600160a01b03163314155b156110ee576040516282b42960e81b815260040160405180910390fd5b6001600160a01b0382166000908152601e602052604090205460ff1661112757604051634bf121ab60e01b815260040160405180910390fd5b816001600160a01b0316601d828154811061114457611144613175565b6000918252602090912001546001600160a01b03161461117757604051630f2700cb60e21b815260040160405180910390fd5b6001600160a01b0382166000908152601e60205260409020805460ff19169055601d80546111a7906001906131ba565b815481106111b7576111b7613175565b600091825260209091200154601d80546001600160a01b0390921691839081106111e3576111e3613175565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550601d805480611222576112226131cd565b600082815260208120820160001990810180546001600160a01b03191690559091019091556040516001600160a01b038416917f709b7450bfafda93efd91d29149870a794637ac9d696ca61625fd2f53548afe091a25050565b6002546001600160a01b031633148015906112a257506003546001600160a01b03163314155b156112bf576040516282b42960e81b815260040160405180910390fd5b6001600160a01b0381166000908152601e602052604090205460ff16156112f95760405163bd34634f60e01b815260040160405180910390fd5b6001600160a01b0381166000818152601e6020526040808220805460ff19166001908117909155601d8054918201815583527f6d4407e7be21f808e6509aa9fa9143369579dd7d760fe20a2c09680fc146134f0180546001600160a01b03191684179055517f16ce88285cfd59829a5aa04370a5ec8090a18c14e7e7fb9d4b12a42291c098e39190a250565b6002546001600160a01b031633146113af576040516282b42960e81b815260040160405180910390fd5b600681905560405181907f395a61259037298d1c4cd4bf177b64ad5995d38a9394573fcd9060d649314ad090600090a250565b6002546001600160a01b0316331461140c576040516282b42960e81b815260040160405180910390fd5b60125481101561142f57604051630a35539d60e41b815260040160405180910390fd5b60138190556040518181527fa9e7961bb3342715dbecc208087a6a9df8986d524b3a0a829fd90f5a2f5ba53e90602001610d51565b6002546001600160a01b0316331461148e576040516282b42960e81b815260040160405180910390fd5b600a548110806114a957506009546114a69082613153565b15155b806114b55750600c5481115b156114d35760405163f9c0959d60e01b815260040160405180910390fd5b600b8190556040518181527f31407ddd1722f500b8aa2c18e112398626dd7c2869a5f80731ec30b244d9b5f290602001610d51565b6002546001600160a01b03163314611532576040516282b42960e81b815260040160405180910390fd5b60135481111561155557604051635a8f655760e01b815260040160405180910390fd5b60128190556040518181527f490eb2a91746aa933c9ffe2f7939aa06498f3259139f8805f008b12c8c697a4690602001610d51565b6002546001600160a01b031633146115b4576040516282b42960e81b815260040160405180910390fd5b600e548110156115d757604051637edc061360e11b815260040160405180910390fd5b600f8190556040518181527f0e56d83f54e6f5b08716a54b3abdb59b3025bf12c1875c87ab98ab081d6f838190602001610d51565b6002546001600160a01b03163314611636576040516282b42960e81b815260040160405180910390fd5b600580546001600160a01b0319166001600160a01b0383169081179091556040517f03aa5b0fb65014eea89fda04a7bc11742014881f3c078f2c75b7226ce10d941890600090a250565b6002546001600160a01b031633146116aa576040516282b42960e81b815260040160405180910390fd5b600880546001600160a01b0319166001600160a01b0383169081179091556040517fc049058b1df2dd8902739ceb78992df12fa8369c06c450b3c6787137b452fdd290600090a250565b6002546001600160a01b0316331461171e576040516282b42960e81b815260040160405180910390fd5b60095481108061173957506009546117369082613153565b15155b806117455750600b5481115b1561176357604051630219d66360e11b815260040160405180910390fd5b600a8190556040518181527f6f8175cdbac1b4d238abba24a17d2554d7b9750bbeda6414e191c478384b763190602001610d51565b6002546001600160a01b031633146117c2576040516282b42960e81b815260040160405180910390fd5b6010548110156117e55760405163019cfb7b60e61b815260040160405180910390fd5b60118190556040518181527f4fa35c11ce9a45ae882c154ecb53ab5cac52a74a5b9b0373be36deb30c78297890602001610d51565b6002546001600160a01b03163314611844576040516282b42960e81b815260040160405180910390fd5b611850601c8383612ad3565b507f2a85276cf604a3822e19b29a3e97aebfbc47a19025c2e8f6e80b3af774dcbc388282604051610c779291906131e3565b6060601c8054806020026020016040519081016040528092919081815260200182805480156118da57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116118bc575b5050505050905090565b6002546001600160a01b0316331461190e576040516282b42960e81b815260040160405180910390fd5b600380546001600160a01b0319166001600160a01b0383169081179091556040517f6f717fb0ab51206dea4064a35c94c2784f8714b012fbde820e0ddee36265eb6a90600090a250565b6002546001600160a01b03163314611982576040516282b42960e81b815260040160405180910390fd5b600280546001600160a01b0319166001600160a01b0383169081179091556040517f9d3e522e1e47a2f6009739342b9cc7b252a1888154e843ab55ee1c81745795ab90600090a250565b6001600160a01b0388166000908152601e602052604081205460ff16611a0557604051636e623f0f60e01b815260040160405180910390fd5b611a108886866123df565b60408051336020808301919091528183018d90528251808303840181526060830193849052805191012063c29d10c160e01b9092526000916001600160a01b038c169163c29d10c191611a6b918d908d908990606401613335565b6020604051808303816000875af1158015611a8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aae9190613370565b6001600160a01b038181166000908152601f60205260409081902080546001600160a01b0319168e84169081179091556004549092166101408d015251919250907ff353a3c7608dc37624175f4f0c0a6d2e6b418797ecbff5943616e9da3eb1ae8290611b209084908d908d9061338d565b60405180910390a260208054600180820183557fc97bfaf2f8ee708c303a06d134f5ecd8389ae0432af62dc132a24118292866bb90910180546001600160a01b0319166001600160a01b03858116918217909255600090815260218452604090819020805460ff191684179055918055815133938101939093529082018d90528b16906316abfc7090349060600160405160208183030381529060405280519060200120338b8b8a6040518763ffffffff1660e01b8152600401611be89594939291906133c8565b60206040518083038185885af1158015611c06573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190611c2b919061342b565b50600260015560005b601c54811015611cd757816001600160a01b0316637180c8ca601c8381548110611c6057611c60613175565b60009182526020909120015460405160e083901b6001600160e01b03191681526001600160a01b03909116600482015260016024820152604401600060405180830381600087803b158015611cb457600080fd5b505af1158015611cc8573d6000803e3d6000fd5b50505050806001019050611c34565b506004805460405163ab033ea960e01b81526001600160a01b039182169281019290925282169063ab033ea990602401600060405180830381600087803b158015611d2157600080fd5b505af1158015611d35573d6000803e3d6000fd5b504792505081159050611dad57604051600090339083908381818185875af1925050503d8060008114611d84576040519150601f19603f3d011682016040523d82523d6000602084013e611d89565b606091505b5050905080611dab576040516312171d8360e31b815260040160405180910390fd5b505b509a9950505050505050505050565b6060818310611dde57604051633b2735ab60e11b815260040160405180910390fd5b602054821115611e015760405163e0f7becb60e01b815260040160405180910390fd5b611e0b83836131ba565b67ffffffffffffffff811115611e2357611e23612cf9565b604051908082528060200260200182016040528015611e4c578160200160208202803683370190505b509050825b82811015610ebb5760208181548110611e6c57611e6c613175565b9060005260206000200160009054906101000a90046001600160a01b03168285830381518110611e9e57611e9e613175565b6001600160a01b039092166020928302919091019091015280611ec0816131a1565b915050611e51565b611ef36040518060800160405280600081526020016000815260200160008152602001600081525090565b50604080516080810182526014548152601554602082015260165491810191909152601754606082015290565b6002546001600160a01b03163314611f4a576040516282b42960e81b815260040160405180910390fd5b600780546001600160a01b0319166001600160a01b0383169081179091556040517fe5693914d19c789bdee50a362998c0bc8d035a835f9871da5d51152f0582c34f90600090a250565b600060208281548110611fa957611fa9613175565b6000918252602090912001546001600160a01b031692915050565b6002546001600160a01b03163314611fee576040516282b42960e81b815260040160405180910390fd5b600480546001600160a01b0319166001600160a01b0383169081179091556040517ff3e07b4bb4394f2ff320bd1dd151551dff304d5e948b401d8558b228482c97d890600090a250565b6002546001600160a01b03163314612062576040516282b42960e81b815260040160405180910390fd5b600b5481108061207d575060095461207a9082613153565b15155b806120895750600d5481115b156120a757604051633007ad0160e11b815260040160405180910390fd5b600c8190556040518181527fe9ef3e93dff799d4db8a12ff79e0918a5a78d75b10527864f4b1c920f6f4f17890602001610d51565b6121076040518060800160405280600081526020016000815260200160008152602001600081525090565b506040805160808101825260185481526019546020820152601a5491810191909152601b54606082015290565b6002546001600160a01b0316331461215e576040516282b42960e81b815260040160405180910390fd5b600c5481108061217957506009546121769082613153565b15155b156121975760405163cfb699cb60e01b815260040160405180910390fd5b600d8190556040518181527f866fe9485f9983afceaa1385307b6eb0fd3df5a250ae2b0bf76dc9ddd316926b90602001610d51565b60608183106121ee57604051633b2735ab60e11b815260040160405180910390fd5b601d548211156122115760405163e0f7becb60e01b815260040160405180910390fd5b61221b83836131ba565b67ffffffffffffffff81111561223357612233612cf9565b60405190808252806020026020018201604052801561225c578160200160208202803683370190505b509050825b82811015610ebb57601d818154811061227c5761227c613175565b9060005260206000200160009054906101000a90046001600160a01b031682858303815181106122ae576122ae613175565b6001600160a01b0390921660209283029190910190910152806122d0816131a1565b915050612261565b6000601d8281548110611fa957611fa9613175565b6001600160a01b0387166000908152601e602052604081205460ff1661232657604051636e623f0f60e01b815260040160405180910390fd5b6123318786866123df565b60408051336020808301919091528183018c905282518083038401815260608301938490528051910120637f88be8160e01b9092526000916001600160a01b038b1691637f88be819161238e918c908c908a908a90606401613444565b6020604051808303816000875af11580156123ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123d19190613370565b9a9950505050505050505050565b600a5483610100015110806123fa5750600b54836101000151115b8061241657506009548361010001516124139190613153565b15155b1561243457604051635428734d60e01b815260040160405180910390fd5b600c548360e00151108061244d5750600d548360e00151115b8061246b57508261010001518360e001516124689190613153565b15155b156124895760405163253fffcf60e11b815260040160405180910390fd5b600e548360c0015110806124a25750600f548360c00151115b156124c05760405163ef9bc65f60e01b815260040160405180910390fd5b6018546101a08401515111806124f4575060195460e08401516101a0850151602001516124f2916301e1338090612731565b115b806125095750601a546101a084015160400151115b8061251e5750601b546101a084015160600151115b8061253057506014546101a084015151105b80612559575060155460e08401516101a085015160200151612557916301e1338090612757565b105b8061256e57506016546101a084015160400151105b8061258357506017546101a084015160600151105b156125a157604051632d8768f960e01b815260040160405180910390fd5b6010548210806125b2575060115482115b156125d0576040516330554de160e01b815260040160405180910390fd5b60006125f56611c37937e080006125ef85671bc16d674ec80000612775565b90612791565b6012549091506126059082612791565b821080612638575061263561262c671bc16d674ec800006126268685612791565b906127a7565b601354906127bc565b82115b15612656576040516383ebdfb760e01b815260040160405180910390fd5b6000612666838660e001516127d1565b60055460408701519192506001600160a01b0391821691161415806126915750600654856060015114155b806126b057506007546101608601516001600160a01b03908116911614155b806126cf57506008546101808601516001600160a01b03908116911614155b806126ee57506004546101408601516001600160a01b03908116911614155b806126fd575061012085015115155b1561271b5760405163e8c02dd760e01b815260040160405180910390fd5b3061014086015261012090940193909352505050565b600082600019048411830215820261274857600080fd5b50910281810615159190040190565b600082600019048411830215820261276e57600080fd5b5091020490565b600061278a83670de0b6b3a764000084612757565b9392505050565b60008183116127a0578161278a565b5090919050565b600061278a8383670de0b6b3a7640000612757565b60008183116127cb578261278a565b50919050565b6000806128026127f36127e5866064613483565b66a5bbed86c5a000906127a7565b6748cd4072281e000090612775565b9050612816670de0b6b3a764000082612775565b905061286e8161262661284161283c61283789670de0b6b3a764000061349a565b612876565b6128a4565b61286861283c6128568a8a6301e13380612757565b61283790670de0b6b3a764000061349a565b90612775565b949350505050565b60006001600160ff1b038211156128a05760405163396ea70160e11b815260040160405180910390fd5b5090565b60008082136128c65760405163e61b497560e01b815260040160405180910390fd5b506fffffffffffffffffffffffffffffffff811160071b81811c67ffffffffffffffff1060061b1781811c63ffffffff1060051b1781811c61ffff1060041b1781811c60ff10600390811b90911782811c600f1060021b1782811c909110600190811b90911782811c90911017609f8181036060019290921b91605f198201906129529084901c612876565b6c465772b2bbbb5f824b15207a3081018102606090811d6d0388eaa27412d5aca026815d636e018202811d6d0df99ac502031bf953eff472fdcc018202811d6d13cdffb29d51d99322bdff5f2211018202811d6d0a0f742023def783a307a986912e018202811d6d01920d8043ca89b5239253284e42018202811d6c0b7a86d7375468fac667a0a527016c29508e458543d8aa4df2abee7883018302821d6d0139601a2efabe717e604cbb4894018302821d6d02247f7a7b6594320649aa03aba1018302821d6c8c3f38e95a6b1ff2ab1c3b343619018302821d6d02384773bdf1ac5676facced60901901830290911d6cb9a025d814b29c212b8b1a07cd1901909102780a09507084cc699bb0e71ea869ffffffffffffffffffffffff190105711340daa0d5f769dba1915cef59f0815a5506027d0267a36c0c95b3975ab3ee5b203a7614a3f75373f047d803ae7b6687f2b391909102017d57115e47018c7177eebf7cd370a3356a1b7863008a5ae8028c72b88642840160ae1d92915050565b828054828255906000526020600020908101928215612b26579160200282015b82811115612b265781546001600160a01b0319166001600160a01b03843516178255602090920191600190910190612af3565b506128a09291505b808211156128a05760008155600101612b2e565b6000815180845260005b81811015612b6857602081850181015186830182015201612b4c565b506000602082860101526020601f19601f83011685010191505092915050565b60208152600061278a6020830184612b42565b6000608082840312156127cb57600080fd5b600060208284031215612bbf57600080fd5b5035919050565b60008060208385031215612bd957600080fd5b823567ffffffffffffffff80821115612bf157600080fd5b818501915085601f830112612c0557600080fd5b813581811115612c1457600080fd5b8660208260051b8501011115612c2957600080fd5b60209290920196919550909350505050565b6020808252825182820181905260009190848201906040850190845b81811015612c7c5783516001600160a01b031683529284019291840191600101612c57565b50909695505050505050565b6001600160a01b0381168114612c9d57600080fd5b50565b8035612cab81612c88565b919050565b600060208284031215612cc257600080fd5b813561278a81612c88565b60008060408385031215612ce057600080fd5b8235612ceb81612c88565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b6040516101c0810167ffffffffffffffff81118282101715612d3357612d33612cf9565b60405290565b600060808284031215612d4b57600080fd5b6040516080810181811067ffffffffffffffff82111715612d6e57612d6e612cf9565b8060405250809150823581526020830135602082015260408301356040820152606083013560608201525092915050565b60006102208284031215612db257600080fd5b612dba612d0f565b9050612dc582612ca0565b8152612dd360208301612ca0565b6020820152612de460408301612ca0565b6040820152606082013560608201526080820135608082015260a082013560a082015260c082013560c082015260e082013560e0820152610100808301358183015250610120808301358183015250610140612e41818401612ca0565b90820152610160612e53838201612ca0565b90820152610180612e65838201612ca0565b908201526101a0612e7884848301612d39565b9082015292915050565b600082601f830112612e9357600080fd5b813567ffffffffffffffff80821115612eae57612eae612cf9565b604051601f8301601f19908116603f01168101908282118183101715612ed657612ed6612cf9565b81604052838152866020858801011115612eef57600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060008060008060008060006103208a8c031215612f2e57600080fd5b8935985060208a0135612f4081612c88565b9750612f4f8b60408c01612d9f565b96506102608a013567ffffffffffffffff80821115612f6d57600080fd5b612f798d838e01612e82565b97506102808c013596506102a08c013595506102c08c013594506102e08c0135915080821115612fa857600080fd5b908b01906060828e031215612fbc57600080fd5b604051606081018181108382111715612fd757612fd7612cf9565b6040528235612fe581612c88565b815260208301358015158114612ffa57600080fd5b602082015260408301358281111561301157600080fd5b61301d8f828601612e82565b6040830152508094505050506103008a013590509295985092959850929598565b6000806040838503121561305157600080fd5b50508035926020909101359150565b8151815260208083015190820152604080830151908201526060808301519082015260808101610ebd565b600080600080600080600080610300898b0312156130a857600080fd5b8835975060208901356130ba81612c88565b96506130c98a60408b01612d9f565b955061026089013567ffffffffffffffff8111156130e657600080fd5b6130f28b828c01612e82565b989b979a509598610280810135976102a082013597506102c082013596506102e090910135945092505050565b600181811c9082168061313357607f821691505b6020821081036127cb57634e487b7160e01b600052602260045260246000fd5b60008261317057634e487b7160e01b600052601260045260246000fd5b500690565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016131b3576131b361318b565b5060010190565b81810381811115610ebd57610ebd61318b565b634e487b7160e01b600052603160045260246000fd5b60208082528181018390526000908460408401835b8681101561322657823561320b81612c88565b6001600160a01b0316825291830191908301906001016131f8565b509695505050505050565b80516001600160a01b03168252602081015161325860208401826001600160a01b03169052565b50604081015161327360408401826001600160a01b03169052565b50606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e0830152610100808201518184015250610120808201518184015250610140808201516132d9828501826001600160a01b03169052565b5050610160818101516001600160a01b039081169184019190915261018080830151909116908301526101a09081015180519183019190915260208101516101c083015260408101516101e08301526060015161020090910152565b600061028086835261334a6020840187613231565b8061024084015261335d81840186612b42565b9150508261026083015295945050505050565b60006020828403121561338257600080fd5b815161278a81612c88565b6001600160a01b038416815260006102606133ab6020840186613231565b806102408401526133be81840185612b42565b9695505050505050565b858152600060018060a01b03808716602084015285604084015284606084015260a060808401528084511660a0840152506020830151151560c08301526040830151606060e084015261341f610100840182612b42565b98975050505050505050565b60006020828403121561343d57600080fd5b5051919050565b60006102a08783526134596020840188613231565b8061024084015261346c81840187612b42565b610260840195909552505061028001529392505050565b8082028115828204841417610ebd57610ebd61318b565b80820180821115610ebd57610ebd61318b56fea2646970667358221220e095828f5a63149eb6a44d4f9652b305fdf57a47a9d48bb732b97702af2823be64736f6c63430008140033"
)


class HyperdriveFactoryContract(Contract):
    """A web3.py Contract class for the HyperdriveFactory contract."""

    abi: ABI = hyperdrivefactory_abi
    bytecode: bytes | None = try_bytecode_hexbytes(hyperdrivefactory_bytecode, "hyperdrivefactory")

    def __init__(self, address: ChecksumAddress | None = None) -> None:
        try:
            # Initialize parent Contract class
            super().__init__(address=address)
            self.functions = HyperdriveFactoryContractFunctions(hyperdrivefactory_abi, self.w3, address)  # type: ignore
            self.events = HyperdriveFactoryContractEvents(hyperdrivefactory_abi, self.w3, address)  # type: ignore
            self.errors = HyperdriveFactoryContractErrors()

        except FallbackNotFound:
            print("Fallback function not found. Continuing...")

    events: HyperdriveFactoryContractEvents

    errors: HyperdriveFactoryContractErrors = HyperdriveFactoryContractErrors()

    functions: HyperdriveFactoryContractFunctions

    class ConstructorArgs(NamedTuple):
        """Arguments to pass the contract's constructor function."""

        factoryConfig: FactoryConfig

        name: str

    @classmethod
    def constructor(cls, factoryConfig: FactoryConfig, name: str) -> ContractConstructor:  # type: ignore
        """Creates a transaction with the contract's constructor function.

        Parameters
        ----------

        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.

        """

        return super().constructor(dataclass_to_tuple(factoryConfig), dataclass_to_tuple(name))

    @classmethod
    def deploy(cls, w3: Web3, account: LocalAccount | ChecksumAddress, constructorArgs: ConstructorArgs) -> Self:
        """Deploys and instance of the contract.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.
        """
        deployer = cls.factory(w3=w3)
        constructor_fn = deployer.constructor(*constructorArgs)

        # if an address is supplied, try to use a web3 default account
        if isinstance(account, str):
            tx_hash = constructor_fn.transact({"from": account})
            tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

            deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
            return deployed_contract

        # otherwise use the account provided.
        deployment_tx = constructor_fn.build_transaction()
        current_nonce = w3.eth.get_transaction_count(account.address)
        deployment_tx.update({"nonce": current_nonce})

        # Sign the transaction with local account private key
        signed_tx = account.sign_transaction(deployment_tx)

        # Send the signed transaction and wait for receipt
        tx_hash = w3.eth.send_raw_transaction(signed_tx.raw_transaction)
        tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

        deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
        return deployed_contract

    @classmethod
    def factory(cls, w3: Web3, class_name: str | None = None, **kwargs: Any) -> Type[Self]:
        """Deploys and instance of the contract.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        class_name: str | None
            The instance class name.

        Returns
        -------
        Self
            A deployed instance of the contract.
        """
        contract = super().factory(w3, class_name, **kwargs)
        contract.functions = HyperdriveFactoryContractFunctions(hyperdrivefactory_abi, w3, None)
        contract.errors = HyperdriveFactoryContractErrors()

        return contract
