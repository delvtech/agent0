"""A web3.py Contract class for the HyperdriveFactory contract.

DO NOT EDIT.  This file was generated by pypechain.  See documentation at
https://github.com/delvtech/pypechain"""

# contracts have PascalCase names
# pylint: disable=invalid-name

# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments

# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return

# This file is bound to get very long depending on contract sizes.
# pylint: disable=too-many-lines

# methods are overriden with specific arguments instead of generic *args, **kwargs
# pylint: disable=arguments-differ

# consumers have too many opinions on line length
# pylint: disable=line-too-long


from __future__ import annotations

from typing import Any, Iterable, NamedTuple, Sequence, Type, cast

from eth_abi.codec import ABICodec
from eth_abi.registry import registry as default_registry
from eth_account.signers.local import LocalAccount
from eth_typing import ChecksumAddress, HexStr
from hexbytes import HexBytes
from typing_extensions import Self
from web3 import Web3
from web3._utils.filters import LogFilter
from web3.contract.contract import (
    Contract,
    ContractConstructor,
    ContractEvent,
    ContractEvents,
    ContractFunction,
    ContractFunctions,
)
from web3.exceptions import FallbackNotFound
from web3.types import ABI, ABIFunction, BlockIdentifier, CallOverride, EventData, TxParams

from .HyperdriveFactoryTypes import FactoryConfig
from .IHyperdriveTypes import Fees, Options, PoolDeployConfig
from .utilities import dataclass_to_tuple, get_abi_input_types, rename_returned_types

structs = {
    "Fees": Fees,
    "FactoryConfig": FactoryConfig,
    "PoolDeployConfig": PoolDeployConfig,
    "Options": Options,
}


class HyperdriveFactoryAddDeployerCoordinatorContractFunction(ContractFunction):
    """ContractFunction for the addDeployerCoordinator method."""

    def __call__(self, deployerCoordinator: str) -> HyperdriveFactoryAddDeployerCoordinatorContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(deployerCoordinator))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class HyperdriveFactoryCheckpointDurationResolutionContractFunction(ContractFunction):
    """ContractFunction for the checkpointDurationResolution method."""

    def __call__(self) -> HyperdriveFactoryCheckpointDurationResolutionContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(int, rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryDefaultPausersContractFunction(ContractFunction):
    """ContractFunction for the defaultPausers method."""

    def __call__(self) -> HyperdriveFactoryDefaultPausersContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[str]:
        """returns list[str]."""
        # Define the expected return types from the smart contract call

        return_types = list[str]

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(list[str], rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryDeployAndInitializeContractFunction(ContractFunction):
    """ContractFunction for the deployAndInitialize method."""

    def __call__(self, deploymentId: bytes, deployerCoordinator: str, config: PoolDeployConfig, extraData: bytes, contribution: int, fixedAPR: int, timeStretchAPR: int, options: Options, salt: bytes) -> HyperdriveFactoryDeployAndInitializeContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(deploymentId),
            dataclass_to_tuple(deployerCoordinator),
            dataclass_to_tuple(config),
            dataclass_to_tuple(extraData),
            dataclass_to_tuple(contribution),
            dataclass_to_tuple(fixedAPR),
            dataclass_to_tuple(timeStretchAPR),
            dataclass_to_tuple(options),
            dataclass_to_tuple(salt),
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(str, rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryDeployTargetContractFunction(ContractFunction):
    """ContractFunction for the deployTarget method."""

    def __call__(self, deploymentId: bytes, deployerCoordinator: str, config: PoolDeployConfig, extraData: bytes, fixedAPR: int, timeStretchAPR: int, targetIndex: int, salt: bytes) -> HyperdriveFactoryDeployTargetContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(deploymentId),
            dataclass_to_tuple(deployerCoordinator),
            dataclass_to_tuple(config),
            dataclass_to_tuple(extraData),
            dataclass_to_tuple(fixedAPR),
            dataclass_to_tuple(timeStretchAPR),
            dataclass_to_tuple(targetIndex),
            dataclass_to_tuple(salt),
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(str, rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryFeeCollectorContractFunction(ContractFunction):
    """ContractFunction for the feeCollector method."""

    def __call__(self) -> HyperdriveFactoryFeeCollectorContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(str, rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryGetDeployerCoordinatorAtIndexContractFunction(ContractFunction):
    """ContractFunction for the getDeployerCoordinatorAtIndex method."""

    def __call__(self, index: int) -> HyperdriveFactoryGetDeployerCoordinatorAtIndexContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(index))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(str, rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryGetDeployerCoordinatorsInRangeContractFunction(ContractFunction):
    """ContractFunction for the getDeployerCoordinatorsInRange method."""

    def __call__(self, startIndex: int, endIndex: int) -> HyperdriveFactoryGetDeployerCoordinatorsInRangeContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(startIndex), dataclass_to_tuple(endIndex))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[str]:
        """returns list[str]."""
        # Define the expected return types from the smart contract call

        return_types = list[str]

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(list[str], rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryGetInstanceAtIndexContractFunction(ContractFunction):
    """ContractFunction for the getInstanceAtIndex method."""

    def __call__(self, index: int) -> HyperdriveFactoryGetInstanceAtIndexContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(index))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(str, rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryGetInstancesInRangeContractFunction(ContractFunction):
    """ContractFunction for the getInstancesInRange method."""

    def __call__(self, startIndex: int, endIndex: int) -> HyperdriveFactoryGetInstancesInRangeContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(startIndex), dataclass_to_tuple(endIndex))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[str]:
        """returns list[str]."""
        # Define the expected return types from the smart contract call

        return_types = list[str]

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(list[str], rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryGetNumberOfDeployerCoordinatorsContractFunction(ContractFunction):
    """ContractFunction for the getNumberOfDeployerCoordinators method."""

    def __call__(self) -> HyperdriveFactoryGetNumberOfDeployerCoordinatorsContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(int, rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryGetNumberOfInstancesContractFunction(ContractFunction):
    """ContractFunction for the getNumberOfInstances method."""

    def __call__(self) -> HyperdriveFactoryGetNumberOfInstancesContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(int, rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryGovernanceContractFunction(ContractFunction):
    """ContractFunction for the governance method."""

    def __call__(self) -> HyperdriveFactoryGovernanceContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(str, rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryHyperdriveGovernanceContractFunction(ContractFunction):
    """ContractFunction for the hyperdriveGovernance method."""

    def __call__(self) -> HyperdriveFactoryHyperdriveGovernanceContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(str, rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryInstancesToDeployerCoordinatorsContractFunction(ContractFunction):
    """ContractFunction for the instancesToDeployerCoordinators method."""

    def __call__(self, instance: str) -> HyperdriveFactoryInstancesToDeployerCoordinatorsContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(instance))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(str, rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryIsDeployerCoordinatorContractFunction(ContractFunction):
    """ContractFunction for the isDeployerCoordinator method."""

    def __call__(self, arg1: str) -> HyperdriveFactoryIsDeployerCoordinatorContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(arg1))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bool:
        """returns bool."""
        # Define the expected return types from the smart contract call

        return_types = bool

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(bool, rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryIsInstanceContractFunction(ContractFunction):
    """ContractFunction for the isInstance method."""

    def __call__(self, arg1: str) -> HyperdriveFactoryIsInstanceContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(arg1))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bool:
        """returns bool."""
        # Define the expected return types from the smart contract call

        return_types = bool

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(bool, rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryLinkerCodeHashContractFunction(ContractFunction):
    """ContractFunction for the linkerCodeHash method."""

    def __call__(self) -> HyperdriveFactoryLinkerCodeHashContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bytes:
        """returns bytes."""
        # Define the expected return types from the smart contract call

        return_types = bytes

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(bytes, rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryLinkerFactoryContractFunction(ContractFunction):
    """ContractFunction for the linkerFactory method."""

    def __call__(self) -> HyperdriveFactoryLinkerFactoryContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(str, rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryMaxCheckpointDurationContractFunction(ContractFunction):
    """ContractFunction for the maxCheckpointDuration method."""

    def __call__(self) -> HyperdriveFactoryMaxCheckpointDurationContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(int, rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryMaxFeesContractFunction(ContractFunction):
    """ContractFunction for the maxFees method."""

    def __call__(self) -> HyperdriveFactoryMaxFeesContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> Fees:
        """returns Fees."""
        # Define the expected return types from the smart contract call

        return_types = Fees

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(Fees, rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryMaxFixedAPRContractFunction(ContractFunction):
    """ContractFunction for the maxFixedAPR method."""

    def __call__(self) -> HyperdriveFactoryMaxFixedAPRContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(int, rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryMaxPositionDurationContractFunction(ContractFunction):
    """ContractFunction for the maxPositionDuration method."""

    def __call__(self) -> HyperdriveFactoryMaxPositionDurationContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(int, rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryMaxTimeStretchAPRContractFunction(ContractFunction):
    """ContractFunction for the maxTimeStretchAPR method."""

    def __call__(self) -> HyperdriveFactoryMaxTimeStretchAPRContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(int, rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryMinCheckpointDurationContractFunction(ContractFunction):
    """ContractFunction for the minCheckpointDuration method."""

    def __call__(self) -> HyperdriveFactoryMinCheckpointDurationContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(int, rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryMinFeesContractFunction(ContractFunction):
    """ContractFunction for the minFees method."""

    def __call__(self) -> HyperdriveFactoryMinFeesContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> Fees:
        """returns Fees."""
        # Define the expected return types from the smart contract call

        return_types = Fees

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(Fees, rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryMinFixedAPRContractFunction(ContractFunction):
    """ContractFunction for the minFixedAPR method."""

    def __call__(self) -> HyperdriveFactoryMinFixedAPRContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(int, rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryMinPositionDurationContractFunction(ContractFunction):
    """ContractFunction for the minPositionDuration method."""

    def __call__(self) -> HyperdriveFactoryMinPositionDurationContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(int, rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryMinTimeStretchAPRContractFunction(ContractFunction):
    """ContractFunction for the minTimeStretchAPR method."""

    def __call__(self) -> HyperdriveFactoryMinTimeStretchAPRContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(int, rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryRemoveDeployerCoordinatorContractFunction(ContractFunction):
    """ContractFunction for the removeDeployerCoordinator method."""

    def __call__(self, deployerCoordinator: str, index: int) -> HyperdriveFactoryRemoveDeployerCoordinatorContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(deployerCoordinator), dataclass_to_tuple(index))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class HyperdriveFactorySweepCollectorContractFunction(ContractFunction):
    """ContractFunction for the sweepCollector method."""

    def __call__(self) -> HyperdriveFactorySweepCollectorContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(str, rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryUpdateCheckpointDurationResolutionContractFunction(ContractFunction):
    """ContractFunction for the updateCheckpointDurationResolution method."""

    def __call__(self, checkpointDurationResolution: int) -> HyperdriveFactoryUpdateCheckpointDurationResolutionContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(checkpointDurationResolution))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class HyperdriveFactoryUpdateDefaultPausersContractFunction(ContractFunction):
    """ContractFunction for the updateDefaultPausers method."""

    def __call__(self, defaultPausers_: list[str]) -> HyperdriveFactoryUpdateDefaultPausersContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(defaultPausers_))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class HyperdriveFactoryUpdateFeeCollectorContractFunction(ContractFunction):
    """ContractFunction for the updateFeeCollector method."""

    def __call__(self, feeCollector: str) -> HyperdriveFactoryUpdateFeeCollectorContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(feeCollector))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class HyperdriveFactoryUpdateGovernanceContractFunction(ContractFunction):
    """ContractFunction for the updateGovernance method."""

    def __call__(self, governance: str) -> HyperdriveFactoryUpdateGovernanceContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(governance))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class HyperdriveFactoryUpdateHyperdriveGovernanceContractFunction(ContractFunction):
    """ContractFunction for the updateHyperdriveGovernance method."""

    def __call__(self, hyperdriveGovernance: str) -> HyperdriveFactoryUpdateHyperdriveGovernanceContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(hyperdriveGovernance))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class HyperdriveFactoryUpdateLinkerCodeHashContractFunction(ContractFunction):
    """ContractFunction for the updateLinkerCodeHash method."""

    def __call__(self, linkerCodeHash: bytes) -> HyperdriveFactoryUpdateLinkerCodeHashContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(linkerCodeHash))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class HyperdriveFactoryUpdateLinkerFactoryContractFunction(ContractFunction):
    """ContractFunction for the updateLinkerFactory method."""

    def __call__(self, linkerFactory: str) -> HyperdriveFactoryUpdateLinkerFactoryContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(linkerFactory))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class HyperdriveFactoryUpdateMaxCheckpointDurationContractFunction(ContractFunction):
    """ContractFunction for the updateMaxCheckpointDuration method."""

    def __call__(self, maxCheckpointDuration: int) -> HyperdriveFactoryUpdateMaxCheckpointDurationContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(maxCheckpointDuration))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class HyperdriveFactoryUpdateMaxFeesContractFunction(ContractFunction):
    """ContractFunction for the updateMaxFees method."""

    def __call__(self, maxFees: Fees) -> HyperdriveFactoryUpdateMaxFeesContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(maxFees))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class HyperdriveFactoryUpdateMaxFixedAPRContractFunction(ContractFunction):
    """ContractFunction for the updateMaxFixedAPR method."""

    def __call__(self, maxFixedAPR: int) -> HyperdriveFactoryUpdateMaxFixedAPRContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(maxFixedAPR))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class HyperdriveFactoryUpdateMaxPositionDurationContractFunction(ContractFunction):
    """ContractFunction for the updateMaxPositionDuration method."""

    def __call__(self, maxPositionDuration: int) -> HyperdriveFactoryUpdateMaxPositionDurationContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(maxPositionDuration))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class HyperdriveFactoryUpdateMaxTimeStretchAPRContractFunction(ContractFunction):
    """ContractFunction for the updateMaxTimeStretchAPR method."""

    def __call__(self, maxTimeStretchAPR: int) -> HyperdriveFactoryUpdateMaxTimeStretchAPRContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(maxTimeStretchAPR))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class HyperdriveFactoryUpdateMinCheckpointDurationContractFunction(ContractFunction):
    """ContractFunction for the updateMinCheckpointDuration method."""

    def __call__(self, minCheckpointDuration: int) -> HyperdriveFactoryUpdateMinCheckpointDurationContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(minCheckpointDuration))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class HyperdriveFactoryUpdateMinFeesContractFunction(ContractFunction):
    """ContractFunction for the updateMinFees method."""

    def __call__(self, minFees: Fees) -> HyperdriveFactoryUpdateMinFeesContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(minFees))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class HyperdriveFactoryUpdateMinFixedAPRContractFunction(ContractFunction):
    """ContractFunction for the updateMinFixedAPR method."""

    def __call__(self, minFixedAPR: int) -> HyperdriveFactoryUpdateMinFixedAPRContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(minFixedAPR))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class HyperdriveFactoryUpdateMinPositionDurationContractFunction(ContractFunction):
    """ContractFunction for the updateMinPositionDuration method."""

    def __call__(self, minPositionDuration: int) -> HyperdriveFactoryUpdateMinPositionDurationContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(minPositionDuration))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class HyperdriveFactoryUpdateMinTimeStretchAPRContractFunction(ContractFunction):
    """ContractFunction for the updateMinTimeStretchAPR method."""

    def __call__(self, minTimeStretchAPR: int) -> HyperdriveFactoryUpdateMinTimeStretchAPRContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(minTimeStretchAPR))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class HyperdriveFactoryUpdateSweepCollectorContractFunction(ContractFunction):
    """ContractFunction for the updateSweepCollector method."""

    def __call__(self, sweepCollector: str) -> HyperdriveFactoryUpdateSweepCollectorContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(sweepCollector))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class HyperdriveFactoryContractFunctions(ContractFunctions):
    """ContractFunctions for the HyperdriveFactory contract."""

    addDeployerCoordinator: HyperdriveFactoryAddDeployerCoordinatorContractFunction

    checkpointDurationResolution: HyperdriveFactoryCheckpointDurationResolutionContractFunction

    defaultPausers: HyperdriveFactoryDefaultPausersContractFunction

    deployAndInitialize: HyperdriveFactoryDeployAndInitializeContractFunction

    deployTarget: HyperdriveFactoryDeployTargetContractFunction

    feeCollector: HyperdriveFactoryFeeCollectorContractFunction

    getDeployerCoordinatorAtIndex: HyperdriveFactoryGetDeployerCoordinatorAtIndexContractFunction

    getDeployerCoordinatorsInRange: HyperdriveFactoryGetDeployerCoordinatorsInRangeContractFunction

    getInstanceAtIndex: HyperdriveFactoryGetInstanceAtIndexContractFunction

    getInstancesInRange: HyperdriveFactoryGetInstancesInRangeContractFunction

    getNumberOfDeployerCoordinators: HyperdriveFactoryGetNumberOfDeployerCoordinatorsContractFunction

    getNumberOfInstances: HyperdriveFactoryGetNumberOfInstancesContractFunction

    governance: HyperdriveFactoryGovernanceContractFunction

    hyperdriveGovernance: HyperdriveFactoryHyperdriveGovernanceContractFunction

    instancesToDeployerCoordinators: HyperdriveFactoryInstancesToDeployerCoordinatorsContractFunction

    isDeployerCoordinator: HyperdriveFactoryIsDeployerCoordinatorContractFunction

    isInstance: HyperdriveFactoryIsInstanceContractFunction

    linkerCodeHash: HyperdriveFactoryLinkerCodeHashContractFunction

    linkerFactory: HyperdriveFactoryLinkerFactoryContractFunction

    maxCheckpointDuration: HyperdriveFactoryMaxCheckpointDurationContractFunction

    maxFees: HyperdriveFactoryMaxFeesContractFunction

    maxFixedAPR: HyperdriveFactoryMaxFixedAPRContractFunction

    maxPositionDuration: HyperdriveFactoryMaxPositionDurationContractFunction

    maxTimeStretchAPR: HyperdriveFactoryMaxTimeStretchAPRContractFunction

    minCheckpointDuration: HyperdriveFactoryMinCheckpointDurationContractFunction

    minFees: HyperdriveFactoryMinFeesContractFunction

    minFixedAPR: HyperdriveFactoryMinFixedAPRContractFunction

    minPositionDuration: HyperdriveFactoryMinPositionDurationContractFunction

    minTimeStretchAPR: HyperdriveFactoryMinTimeStretchAPRContractFunction

    removeDeployerCoordinator: HyperdriveFactoryRemoveDeployerCoordinatorContractFunction

    sweepCollector: HyperdriveFactorySweepCollectorContractFunction

    updateCheckpointDurationResolution: HyperdriveFactoryUpdateCheckpointDurationResolutionContractFunction

    updateDefaultPausers: HyperdriveFactoryUpdateDefaultPausersContractFunction

    updateFeeCollector: HyperdriveFactoryUpdateFeeCollectorContractFunction

    updateGovernance: HyperdriveFactoryUpdateGovernanceContractFunction

    updateHyperdriveGovernance: HyperdriveFactoryUpdateHyperdriveGovernanceContractFunction

    updateLinkerCodeHash: HyperdriveFactoryUpdateLinkerCodeHashContractFunction

    updateLinkerFactory: HyperdriveFactoryUpdateLinkerFactoryContractFunction

    updateMaxCheckpointDuration: HyperdriveFactoryUpdateMaxCheckpointDurationContractFunction

    updateMaxFees: HyperdriveFactoryUpdateMaxFeesContractFunction

    updateMaxFixedAPR: HyperdriveFactoryUpdateMaxFixedAPRContractFunction

    updateMaxPositionDuration: HyperdriveFactoryUpdateMaxPositionDurationContractFunction

    updateMaxTimeStretchAPR: HyperdriveFactoryUpdateMaxTimeStretchAPRContractFunction

    updateMinCheckpointDuration: HyperdriveFactoryUpdateMinCheckpointDurationContractFunction

    updateMinFees: HyperdriveFactoryUpdateMinFeesContractFunction

    updateMinFixedAPR: HyperdriveFactoryUpdateMinFixedAPRContractFunction

    updateMinPositionDuration: HyperdriveFactoryUpdateMinPositionDurationContractFunction

    updateMinTimeStretchAPR: HyperdriveFactoryUpdateMinTimeStretchAPRContractFunction

    updateSweepCollector: HyperdriveFactoryUpdateSweepCollectorContractFunction

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
        decode_tuples: bool | None = False,
    ) -> None:
        super().__init__(abi, w3, address, decode_tuples)
        self.addDeployerCoordinator = HyperdriveFactoryAddDeployerCoordinatorContractFunction.factory(
            "addDeployerCoordinator",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="addDeployerCoordinator",
        )
        self.checkpointDurationResolution = HyperdriveFactoryCheckpointDurationResolutionContractFunction.factory(
            "checkpointDurationResolution",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="checkpointDurationResolution",
        )
        self.defaultPausers = HyperdriveFactoryDefaultPausersContractFunction.factory(
            "defaultPausers",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="defaultPausers",
        )
        self.deployAndInitialize = HyperdriveFactoryDeployAndInitializeContractFunction.factory(
            "deployAndInitialize",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="deployAndInitialize",
        )
        self.deployTarget = HyperdriveFactoryDeployTargetContractFunction.factory(
            "deployTarget",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="deployTarget",
        )
        self.feeCollector = HyperdriveFactoryFeeCollectorContractFunction.factory(
            "feeCollector",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="feeCollector",
        )
        self.getDeployerCoordinatorAtIndex = HyperdriveFactoryGetDeployerCoordinatorAtIndexContractFunction.factory(
            "getDeployerCoordinatorAtIndex",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="getDeployerCoordinatorAtIndex",
        )
        self.getDeployerCoordinatorsInRange = HyperdriveFactoryGetDeployerCoordinatorsInRangeContractFunction.factory(
            "getDeployerCoordinatorsInRange",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="getDeployerCoordinatorsInRange",
        )
        self.getInstanceAtIndex = HyperdriveFactoryGetInstanceAtIndexContractFunction.factory(
            "getInstanceAtIndex",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="getInstanceAtIndex",
        )
        self.getInstancesInRange = HyperdriveFactoryGetInstancesInRangeContractFunction.factory(
            "getInstancesInRange",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="getInstancesInRange",
        )
        self.getNumberOfDeployerCoordinators = HyperdriveFactoryGetNumberOfDeployerCoordinatorsContractFunction.factory(
            "getNumberOfDeployerCoordinators",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="getNumberOfDeployerCoordinators",
        )
        self.getNumberOfInstances = HyperdriveFactoryGetNumberOfInstancesContractFunction.factory(
            "getNumberOfInstances",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="getNumberOfInstances",
        )
        self.governance = HyperdriveFactoryGovernanceContractFunction.factory(
            "governance",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="governance",
        )
        self.hyperdriveGovernance = HyperdriveFactoryHyperdriveGovernanceContractFunction.factory(
            "hyperdriveGovernance",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="hyperdriveGovernance",
        )
        self.instancesToDeployerCoordinators = HyperdriveFactoryInstancesToDeployerCoordinatorsContractFunction.factory(
            "instancesToDeployerCoordinators",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="instancesToDeployerCoordinators",
        )
        self.isDeployerCoordinator = HyperdriveFactoryIsDeployerCoordinatorContractFunction.factory(
            "isDeployerCoordinator",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="isDeployerCoordinator",
        )
        self.isInstance = HyperdriveFactoryIsInstanceContractFunction.factory(
            "isInstance",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="isInstance",
        )
        self.linkerCodeHash = HyperdriveFactoryLinkerCodeHashContractFunction.factory(
            "linkerCodeHash",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="linkerCodeHash",
        )
        self.linkerFactory = HyperdriveFactoryLinkerFactoryContractFunction.factory(
            "linkerFactory",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="linkerFactory",
        )
        self.maxCheckpointDuration = HyperdriveFactoryMaxCheckpointDurationContractFunction.factory(
            "maxCheckpointDuration",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="maxCheckpointDuration",
        )
        self.maxFees = HyperdriveFactoryMaxFeesContractFunction.factory(
            "maxFees",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="maxFees",
        )
        self.maxFixedAPR = HyperdriveFactoryMaxFixedAPRContractFunction.factory(
            "maxFixedAPR",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="maxFixedAPR",
        )
        self.maxPositionDuration = HyperdriveFactoryMaxPositionDurationContractFunction.factory(
            "maxPositionDuration",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="maxPositionDuration",
        )
        self.maxTimeStretchAPR = HyperdriveFactoryMaxTimeStretchAPRContractFunction.factory(
            "maxTimeStretchAPR",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="maxTimeStretchAPR",
        )
        self.minCheckpointDuration = HyperdriveFactoryMinCheckpointDurationContractFunction.factory(
            "minCheckpointDuration",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="minCheckpointDuration",
        )
        self.minFees = HyperdriveFactoryMinFeesContractFunction.factory(
            "minFees",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="minFees",
        )
        self.minFixedAPR = HyperdriveFactoryMinFixedAPRContractFunction.factory(
            "minFixedAPR",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="minFixedAPR",
        )
        self.minPositionDuration = HyperdriveFactoryMinPositionDurationContractFunction.factory(
            "minPositionDuration",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="minPositionDuration",
        )
        self.minTimeStretchAPR = HyperdriveFactoryMinTimeStretchAPRContractFunction.factory(
            "minTimeStretchAPR",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="minTimeStretchAPR",
        )
        self.removeDeployerCoordinator = HyperdriveFactoryRemoveDeployerCoordinatorContractFunction.factory(
            "removeDeployerCoordinator",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="removeDeployerCoordinator",
        )
        self.sweepCollector = HyperdriveFactorySweepCollectorContractFunction.factory(
            "sweepCollector",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="sweepCollector",
        )
        self.updateCheckpointDurationResolution = (
            HyperdriveFactoryUpdateCheckpointDurationResolutionContractFunction.factory(
                "updateCheckpointDurationResolution",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                function_identifier="updateCheckpointDurationResolution",
            )
        )
        self.updateDefaultPausers = HyperdriveFactoryUpdateDefaultPausersContractFunction.factory(
            "updateDefaultPausers",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="updateDefaultPausers",
        )
        self.updateFeeCollector = HyperdriveFactoryUpdateFeeCollectorContractFunction.factory(
            "updateFeeCollector",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="updateFeeCollector",
        )
        self.updateGovernance = HyperdriveFactoryUpdateGovernanceContractFunction.factory(
            "updateGovernance",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="updateGovernance",
        )
        self.updateHyperdriveGovernance = HyperdriveFactoryUpdateHyperdriveGovernanceContractFunction.factory(
            "updateHyperdriveGovernance",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="updateHyperdriveGovernance",
        )
        self.updateLinkerCodeHash = HyperdriveFactoryUpdateLinkerCodeHashContractFunction.factory(
            "updateLinkerCodeHash",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="updateLinkerCodeHash",
        )
        self.updateLinkerFactory = HyperdriveFactoryUpdateLinkerFactoryContractFunction.factory(
            "updateLinkerFactory",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="updateLinkerFactory",
        )
        self.updateMaxCheckpointDuration = HyperdriveFactoryUpdateMaxCheckpointDurationContractFunction.factory(
            "updateMaxCheckpointDuration",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="updateMaxCheckpointDuration",
        )
        self.updateMaxFees = HyperdriveFactoryUpdateMaxFeesContractFunction.factory(
            "updateMaxFees",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="updateMaxFees",
        )
        self.updateMaxFixedAPR = HyperdriveFactoryUpdateMaxFixedAPRContractFunction.factory(
            "updateMaxFixedAPR",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="updateMaxFixedAPR",
        )
        self.updateMaxPositionDuration = HyperdriveFactoryUpdateMaxPositionDurationContractFunction.factory(
            "updateMaxPositionDuration",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="updateMaxPositionDuration",
        )
        self.updateMaxTimeStretchAPR = HyperdriveFactoryUpdateMaxTimeStretchAPRContractFunction.factory(
            "updateMaxTimeStretchAPR",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="updateMaxTimeStretchAPR",
        )
        self.updateMinCheckpointDuration = HyperdriveFactoryUpdateMinCheckpointDurationContractFunction.factory(
            "updateMinCheckpointDuration",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="updateMinCheckpointDuration",
        )
        self.updateMinFees = HyperdriveFactoryUpdateMinFeesContractFunction.factory(
            "updateMinFees",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="updateMinFees",
        )
        self.updateMinFixedAPR = HyperdriveFactoryUpdateMinFixedAPRContractFunction.factory(
            "updateMinFixedAPR",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="updateMinFixedAPR",
        )
        self.updateMinPositionDuration = HyperdriveFactoryUpdateMinPositionDurationContractFunction.factory(
            "updateMinPositionDuration",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="updateMinPositionDuration",
        )
        self.updateMinTimeStretchAPR = HyperdriveFactoryUpdateMinTimeStretchAPRContractFunction.factory(
            "updateMinTimeStretchAPR",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="updateMinTimeStretchAPR",
        )
        self.updateSweepCollector = HyperdriveFactoryUpdateSweepCollectorContractFunction.factory(
            "updateSweepCollector",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="updateSweepCollector",
        )


class HyperdriveFactoryCheckpointDurationResolutionUpdatedContractEvent(ContractEvent):
    """ContractEvent for CheckpointDurationResolutionUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "HyperdriveFactoryCheckpointDurationResolutionUpdatedContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["HyperdriveFactoryCheckpointDurationResolutionUpdatedContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "HyperdriveFactoryCheckpointDurationResolutionUpdatedContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["HyperdriveFactoryCheckpointDurationResolutionUpdatedContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class HyperdriveFactoryDefaultPausersUpdatedContractEvent(ContractEvent):
    """ContractEvent for DefaultPausersUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "HyperdriveFactoryDefaultPausersUpdatedContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["HyperdriveFactoryDefaultPausersUpdatedContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "HyperdriveFactoryDefaultPausersUpdatedContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["HyperdriveFactoryDefaultPausersUpdatedContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class HyperdriveFactoryDeployedContractEvent(ContractEvent):
    """ContractEvent for Deployed."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "HyperdriveFactoryDeployedContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["HyperdriveFactoryDeployedContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "HyperdriveFactoryDeployedContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["HyperdriveFactoryDeployedContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class HyperdriveFactoryDeployerCoordinatorAddedContractEvent(ContractEvent):
    """ContractEvent for DeployerCoordinatorAdded."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "HyperdriveFactoryDeployerCoordinatorAddedContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["HyperdriveFactoryDeployerCoordinatorAddedContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "HyperdriveFactoryDeployerCoordinatorAddedContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["HyperdriveFactoryDeployerCoordinatorAddedContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class HyperdriveFactoryDeployerCoordinatorRemovedContractEvent(ContractEvent):
    """ContractEvent for DeployerCoordinatorRemoved."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "HyperdriveFactoryDeployerCoordinatorRemovedContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["HyperdriveFactoryDeployerCoordinatorRemovedContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "HyperdriveFactoryDeployerCoordinatorRemovedContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["HyperdriveFactoryDeployerCoordinatorRemovedContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class HyperdriveFactoryFeeCollectorUpdatedContractEvent(ContractEvent):
    """ContractEvent for FeeCollectorUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "HyperdriveFactoryFeeCollectorUpdatedContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["HyperdriveFactoryFeeCollectorUpdatedContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "HyperdriveFactoryFeeCollectorUpdatedContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["HyperdriveFactoryFeeCollectorUpdatedContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class HyperdriveFactoryGovernanceUpdatedContractEvent(ContractEvent):
    """ContractEvent for GovernanceUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "HyperdriveFactoryGovernanceUpdatedContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["HyperdriveFactoryGovernanceUpdatedContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "HyperdriveFactoryGovernanceUpdatedContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["HyperdriveFactoryGovernanceUpdatedContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class HyperdriveFactoryHyperdriveGovernanceUpdatedContractEvent(ContractEvent):
    """ContractEvent for HyperdriveGovernanceUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "HyperdriveFactoryHyperdriveGovernanceUpdatedContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["HyperdriveFactoryHyperdriveGovernanceUpdatedContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "HyperdriveFactoryHyperdriveGovernanceUpdatedContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["HyperdriveFactoryHyperdriveGovernanceUpdatedContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class HyperdriveFactoryLinkerCodeHashUpdatedContractEvent(ContractEvent):
    """ContractEvent for LinkerCodeHashUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "HyperdriveFactoryLinkerCodeHashUpdatedContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["HyperdriveFactoryLinkerCodeHashUpdatedContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "HyperdriveFactoryLinkerCodeHashUpdatedContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["HyperdriveFactoryLinkerCodeHashUpdatedContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class HyperdriveFactoryLinkerFactoryUpdatedContractEvent(ContractEvent):
    """ContractEvent for LinkerFactoryUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "HyperdriveFactoryLinkerFactoryUpdatedContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["HyperdriveFactoryLinkerFactoryUpdatedContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "HyperdriveFactoryLinkerFactoryUpdatedContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["HyperdriveFactoryLinkerFactoryUpdatedContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class HyperdriveFactoryMaxCheckpointDurationUpdatedContractEvent(ContractEvent):
    """ContractEvent for MaxCheckpointDurationUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "HyperdriveFactoryMaxCheckpointDurationUpdatedContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["HyperdriveFactoryMaxCheckpointDurationUpdatedContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "HyperdriveFactoryMaxCheckpointDurationUpdatedContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["HyperdriveFactoryMaxCheckpointDurationUpdatedContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class HyperdriveFactoryMaxFeesUpdatedContractEvent(ContractEvent):
    """ContractEvent for MaxFeesUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "HyperdriveFactoryMaxFeesUpdatedContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["HyperdriveFactoryMaxFeesUpdatedContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "HyperdriveFactoryMaxFeesUpdatedContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["HyperdriveFactoryMaxFeesUpdatedContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class HyperdriveFactoryMaxFixedAPRUpdatedContractEvent(ContractEvent):
    """ContractEvent for MaxFixedAPRUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "HyperdriveFactoryMaxFixedAPRUpdatedContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["HyperdriveFactoryMaxFixedAPRUpdatedContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "HyperdriveFactoryMaxFixedAPRUpdatedContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["HyperdriveFactoryMaxFixedAPRUpdatedContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class HyperdriveFactoryMaxPositionDurationUpdatedContractEvent(ContractEvent):
    """ContractEvent for MaxPositionDurationUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "HyperdriveFactoryMaxPositionDurationUpdatedContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["HyperdriveFactoryMaxPositionDurationUpdatedContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "HyperdriveFactoryMaxPositionDurationUpdatedContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["HyperdriveFactoryMaxPositionDurationUpdatedContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class HyperdriveFactoryMaxTimeStretchAPRUpdatedContractEvent(ContractEvent):
    """ContractEvent for MaxTimeStretchAPRUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "HyperdriveFactoryMaxTimeStretchAPRUpdatedContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["HyperdriveFactoryMaxTimeStretchAPRUpdatedContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "HyperdriveFactoryMaxTimeStretchAPRUpdatedContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["HyperdriveFactoryMaxTimeStretchAPRUpdatedContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class HyperdriveFactoryMinCheckpointDurationUpdatedContractEvent(ContractEvent):
    """ContractEvent for MinCheckpointDurationUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "HyperdriveFactoryMinCheckpointDurationUpdatedContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["HyperdriveFactoryMinCheckpointDurationUpdatedContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "HyperdriveFactoryMinCheckpointDurationUpdatedContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["HyperdriveFactoryMinCheckpointDurationUpdatedContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class HyperdriveFactoryMinFeesUpdatedContractEvent(ContractEvent):
    """ContractEvent for MinFeesUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "HyperdriveFactoryMinFeesUpdatedContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["HyperdriveFactoryMinFeesUpdatedContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "HyperdriveFactoryMinFeesUpdatedContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["HyperdriveFactoryMinFeesUpdatedContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class HyperdriveFactoryMinFixedAPRUpdatedContractEvent(ContractEvent):
    """ContractEvent for MinFixedAPRUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "HyperdriveFactoryMinFixedAPRUpdatedContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["HyperdriveFactoryMinFixedAPRUpdatedContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "HyperdriveFactoryMinFixedAPRUpdatedContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["HyperdriveFactoryMinFixedAPRUpdatedContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class HyperdriveFactoryMinPositionDurationUpdatedContractEvent(ContractEvent):
    """ContractEvent for MinPositionDurationUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "HyperdriveFactoryMinPositionDurationUpdatedContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["HyperdriveFactoryMinPositionDurationUpdatedContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "HyperdriveFactoryMinPositionDurationUpdatedContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["HyperdriveFactoryMinPositionDurationUpdatedContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class HyperdriveFactoryMinTimeStretchAPRUpdatedContractEvent(ContractEvent):
    """ContractEvent for MinTimeStretchAPRUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "HyperdriveFactoryMinTimeStretchAPRUpdatedContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["HyperdriveFactoryMinTimeStretchAPRUpdatedContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "HyperdriveFactoryMinTimeStretchAPRUpdatedContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["HyperdriveFactoryMinTimeStretchAPRUpdatedContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class HyperdriveFactorySweepCollectorUpdatedContractEvent(ContractEvent):
    """ContractEvent for SweepCollectorUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "HyperdriveFactorySweepCollectorUpdatedContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["HyperdriveFactorySweepCollectorUpdatedContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "HyperdriveFactorySweepCollectorUpdatedContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["HyperdriveFactorySweepCollectorUpdatedContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class HyperdriveFactoryContractEvents(ContractEvents):
    """ContractEvents for the HyperdriveFactory contract."""

    CheckpointDurationResolutionUpdated: HyperdriveFactoryCheckpointDurationResolutionUpdatedContractEvent

    DefaultPausersUpdated: HyperdriveFactoryDefaultPausersUpdatedContractEvent

    Deployed: HyperdriveFactoryDeployedContractEvent

    DeployerCoordinatorAdded: HyperdriveFactoryDeployerCoordinatorAddedContractEvent

    DeployerCoordinatorRemoved: HyperdriveFactoryDeployerCoordinatorRemovedContractEvent

    FeeCollectorUpdated: HyperdriveFactoryFeeCollectorUpdatedContractEvent

    GovernanceUpdated: HyperdriveFactoryGovernanceUpdatedContractEvent

    HyperdriveGovernanceUpdated: HyperdriveFactoryHyperdriveGovernanceUpdatedContractEvent

    LinkerCodeHashUpdated: HyperdriveFactoryLinkerCodeHashUpdatedContractEvent

    LinkerFactoryUpdated: HyperdriveFactoryLinkerFactoryUpdatedContractEvent

    MaxCheckpointDurationUpdated: HyperdriveFactoryMaxCheckpointDurationUpdatedContractEvent

    MaxFeesUpdated: HyperdriveFactoryMaxFeesUpdatedContractEvent

    MaxFixedAPRUpdated: HyperdriveFactoryMaxFixedAPRUpdatedContractEvent

    MaxPositionDurationUpdated: HyperdriveFactoryMaxPositionDurationUpdatedContractEvent

    MaxTimeStretchAPRUpdated: HyperdriveFactoryMaxTimeStretchAPRUpdatedContractEvent

    MinCheckpointDurationUpdated: HyperdriveFactoryMinCheckpointDurationUpdatedContractEvent

    MinFeesUpdated: HyperdriveFactoryMinFeesUpdatedContractEvent

    MinFixedAPRUpdated: HyperdriveFactoryMinFixedAPRUpdatedContractEvent

    MinPositionDurationUpdated: HyperdriveFactoryMinPositionDurationUpdatedContractEvent

    MinTimeStretchAPRUpdated: HyperdriveFactoryMinTimeStretchAPRUpdatedContractEvent

    SweepCollectorUpdated: HyperdriveFactorySweepCollectorUpdatedContractEvent

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
    ) -> None:
        super().__init__(abi, w3, address)
        self.CheckpointDurationResolutionUpdated = cast(
            HyperdriveFactoryCheckpointDurationResolutionUpdatedContractEvent,
            HyperdriveFactoryCheckpointDurationResolutionUpdatedContractEvent.factory(
                "CheckpointDurationResolutionUpdated",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="CheckpointDurationResolutionUpdated",
            ),
        )
        self.DefaultPausersUpdated = cast(
            HyperdriveFactoryDefaultPausersUpdatedContractEvent,
            HyperdriveFactoryDefaultPausersUpdatedContractEvent.factory(
                "DefaultPausersUpdated", w3=w3, contract_abi=abi, address=address, event_name="DefaultPausersUpdated"
            ),
        )
        self.Deployed = cast(
            HyperdriveFactoryDeployedContractEvent,
            HyperdriveFactoryDeployedContractEvent.factory(
                "Deployed", w3=w3, contract_abi=abi, address=address, event_name="Deployed"
            ),
        )
        self.DeployerCoordinatorAdded = cast(
            HyperdriveFactoryDeployerCoordinatorAddedContractEvent,
            HyperdriveFactoryDeployerCoordinatorAddedContractEvent.factory(
                "DeployerCoordinatorAdded",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="DeployerCoordinatorAdded",
            ),
        )
        self.DeployerCoordinatorRemoved = cast(
            HyperdriveFactoryDeployerCoordinatorRemovedContractEvent,
            HyperdriveFactoryDeployerCoordinatorRemovedContractEvent.factory(
                "DeployerCoordinatorRemoved",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="DeployerCoordinatorRemoved",
            ),
        )
        self.FeeCollectorUpdated = cast(
            HyperdriveFactoryFeeCollectorUpdatedContractEvent,
            HyperdriveFactoryFeeCollectorUpdatedContractEvent.factory(
                "FeeCollectorUpdated", w3=w3, contract_abi=abi, address=address, event_name="FeeCollectorUpdated"
            ),
        )
        self.GovernanceUpdated = cast(
            HyperdriveFactoryGovernanceUpdatedContractEvent,
            HyperdriveFactoryGovernanceUpdatedContractEvent.factory(
                "GovernanceUpdated", w3=w3, contract_abi=abi, address=address, event_name="GovernanceUpdated"
            ),
        )
        self.HyperdriveGovernanceUpdated = cast(
            HyperdriveFactoryHyperdriveGovernanceUpdatedContractEvent,
            HyperdriveFactoryHyperdriveGovernanceUpdatedContractEvent.factory(
                "HyperdriveGovernanceUpdated",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="HyperdriveGovernanceUpdated",
            ),
        )
        self.LinkerCodeHashUpdated = cast(
            HyperdriveFactoryLinkerCodeHashUpdatedContractEvent,
            HyperdriveFactoryLinkerCodeHashUpdatedContractEvent.factory(
                "LinkerCodeHashUpdated", w3=w3, contract_abi=abi, address=address, event_name="LinkerCodeHashUpdated"
            ),
        )
        self.LinkerFactoryUpdated = cast(
            HyperdriveFactoryLinkerFactoryUpdatedContractEvent,
            HyperdriveFactoryLinkerFactoryUpdatedContractEvent.factory(
                "LinkerFactoryUpdated", w3=w3, contract_abi=abi, address=address, event_name="LinkerFactoryUpdated"
            ),
        )
        self.MaxCheckpointDurationUpdated = cast(
            HyperdriveFactoryMaxCheckpointDurationUpdatedContractEvent,
            HyperdriveFactoryMaxCheckpointDurationUpdatedContractEvent.factory(
                "MaxCheckpointDurationUpdated",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="MaxCheckpointDurationUpdated",
            ),
        )
        self.MaxFeesUpdated = cast(
            HyperdriveFactoryMaxFeesUpdatedContractEvent,
            HyperdriveFactoryMaxFeesUpdatedContractEvent.factory(
                "MaxFeesUpdated", w3=w3, contract_abi=abi, address=address, event_name="MaxFeesUpdated"
            ),
        )
        self.MaxFixedAPRUpdated = cast(
            HyperdriveFactoryMaxFixedAPRUpdatedContractEvent,
            HyperdriveFactoryMaxFixedAPRUpdatedContractEvent.factory(
                "MaxFixedAPRUpdated", w3=w3, contract_abi=abi, address=address, event_name="MaxFixedAPRUpdated"
            ),
        )
        self.MaxPositionDurationUpdated = cast(
            HyperdriveFactoryMaxPositionDurationUpdatedContractEvent,
            HyperdriveFactoryMaxPositionDurationUpdatedContractEvent.factory(
                "MaxPositionDurationUpdated",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="MaxPositionDurationUpdated",
            ),
        )
        self.MaxTimeStretchAPRUpdated = cast(
            HyperdriveFactoryMaxTimeStretchAPRUpdatedContractEvent,
            HyperdriveFactoryMaxTimeStretchAPRUpdatedContractEvent.factory(
                "MaxTimeStretchAPRUpdated",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="MaxTimeStretchAPRUpdated",
            ),
        )
        self.MinCheckpointDurationUpdated = cast(
            HyperdriveFactoryMinCheckpointDurationUpdatedContractEvent,
            HyperdriveFactoryMinCheckpointDurationUpdatedContractEvent.factory(
                "MinCheckpointDurationUpdated",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="MinCheckpointDurationUpdated",
            ),
        )
        self.MinFeesUpdated = cast(
            HyperdriveFactoryMinFeesUpdatedContractEvent,
            HyperdriveFactoryMinFeesUpdatedContractEvent.factory(
                "MinFeesUpdated", w3=w3, contract_abi=abi, address=address, event_name="MinFeesUpdated"
            ),
        )
        self.MinFixedAPRUpdated = cast(
            HyperdriveFactoryMinFixedAPRUpdatedContractEvent,
            HyperdriveFactoryMinFixedAPRUpdatedContractEvent.factory(
                "MinFixedAPRUpdated", w3=w3, contract_abi=abi, address=address, event_name="MinFixedAPRUpdated"
            ),
        )
        self.MinPositionDurationUpdated = cast(
            HyperdriveFactoryMinPositionDurationUpdatedContractEvent,
            HyperdriveFactoryMinPositionDurationUpdatedContractEvent.factory(
                "MinPositionDurationUpdated",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="MinPositionDurationUpdated",
            ),
        )
        self.MinTimeStretchAPRUpdated = cast(
            HyperdriveFactoryMinTimeStretchAPRUpdatedContractEvent,
            HyperdriveFactoryMinTimeStretchAPRUpdatedContractEvent.factory(
                "MinTimeStretchAPRUpdated",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="MinTimeStretchAPRUpdated",
            ),
        )
        self.SweepCollectorUpdated = cast(
            HyperdriveFactorySweepCollectorUpdatedContractEvent,
            HyperdriveFactorySweepCollectorUpdatedContractEvent.factory(
                "SweepCollectorUpdated", w3=w3, contract_abi=abi, address=address, event_name="SweepCollectorUpdated"
            ),
        )


class HyperdriveFactoryDeployerCoordinatorAlreadyAddedContractError:
    """ContractError for DeployerCoordinatorAlreadyAdded."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveFactoryDeployerCoordinatorAlreadyAddedContractError",
    ) -> None:
        self.selector = "0xbd34634f"
        self.signature = "DeployerCoordinatorAlreadyAdded()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveFactoryDeployerCoordinatorAlreadyAddedContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "DeployerCoordinatorAlreadyAdded" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveFactoryDeployerCoordinatorAlreadyAddedContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "DeployerCoordinatorAlreadyAdded" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveFactoryDeployerCoordinatorIndexMismatchContractError:
    """ContractError for DeployerCoordinatorIndexMismatch."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveFactoryDeployerCoordinatorIndexMismatchContractError",
    ) -> None:
        self.selector = "0x3c9c032c"
        self.signature = "DeployerCoordinatorIndexMismatch()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveFactoryDeployerCoordinatorIndexMismatchContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "DeployerCoordinatorIndexMismatch" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveFactoryDeployerCoordinatorIndexMismatchContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "DeployerCoordinatorIndexMismatch" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveFactoryDeployerCoordinatorNotAddedContractError:
    """ContractError for DeployerCoordinatorNotAdded."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveFactoryDeployerCoordinatorNotAddedContractError",
    ) -> None:
        self.selector = "0x4bf121ab"
        self.signature = "DeployerCoordinatorNotAdded()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveFactoryDeployerCoordinatorNotAddedContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "DeployerCoordinatorNotAdded" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveFactoryDeployerCoordinatorNotAddedContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "DeployerCoordinatorNotAdded" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveFactoryEndIndexTooLargeContractError:
    """ContractError for EndIndexTooLarge."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveFactoryEndIndexTooLargeContractError",
    ) -> None:
        self.selector = "0xe0f7becb"
        self.signature = "EndIndexTooLarge()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveFactoryEndIndexTooLargeContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "EndIndexTooLarge" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveFactoryEndIndexTooLargeContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "EndIndexTooLarge" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveFactoryInvalidCheckpointDurationContractError:
    """ContractError for InvalidCheckpointDuration."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveFactoryInvalidCheckpointDurationContractError",
    ) -> None:
        self.selector = "0x5428734d"
        self.signature = "InvalidCheckpointDuration()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveFactoryInvalidCheckpointDurationContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidCheckpointDuration" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveFactoryInvalidCheckpointDurationContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidCheckpointDuration" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveFactoryInvalidCheckpointDurationResolutionContractError:
    """ContractError for InvalidCheckpointDurationResolution."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveFactoryInvalidCheckpointDurationResolutionContractError",
    ) -> None:
        self.selector = "0x8dbae0a8"
        self.signature = "InvalidCheckpointDurationResolution()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveFactoryInvalidCheckpointDurationResolutionContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidCheckpointDurationResolution" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveFactoryInvalidCheckpointDurationResolutionContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidCheckpointDurationResolution" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveFactoryInvalidDeployConfigContractError:
    """ContractError for InvalidDeployConfig."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveFactoryInvalidDeployConfigContractError",
    ) -> None:
        self.selector = "0xe8c02dd7"
        self.signature = "InvalidDeployConfig()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveFactoryInvalidDeployConfigContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidDeployConfig" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveFactoryInvalidDeployConfigContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidDeployConfig" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveFactoryInvalidDeployerCoordinatorContractError:
    """ContractError for InvalidDeployerCoordinator."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveFactoryInvalidDeployerCoordinatorContractError",
    ) -> None:
        self.selector = "0x6e623f0f"
        self.signature = "InvalidDeployerCoordinator()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveFactoryInvalidDeployerCoordinatorContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidDeployerCoordinator" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveFactoryInvalidDeployerCoordinatorContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidDeployerCoordinator" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveFactoryInvalidFeesContractError:
    """ContractError for InvalidFees."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveFactoryInvalidFeesContractError",
    ) -> None:
        self.selector = "0x2d8768f9"
        self.signature = "InvalidFees()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveFactoryInvalidFeesContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidFees" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveFactoryInvalidFeesContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidFees" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveFactoryInvalidFixedAPRContractError:
    """ContractError for InvalidFixedAPR."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveFactoryInvalidFixedAPRContractError",
    ) -> None:
        self.selector = "0x30554de1"
        self.signature = "InvalidFixedAPR()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveFactoryInvalidFixedAPRContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidFixedAPR" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveFactoryInvalidFixedAPRContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidFixedAPR" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveFactoryInvalidIndexesContractError:
    """ContractError for InvalidIndexes."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveFactoryInvalidIndexesContractError",
    ) -> None:
        self.selector = "0x764e6b56"
        self.signature = "InvalidIndexes()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveFactoryInvalidIndexesContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidIndexes" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveFactoryInvalidIndexesContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidIndexes" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveFactoryInvalidMaxCheckpointDurationContractError:
    """ContractError for InvalidMaxCheckpointDuration."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveFactoryInvalidMaxCheckpointDurationContractError",
    ) -> None:
        self.selector = "0xf9c0959d"
        self.signature = "InvalidMaxCheckpointDuration()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveFactoryInvalidMaxCheckpointDurationContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidMaxCheckpointDuration" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveFactoryInvalidMaxCheckpointDurationContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidMaxCheckpointDuration" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveFactoryInvalidMaxFeesContractError:
    """ContractError for InvalidMaxFees."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveFactoryInvalidMaxFeesContractError",
    ) -> None:
        self.selector = "0x2c20e3f6"
        self.signature = "InvalidMaxFees()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveFactoryInvalidMaxFeesContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidMaxFees" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveFactoryInvalidMaxFeesContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidMaxFees" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveFactoryInvalidMaxFixedAPRContractError:
    """ContractError for InvalidMaxFixedAPR."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveFactoryInvalidMaxFixedAPRContractError",
    ) -> None:
        self.selector = "0x673edec0"
        self.signature = "InvalidMaxFixedAPR()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveFactoryInvalidMaxFixedAPRContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidMaxFixedAPR" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveFactoryInvalidMaxFixedAPRContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidMaxFixedAPR" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveFactoryInvalidMaxPositionDurationContractError:
    """ContractError for InvalidMaxPositionDuration."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveFactoryInvalidMaxPositionDurationContractError",
    ) -> None:
        self.selector = "0xcfb699cb"
        self.signature = "InvalidMaxPositionDuration()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveFactoryInvalidMaxPositionDurationContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidMaxPositionDuration" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveFactoryInvalidMaxPositionDurationContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidMaxPositionDuration" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveFactoryInvalidMaxTimeStretchAPRContractError:
    """ContractError for InvalidMaxTimeStretchAPR."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveFactoryInvalidMaxTimeStretchAPRContractError",
    ) -> None:
        self.selector = "0xa35539d0"
        self.signature = "InvalidMaxTimeStretchAPR()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveFactoryInvalidMaxTimeStretchAPRContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidMaxTimeStretchAPR" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveFactoryInvalidMaxTimeStretchAPRContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidMaxTimeStretchAPR" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveFactoryInvalidMinCheckpointDurationContractError:
    """ContractError for InvalidMinCheckpointDuration."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveFactoryInvalidMinCheckpointDurationContractError",
    ) -> None:
        self.selector = "0x0433acc6"
        self.signature = "InvalidMinCheckpointDuration()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveFactoryInvalidMinCheckpointDurationContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidMinCheckpointDuration" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveFactoryInvalidMinCheckpointDurationContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidMinCheckpointDuration" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveFactoryInvalidMinFeesContractError:
    """ContractError for InvalidMinFees."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveFactoryInvalidMinFeesContractError",
    ) -> None:
        self.selector = "0x15b05a8f"
        self.signature = "InvalidMinFees()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveFactoryInvalidMinFeesContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidMinFees" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveFactoryInvalidMinFeesContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidMinFees" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveFactoryInvalidMinFixedAPRContractError:
    """ContractError for InvalidMinFixedAPR."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveFactoryInvalidMinFixedAPRContractError",
    ) -> None:
        self.selector = "0x1670f797"
        self.signature = "InvalidMinFixedAPR()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveFactoryInvalidMinFixedAPRContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidMinFixedAPR" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveFactoryInvalidMinFixedAPRContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidMinFixedAPR" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveFactoryInvalidMinPositionDurationContractError:
    """ContractError for InvalidMinPositionDuration."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveFactoryInvalidMinPositionDurationContractError",
    ) -> None:
        self.selector = "0x600f5a02"
        self.signature = "InvalidMinPositionDuration()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveFactoryInvalidMinPositionDurationContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidMinPositionDuration" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveFactoryInvalidMinPositionDurationContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidMinPositionDuration" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveFactoryInvalidMinTimeStretchAPRContractError:
    """ContractError for InvalidMinTimeStretchAPR."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveFactoryInvalidMinTimeStretchAPRContractError",
    ) -> None:
        self.selector = "0x5a8f6557"
        self.signature = "InvalidMinTimeStretchAPR()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveFactoryInvalidMinTimeStretchAPRContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidMinTimeStretchAPR" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveFactoryInvalidMinTimeStretchAPRContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidMinTimeStretchAPR" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveFactoryInvalidPositionDurationContractError:
    """ContractError for InvalidPositionDuration."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveFactoryInvalidPositionDurationContractError",
    ) -> None:
        self.selector = "0x4a7fff9e"
        self.signature = "InvalidPositionDuration()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveFactoryInvalidPositionDurationContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidPositionDuration" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveFactoryInvalidPositionDurationContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidPositionDuration" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveFactoryInvalidTimeStretchAPRContractError:
    """ContractError for InvalidTimeStretchAPR."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveFactoryInvalidTimeStretchAPRContractError",
    ) -> None:
        self.selector = "0x83ebdfb7"
        self.signature = "InvalidTimeStretchAPR()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveFactoryInvalidTimeStretchAPRContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidTimeStretchAPR" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveFactoryInvalidTimeStretchAPRContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "InvalidTimeStretchAPR" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveFactoryLnInvalidInputContractError:
    """ContractError for LnInvalidInput."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveFactoryLnInvalidInputContractError",
    ) -> None:
        self.selector = "0xe61b4975"
        self.signature = "LnInvalidInput()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveFactoryLnInvalidInputContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "LnInvalidInput" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveFactoryLnInvalidInputContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "LnInvalidInput" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveFactoryReceiveLockedContractError:
    """ContractError for ReceiveLocked."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveFactoryReceiveLockedContractError",
    ) -> None:
        self.selector = "0x5563ada8"
        self.signature = "ReceiveLocked()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveFactoryReceiveLockedContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "ReceiveLocked" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveFactoryReceiveLockedContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "ReceiveLocked" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveFactoryTransferFailedContractError:
    """ContractError for TransferFailed."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveFactoryTransferFailedContractError",
    ) -> None:
        self.selector = "0x90b8ec18"
        self.signature = "TransferFailed()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveFactoryTransferFailedContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "TransferFailed" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveFactoryTransferFailedContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "TransferFailed" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveFactoryUnauthorizedContractError:
    """ContractError for Unauthorized."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveFactoryUnauthorizedContractError",
    ) -> None:
        self.selector = "0x82b42900"
        self.signature = "Unauthorized()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveFactoryUnauthorizedContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "Unauthorized" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveFactoryUnauthorizedContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "Unauthorized" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveFactoryUnsafeCastToInt256ContractError:
    """ContractError for UnsafeCastToInt256."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveFactoryUnsafeCastToInt256ContractError",
    ) -> None:
        self.selector = "0x72dd4e02"
        self.signature = "UnsafeCastToInt256()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveFactoryUnsafeCastToInt256ContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "UnsafeCastToInt256" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveFactoryUnsafeCastToInt256ContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdrivefactory_abi
                if item.get("name") == "UnsafeCastToInt256" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveFactoryContractErrors:
    """ContractErrors for the HyperdriveFactory contract."""

    DeployerCoordinatorAlreadyAdded: HyperdriveFactoryDeployerCoordinatorAlreadyAddedContractError

    DeployerCoordinatorIndexMismatch: HyperdriveFactoryDeployerCoordinatorIndexMismatchContractError

    DeployerCoordinatorNotAdded: HyperdriveFactoryDeployerCoordinatorNotAddedContractError

    EndIndexTooLarge: HyperdriveFactoryEndIndexTooLargeContractError

    InvalidCheckpointDuration: HyperdriveFactoryInvalidCheckpointDurationContractError

    InvalidCheckpointDurationResolution: HyperdriveFactoryInvalidCheckpointDurationResolutionContractError

    InvalidDeployConfig: HyperdriveFactoryInvalidDeployConfigContractError

    InvalidDeployerCoordinator: HyperdriveFactoryInvalidDeployerCoordinatorContractError

    InvalidFees: HyperdriveFactoryInvalidFeesContractError

    InvalidFixedAPR: HyperdriveFactoryInvalidFixedAPRContractError

    InvalidIndexes: HyperdriveFactoryInvalidIndexesContractError

    InvalidMaxCheckpointDuration: HyperdriveFactoryInvalidMaxCheckpointDurationContractError

    InvalidMaxFees: HyperdriveFactoryInvalidMaxFeesContractError

    InvalidMaxFixedAPR: HyperdriveFactoryInvalidMaxFixedAPRContractError

    InvalidMaxPositionDuration: HyperdriveFactoryInvalidMaxPositionDurationContractError

    InvalidMaxTimeStretchAPR: HyperdriveFactoryInvalidMaxTimeStretchAPRContractError

    InvalidMinCheckpointDuration: HyperdriveFactoryInvalidMinCheckpointDurationContractError

    InvalidMinFees: HyperdriveFactoryInvalidMinFeesContractError

    InvalidMinFixedAPR: HyperdriveFactoryInvalidMinFixedAPRContractError

    InvalidMinPositionDuration: HyperdriveFactoryInvalidMinPositionDurationContractError

    InvalidMinTimeStretchAPR: HyperdriveFactoryInvalidMinTimeStretchAPRContractError

    InvalidPositionDuration: HyperdriveFactoryInvalidPositionDurationContractError

    InvalidTimeStretchAPR: HyperdriveFactoryInvalidTimeStretchAPRContractError

    LnInvalidInput: HyperdriveFactoryLnInvalidInputContractError

    ReceiveLocked: HyperdriveFactoryReceiveLockedContractError

    TransferFailed: HyperdriveFactoryTransferFailedContractError

    Unauthorized: HyperdriveFactoryUnauthorizedContractError

    UnsafeCastToInt256: HyperdriveFactoryUnsafeCastToInt256ContractError

    def __init__(
        self,
    ) -> None:
        self.DeployerCoordinatorAlreadyAdded = HyperdriveFactoryDeployerCoordinatorAlreadyAddedContractError()
        self.DeployerCoordinatorIndexMismatch = HyperdriveFactoryDeployerCoordinatorIndexMismatchContractError()
        self.DeployerCoordinatorNotAdded = HyperdriveFactoryDeployerCoordinatorNotAddedContractError()
        self.EndIndexTooLarge = HyperdriveFactoryEndIndexTooLargeContractError()
        self.InvalidCheckpointDuration = HyperdriveFactoryInvalidCheckpointDurationContractError()
        self.InvalidCheckpointDurationResolution = HyperdriveFactoryInvalidCheckpointDurationResolutionContractError()
        self.InvalidDeployConfig = HyperdriveFactoryInvalidDeployConfigContractError()
        self.InvalidDeployerCoordinator = HyperdriveFactoryInvalidDeployerCoordinatorContractError()
        self.InvalidFees = HyperdriveFactoryInvalidFeesContractError()
        self.InvalidFixedAPR = HyperdriveFactoryInvalidFixedAPRContractError()
        self.InvalidIndexes = HyperdriveFactoryInvalidIndexesContractError()
        self.InvalidMaxCheckpointDuration = HyperdriveFactoryInvalidMaxCheckpointDurationContractError()
        self.InvalidMaxFees = HyperdriveFactoryInvalidMaxFeesContractError()
        self.InvalidMaxFixedAPR = HyperdriveFactoryInvalidMaxFixedAPRContractError()
        self.InvalidMaxPositionDuration = HyperdriveFactoryInvalidMaxPositionDurationContractError()
        self.InvalidMaxTimeStretchAPR = HyperdriveFactoryInvalidMaxTimeStretchAPRContractError()
        self.InvalidMinCheckpointDuration = HyperdriveFactoryInvalidMinCheckpointDurationContractError()
        self.InvalidMinFees = HyperdriveFactoryInvalidMinFeesContractError()
        self.InvalidMinFixedAPR = HyperdriveFactoryInvalidMinFixedAPRContractError()
        self.InvalidMinPositionDuration = HyperdriveFactoryInvalidMinPositionDurationContractError()
        self.InvalidMinTimeStretchAPR = HyperdriveFactoryInvalidMinTimeStretchAPRContractError()
        self.InvalidPositionDuration = HyperdriveFactoryInvalidPositionDurationContractError()
        self.InvalidTimeStretchAPR = HyperdriveFactoryInvalidTimeStretchAPRContractError()
        self.LnInvalidInput = HyperdriveFactoryLnInvalidInputContractError()
        self.ReceiveLocked = HyperdriveFactoryReceiveLockedContractError()
        self.TransferFailed = HyperdriveFactoryTransferFailedContractError()
        self.Unauthorized = HyperdriveFactoryUnauthorizedContractError()
        self.UnsafeCastToInt256 = HyperdriveFactoryUnsafeCastToInt256ContractError()

        self._all = [
            self.DeployerCoordinatorAlreadyAdded,
            self.DeployerCoordinatorIndexMismatch,
            self.DeployerCoordinatorNotAdded,
            self.EndIndexTooLarge,
            self.InvalidCheckpointDuration,
            self.InvalidCheckpointDurationResolution,
            self.InvalidDeployConfig,
            self.InvalidDeployerCoordinator,
            self.InvalidFees,
            self.InvalidFixedAPR,
            self.InvalidIndexes,
            self.InvalidMaxCheckpointDuration,
            self.InvalidMaxFees,
            self.InvalidMaxFixedAPR,
            self.InvalidMaxPositionDuration,
            self.InvalidMaxTimeStretchAPR,
            self.InvalidMinCheckpointDuration,
            self.InvalidMinFees,
            self.InvalidMinFixedAPR,
            self.InvalidMinPositionDuration,
            self.InvalidMinTimeStretchAPR,
            self.InvalidPositionDuration,
            self.InvalidTimeStretchAPR,
            self.LnInvalidInput,
            self.ReceiveLocked,
            self.TransferFailed,
            self.Unauthorized,
            self.UnsafeCastToInt256,
        ]

    def decode_custom_error(self, data: str) -> tuple[Any, ...]:
        """Decodes a custom contract error."""
        selector = data[:10]
        for err in self._all:
            if err.selector == selector:
                return err.decode_error_data(HexBytes(data[10:]))

        raise ValueError(f"HyperdriveFactory does not have a selector matching {selector}")


hyperdrivefactory_abi: ABI = cast(
    ABI,
    [
        {
            "type": "constructor",
            "inputs": [
                {
                    "name": "_factoryConfig",
                    "type": "tuple",
                    "internalType": "struct HyperdriveFactory.FactoryConfig",
                    "components": [
                        {"name": "governance", "type": "address", "internalType": "address"},
                        {"name": "hyperdriveGovernance", "type": "address", "internalType": "address"},
                        {"name": "defaultPausers", "type": "address[]", "internalType": "address[]"},
                        {"name": "feeCollector", "type": "address", "internalType": "address"},
                        {"name": "sweepCollector", "type": "address", "internalType": "address"},
                        {"name": "checkpointDurationResolution", "type": "uint256", "internalType": "uint256"},
                        {"name": "minCheckpointDuration", "type": "uint256", "internalType": "uint256"},
                        {"name": "maxCheckpointDuration", "type": "uint256", "internalType": "uint256"},
                        {"name": "minPositionDuration", "type": "uint256", "internalType": "uint256"},
                        {"name": "maxPositionDuration", "type": "uint256", "internalType": "uint256"},
                        {"name": "minFixedAPR", "type": "uint256", "internalType": "uint256"},
                        {"name": "maxFixedAPR", "type": "uint256", "internalType": "uint256"},
                        {"name": "minTimeStretchAPR", "type": "uint256", "internalType": "uint256"},
                        {"name": "maxTimeStretchAPR", "type": "uint256", "internalType": "uint256"},
                        {
                            "name": "minFees",
                            "type": "tuple",
                            "internalType": "struct IHyperdrive.Fees",
                            "components": [
                                {"name": "curve", "type": "uint256", "internalType": "uint256"},
                                {"name": "flat", "type": "uint256", "internalType": "uint256"},
                                {"name": "governanceLP", "type": "uint256", "internalType": "uint256"},
                                {"name": "governanceZombie", "type": "uint256", "internalType": "uint256"},
                            ],
                        },
                        {
                            "name": "maxFees",
                            "type": "tuple",
                            "internalType": "struct IHyperdrive.Fees",
                            "components": [
                                {"name": "curve", "type": "uint256", "internalType": "uint256"},
                                {"name": "flat", "type": "uint256", "internalType": "uint256"},
                                {"name": "governanceLP", "type": "uint256", "internalType": "uint256"},
                                {"name": "governanceZombie", "type": "uint256", "internalType": "uint256"},
                            ],
                        },
                        {"name": "linkerFactory", "type": "address", "internalType": "address"},
                        {"name": "linkerCodeHash", "type": "bytes32", "internalType": "bytes32"},
                    ],
                }
            ],
            "stateMutability": "nonpayable",
        },
        {"type": "receive", "stateMutability": "payable"},
        {
            "type": "function",
            "name": "addDeployerCoordinator",
            "inputs": [{"name": "_deployerCoordinator", "type": "address", "internalType": "address"}],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "checkpointDurationResolution",
            "inputs": [],
            "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "defaultPausers",
            "inputs": [],
            "outputs": [{"name": "", "type": "address[]", "internalType": "address[]"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "deployAndInitialize",
            "inputs": [
                {"name": "_deploymentId", "type": "bytes32", "internalType": "bytes32"},
                {"name": "_deployerCoordinator", "type": "address", "internalType": "address"},
                {
                    "name": "_config",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.PoolDeployConfig",
                    "components": [
                        {"name": "baseToken", "type": "address", "internalType": "contract IERC20"},
                        {"name": "linkerFactory", "type": "address", "internalType": "address"},
                        {"name": "linkerCodeHash", "type": "bytes32", "internalType": "bytes32"},
                        {"name": "minimumShareReserves", "type": "uint256", "internalType": "uint256"},
                        {"name": "minimumTransactionAmount", "type": "uint256", "internalType": "uint256"},
                        {"name": "positionDuration", "type": "uint256", "internalType": "uint256"},
                        {"name": "checkpointDuration", "type": "uint256", "internalType": "uint256"},
                        {"name": "timeStretch", "type": "uint256", "internalType": "uint256"},
                        {"name": "governance", "type": "address", "internalType": "address"},
                        {"name": "feeCollector", "type": "address", "internalType": "address"},
                        {"name": "sweepCollector", "type": "address", "internalType": "address"},
                        {
                            "name": "fees",
                            "type": "tuple",
                            "internalType": "struct IHyperdrive.Fees",
                            "components": [
                                {"name": "curve", "type": "uint256", "internalType": "uint256"},
                                {"name": "flat", "type": "uint256", "internalType": "uint256"},
                                {"name": "governanceLP", "type": "uint256", "internalType": "uint256"},
                                {"name": "governanceZombie", "type": "uint256", "internalType": "uint256"},
                            ],
                        },
                    ],
                },
                {"name": "_extraData", "type": "bytes", "internalType": "bytes"},
                {"name": "_contribution", "type": "uint256", "internalType": "uint256"},
                {"name": "_fixedAPR", "type": "uint256", "internalType": "uint256"},
                {"name": "_timeStretchAPR", "type": "uint256", "internalType": "uint256"},
                {
                    "name": "_options",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.Options",
                    "components": [
                        {"name": "destination", "type": "address", "internalType": "address"},
                        {"name": "asBase", "type": "bool", "internalType": "bool"},
                        {"name": "extraData", "type": "bytes", "internalType": "bytes"},
                    ],
                },
                {"name": "_salt", "type": "bytes32", "internalType": "bytes32"},
            ],
            "outputs": [{"name": "", "type": "address", "internalType": "contract IHyperdrive"}],
            "stateMutability": "payable",
        },
        {
            "type": "function",
            "name": "deployTarget",
            "inputs": [
                {"name": "_deploymentId", "type": "bytes32", "internalType": "bytes32"},
                {"name": "_deployerCoordinator", "type": "address", "internalType": "address"},
                {
                    "name": "_config",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.PoolDeployConfig",
                    "components": [
                        {"name": "baseToken", "type": "address", "internalType": "contract IERC20"},
                        {"name": "linkerFactory", "type": "address", "internalType": "address"},
                        {"name": "linkerCodeHash", "type": "bytes32", "internalType": "bytes32"},
                        {"name": "minimumShareReserves", "type": "uint256", "internalType": "uint256"},
                        {"name": "minimumTransactionAmount", "type": "uint256", "internalType": "uint256"},
                        {"name": "positionDuration", "type": "uint256", "internalType": "uint256"},
                        {"name": "checkpointDuration", "type": "uint256", "internalType": "uint256"},
                        {"name": "timeStretch", "type": "uint256", "internalType": "uint256"},
                        {"name": "governance", "type": "address", "internalType": "address"},
                        {"name": "feeCollector", "type": "address", "internalType": "address"},
                        {"name": "sweepCollector", "type": "address", "internalType": "address"},
                        {
                            "name": "fees",
                            "type": "tuple",
                            "internalType": "struct IHyperdrive.Fees",
                            "components": [
                                {"name": "curve", "type": "uint256", "internalType": "uint256"},
                                {"name": "flat", "type": "uint256", "internalType": "uint256"},
                                {"name": "governanceLP", "type": "uint256", "internalType": "uint256"},
                                {"name": "governanceZombie", "type": "uint256", "internalType": "uint256"},
                            ],
                        },
                    ],
                },
                {"name": "_extraData", "type": "bytes", "internalType": "bytes"},
                {"name": "_fixedAPR", "type": "uint256", "internalType": "uint256"},
                {"name": "_timeStretchAPR", "type": "uint256", "internalType": "uint256"},
                {"name": "_targetIndex", "type": "uint256", "internalType": "uint256"},
                {"name": "_salt", "type": "bytes32", "internalType": "bytes32"},
            ],
            "outputs": [{"name": "", "type": "address", "internalType": "address"}],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "feeCollector",
            "inputs": [],
            "outputs": [{"name": "", "type": "address", "internalType": "address"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getDeployerCoordinatorAtIndex",
            "inputs": [{"name": "index", "type": "uint256", "internalType": "uint256"}],
            "outputs": [{"name": "", "type": "address", "internalType": "address"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getDeployerCoordinatorsInRange",
            "inputs": [
                {"name": "startIndex", "type": "uint256", "internalType": "uint256"},
                {"name": "endIndex", "type": "uint256", "internalType": "uint256"},
            ],
            "outputs": [{"name": "range", "type": "address[]", "internalType": "address[]"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getInstanceAtIndex",
            "inputs": [{"name": "index", "type": "uint256", "internalType": "uint256"}],
            "outputs": [{"name": "", "type": "address", "internalType": "address"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getInstancesInRange",
            "inputs": [
                {"name": "startIndex", "type": "uint256", "internalType": "uint256"},
                {"name": "endIndex", "type": "uint256", "internalType": "uint256"},
            ],
            "outputs": [{"name": "range", "type": "address[]", "internalType": "address[]"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getNumberOfDeployerCoordinators",
            "inputs": [],
            "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getNumberOfInstances",
            "inputs": [],
            "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "governance",
            "inputs": [],
            "outputs": [{"name": "", "type": "address", "internalType": "address"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "hyperdriveGovernance",
            "inputs": [],
            "outputs": [{"name": "", "type": "address", "internalType": "address"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "instancesToDeployerCoordinators",
            "inputs": [{"name": "instance", "type": "address", "internalType": "address"}],
            "outputs": [{"name": "deployCoordinator", "type": "address", "internalType": "address"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "isDeployerCoordinator",
            "inputs": [{"name": "", "type": "address", "internalType": "address"}],
            "outputs": [{"name": "", "type": "bool", "internalType": "bool"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "isInstance",
            "inputs": [{"name": "", "type": "address", "internalType": "address"}],
            "outputs": [{"name": "", "type": "bool", "internalType": "bool"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "linkerCodeHash",
            "inputs": [],
            "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "linkerFactory",
            "inputs": [],
            "outputs": [{"name": "", "type": "address", "internalType": "address"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "maxCheckpointDuration",
            "inputs": [],
            "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "maxFees",
            "inputs": [],
            "outputs": [
                {
                    "name": "",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.Fees",
                    "components": [
                        {"name": "curve", "type": "uint256", "internalType": "uint256"},
                        {"name": "flat", "type": "uint256", "internalType": "uint256"},
                        {"name": "governanceLP", "type": "uint256", "internalType": "uint256"},
                        {"name": "governanceZombie", "type": "uint256", "internalType": "uint256"},
                    ],
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "maxFixedAPR",
            "inputs": [],
            "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "maxPositionDuration",
            "inputs": [],
            "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "maxTimeStretchAPR",
            "inputs": [],
            "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "minCheckpointDuration",
            "inputs": [],
            "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "minFees",
            "inputs": [],
            "outputs": [
                {
                    "name": "",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.Fees",
                    "components": [
                        {"name": "curve", "type": "uint256", "internalType": "uint256"},
                        {"name": "flat", "type": "uint256", "internalType": "uint256"},
                        {"name": "governanceLP", "type": "uint256", "internalType": "uint256"},
                        {"name": "governanceZombie", "type": "uint256", "internalType": "uint256"},
                    ],
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "minFixedAPR",
            "inputs": [],
            "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "minPositionDuration",
            "inputs": [],
            "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "minTimeStretchAPR",
            "inputs": [],
            "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "removeDeployerCoordinator",
            "inputs": [
                {"name": "_deployerCoordinator", "type": "address", "internalType": "address"},
                {"name": "_index", "type": "uint256", "internalType": "uint256"},
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "sweepCollector",
            "inputs": [],
            "outputs": [{"name": "", "type": "address", "internalType": "address"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "updateCheckpointDurationResolution",
            "inputs": [{"name": "_checkpointDurationResolution", "type": "uint256", "internalType": "uint256"}],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "updateDefaultPausers",
            "inputs": [{"name": "_defaultPausers_", "type": "address[]", "internalType": "address[]"}],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "updateFeeCollector",
            "inputs": [{"name": "_feeCollector", "type": "address", "internalType": "address"}],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "updateGovernance",
            "inputs": [{"name": "_governance", "type": "address", "internalType": "address"}],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "updateHyperdriveGovernance",
            "inputs": [{"name": "_hyperdriveGovernance", "type": "address", "internalType": "address"}],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "updateLinkerCodeHash",
            "inputs": [{"name": "_linkerCodeHash", "type": "bytes32", "internalType": "bytes32"}],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "updateLinkerFactory",
            "inputs": [{"name": "_linkerFactory", "type": "address", "internalType": "address"}],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "updateMaxCheckpointDuration",
            "inputs": [{"name": "_maxCheckpointDuration", "type": "uint256", "internalType": "uint256"}],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "updateMaxFees",
            "inputs": [
                {
                    "name": "__maxFees",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.Fees",
                    "components": [
                        {"name": "curve", "type": "uint256", "internalType": "uint256"},
                        {"name": "flat", "type": "uint256", "internalType": "uint256"},
                        {"name": "governanceLP", "type": "uint256", "internalType": "uint256"},
                        {"name": "governanceZombie", "type": "uint256", "internalType": "uint256"},
                    ],
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "updateMaxFixedAPR",
            "inputs": [{"name": "_maxFixedAPR", "type": "uint256", "internalType": "uint256"}],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "updateMaxPositionDuration",
            "inputs": [{"name": "_maxPositionDuration", "type": "uint256", "internalType": "uint256"}],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "updateMaxTimeStretchAPR",
            "inputs": [{"name": "_maxTimeStretchAPR", "type": "uint256", "internalType": "uint256"}],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "updateMinCheckpointDuration",
            "inputs": [{"name": "_minCheckpointDuration", "type": "uint256", "internalType": "uint256"}],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "updateMinFees",
            "inputs": [
                {
                    "name": "__minFees",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.Fees",
                    "components": [
                        {"name": "curve", "type": "uint256", "internalType": "uint256"},
                        {"name": "flat", "type": "uint256", "internalType": "uint256"},
                        {"name": "governanceLP", "type": "uint256", "internalType": "uint256"},
                        {"name": "governanceZombie", "type": "uint256", "internalType": "uint256"},
                    ],
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "updateMinFixedAPR",
            "inputs": [{"name": "_minFixedAPR", "type": "uint256", "internalType": "uint256"}],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "updateMinPositionDuration",
            "inputs": [{"name": "_minPositionDuration", "type": "uint256", "internalType": "uint256"}],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "updateMinTimeStretchAPR",
            "inputs": [{"name": "_minTimeStretchAPR", "type": "uint256", "internalType": "uint256"}],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "updateSweepCollector",
            "inputs": [{"name": "_sweepCollector", "type": "address", "internalType": "address"}],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "event",
            "name": "CheckpointDurationResolutionUpdated",
            "inputs": [
                {
                    "name": "newCheckpointDurationResolution",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "DefaultPausersUpdated",
            "inputs": [
                {"name": "newDefaultPausers", "type": "address[]", "indexed": False, "internalType": "address[]"}
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "Deployed",
            "inputs": [
                {"name": "deployerCoordinator", "type": "address", "indexed": True, "internalType": "address"},
                {"name": "hyperdrive", "type": "address", "indexed": False, "internalType": "address"},
                {
                    "name": "config",
                    "type": "tuple",
                    "indexed": False,
                    "internalType": "struct IHyperdrive.PoolDeployConfig",
                    "components": [
                        {"name": "baseToken", "type": "address", "internalType": "contract IERC20"},
                        {"name": "linkerFactory", "type": "address", "internalType": "address"},
                        {"name": "linkerCodeHash", "type": "bytes32", "internalType": "bytes32"},
                        {"name": "minimumShareReserves", "type": "uint256", "internalType": "uint256"},
                        {"name": "minimumTransactionAmount", "type": "uint256", "internalType": "uint256"},
                        {"name": "positionDuration", "type": "uint256", "internalType": "uint256"},
                        {"name": "checkpointDuration", "type": "uint256", "internalType": "uint256"},
                        {"name": "timeStretch", "type": "uint256", "internalType": "uint256"},
                        {"name": "governance", "type": "address", "internalType": "address"},
                        {"name": "feeCollector", "type": "address", "internalType": "address"},
                        {"name": "sweepCollector", "type": "address", "internalType": "address"},
                        {
                            "name": "fees",
                            "type": "tuple",
                            "internalType": "struct IHyperdrive.Fees",
                            "components": [
                                {"name": "curve", "type": "uint256", "internalType": "uint256"},
                                {"name": "flat", "type": "uint256", "internalType": "uint256"},
                                {"name": "governanceLP", "type": "uint256", "internalType": "uint256"},
                                {"name": "governanceZombie", "type": "uint256", "internalType": "uint256"},
                            ],
                        },
                    ],
                },
                {"name": "extraData", "type": "bytes", "indexed": False, "internalType": "bytes"},
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "DeployerCoordinatorAdded",
            "inputs": [{"name": "deployerCoordinator", "type": "address", "indexed": True, "internalType": "address"}],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "DeployerCoordinatorRemoved",
            "inputs": [{"name": "deployerCoordinator", "type": "address", "indexed": True, "internalType": "address"}],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "FeeCollectorUpdated",
            "inputs": [{"name": "newFeeCollector", "type": "address", "indexed": True, "internalType": "address"}],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "GovernanceUpdated",
            "inputs": [{"name": "governance", "type": "address", "indexed": True, "internalType": "address"}],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "HyperdriveGovernanceUpdated",
            "inputs": [{"name": "hyperdriveGovernance", "type": "address", "indexed": True, "internalType": "address"}],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "LinkerCodeHashUpdated",
            "inputs": [{"name": "newLinkerCodeHash", "type": "bytes32", "indexed": True, "internalType": "bytes32"}],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "LinkerFactoryUpdated",
            "inputs": [{"name": "newLinkerFactory", "type": "address", "indexed": True, "internalType": "address"}],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "MaxCheckpointDurationUpdated",
            "inputs": [
                {"name": "newMaxCheckpointDuration", "type": "uint256", "indexed": False, "internalType": "uint256"}
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "MaxFeesUpdated",
            "inputs": [
                {
                    "name": "newMaxFees",
                    "type": "tuple",
                    "indexed": False,
                    "internalType": "struct IHyperdrive.Fees",
                    "components": [
                        {"name": "curve", "type": "uint256", "internalType": "uint256"},
                        {"name": "flat", "type": "uint256", "internalType": "uint256"},
                        {"name": "governanceLP", "type": "uint256", "internalType": "uint256"},
                        {"name": "governanceZombie", "type": "uint256", "internalType": "uint256"},
                    ],
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "MaxFixedAPRUpdated",
            "inputs": [{"name": "newMaxFixedAPR", "type": "uint256", "indexed": False, "internalType": "uint256"}],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "MaxPositionDurationUpdated",
            "inputs": [
                {"name": "newMaxPositionDuration", "type": "uint256", "indexed": False, "internalType": "uint256"}
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "MaxTimeStretchAPRUpdated",
            "inputs": [
                {"name": "newMaxTimeStretchAPR", "type": "uint256", "indexed": False, "internalType": "uint256"}
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "MinCheckpointDurationUpdated",
            "inputs": [
                {"name": "newMinCheckpointDuration", "type": "uint256", "indexed": False, "internalType": "uint256"}
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "MinFeesUpdated",
            "inputs": [
                {
                    "name": "newMinFees",
                    "type": "tuple",
                    "indexed": False,
                    "internalType": "struct IHyperdrive.Fees",
                    "components": [
                        {"name": "curve", "type": "uint256", "internalType": "uint256"},
                        {"name": "flat", "type": "uint256", "internalType": "uint256"},
                        {"name": "governanceLP", "type": "uint256", "internalType": "uint256"},
                        {"name": "governanceZombie", "type": "uint256", "internalType": "uint256"},
                    ],
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "MinFixedAPRUpdated",
            "inputs": [{"name": "newMinFixedAPR", "type": "uint256", "indexed": False, "internalType": "uint256"}],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "MinPositionDurationUpdated",
            "inputs": [
                {"name": "newMinPositionDuration", "type": "uint256", "indexed": False, "internalType": "uint256"}
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "MinTimeStretchAPRUpdated",
            "inputs": [
                {"name": "newMinTimeStretchAPR", "type": "uint256", "indexed": False, "internalType": "uint256"}
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "SweepCollectorUpdated",
            "inputs": [{"name": "newSweepCollector", "type": "address", "indexed": True, "internalType": "address"}],
            "anonymous": False,
        },
        {"type": "error", "name": "DeployerCoordinatorAlreadyAdded", "inputs": []},
        {"type": "error", "name": "DeployerCoordinatorIndexMismatch", "inputs": []},
        {"type": "error", "name": "DeployerCoordinatorNotAdded", "inputs": []},
        {"type": "error", "name": "EndIndexTooLarge", "inputs": []},
        {"type": "error", "name": "InvalidCheckpointDuration", "inputs": []},
        {"type": "error", "name": "InvalidCheckpointDurationResolution", "inputs": []},
        {"type": "error", "name": "InvalidDeployConfig", "inputs": []},
        {"type": "error", "name": "InvalidDeployerCoordinator", "inputs": []},
        {"type": "error", "name": "InvalidFees", "inputs": []},
        {"type": "error", "name": "InvalidFixedAPR", "inputs": []},
        {"type": "error", "name": "InvalidIndexes", "inputs": []},
        {"type": "error", "name": "InvalidMaxCheckpointDuration", "inputs": []},
        {"type": "error", "name": "InvalidMaxFees", "inputs": []},
        {"type": "error", "name": "InvalidMaxFixedAPR", "inputs": []},
        {"type": "error", "name": "InvalidMaxPositionDuration", "inputs": []},
        {"type": "error", "name": "InvalidMaxTimeStretchAPR", "inputs": []},
        {"type": "error", "name": "InvalidMinCheckpointDuration", "inputs": []},
        {"type": "error", "name": "InvalidMinFees", "inputs": []},
        {"type": "error", "name": "InvalidMinFixedAPR", "inputs": []},
        {"type": "error", "name": "InvalidMinPositionDuration", "inputs": []},
        {"type": "error", "name": "InvalidMinTimeStretchAPR", "inputs": []},
        {"type": "error", "name": "InvalidPositionDuration", "inputs": []},
        {"type": "error", "name": "InvalidTimeStretchAPR", "inputs": []},
        {"type": "error", "name": "LnInvalidInput", "inputs": []},
        {"type": "error", "name": "ReceiveLocked", "inputs": []},
        {"type": "error", "name": "TransferFailed", "inputs": []},
        {"type": "error", "name": "Unauthorized", "inputs": []},
        {"type": "error", "name": "UnsafeCastToInt256", "inputs": []},
    ],
)
# pylint: disable=line-too-long
hyperdrivefactory_bytecode = HexStr(
    "0x60806040526000805460ff191660011790553480156200001e57600080fd5b5060405162003773380380620037738339810160408190526200004191620005fd565b8060a001518160c0015110806200006c57508060a001518160c001516200006991906200076d565b15155b156200008b57604051630219d66360e11b815260040160405180910390fd5b60c0810151600781905560e08201511080620000bb57508060a001518160e00151620000b891906200076d565b15155b15620000da5760405163f9c0959d60e01b815260040160405180910390fd5b60e0810151600881905561010082015110806200010c57508060a001518161010001516200010991906200076d565b15155b156200012b57604051633007ad0160e11b815260040160405180910390fd5b610100810151600981905561012082015110806200015e57508060a001518161012001516200015b91906200076d565b15155b156200017d5760405163cfb699cb60e01b815260040160405180910390fd5b610120810151600a556101608101516101408201511115620001b2576040516330554de160e01b815260040160405180910390fd5b610140810151600b55610160810151600c556101a08101516101808201511115620001f0576040516383ebdfb760e01b815260040160405180910390fd5b610180810151600d556101a0810151600e556101e081015151670de0b6b3a764000010806200022f5750670de0b6b3a7640000816101e0015160200151115b806200024b5750670de0b6b3a7640000816101e0015160400151115b80620002675750670de0b6b3a7640000816101e0015160600151115b15620002865760405163161071fb60e11b815260040160405180910390fd5b6101e081015180516013819055602082015160145560408201516015556060909101516016556101c0820151511180620002d15750806101e0015160200151816101c0015160200151115b80620002ee5750806101e0015160400151816101c0015160400151115b806200030b5750806101e0015160600151816101c0015160600151115b156200032a576040516315b05a8f60e01b815260040160405180910390fd5b6101c08101518051600f55602080820151601055604080830151601155606092830151601255835160008054610100600160a81b0319166101006001600160a01b039384160217905582850151600180546001600160a01b031990811692841692909217905593850151600480548616918316919091179055608085015160058054909516911617909255908201518051620003cb92601792019062000407565b50610200810151600280546001600160a01b0319166001600160a01b0390921691909117905561022081015160035560a0015160065562000790565b8280548282559060005260206000209081019282156200045f579160200282015b828111156200045f57825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019062000428565b506200046d92915062000471565b5090565b5b808211156200046d576000815560010162000472565b634e487b7160e01b600052604160045260246000fd5b60405161024081016001600160401b0381118282101715620004c457620004c462000488565b60405290565b80516001600160a01b0381168114620004e257600080fd5b919050565b600082601f830112620004f957600080fd5b815160206001600160401b038083111562000518576200051862000488565b8260051b604051601f19603f8301168101818110848211171562000540576200054062000488565b6040529384528581018301938381019250878511156200055f57600080fd5b83870191505b8482101562000589576200057982620004ca565b8352918301919083019062000565565b979650505050505050565b600060808284031215620005a757600080fd5b604051608081016001600160401b0381118282101715620005cc57620005cc62000488565b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b6000602082840312156200061057600080fd5b81516001600160401b03808211156200062857600080fd5b9083019061030082860312156200063e57600080fd5b620006486200049e565b6200065383620004ca565b81526200066360208401620004ca565b60208201526040830151828111156200067b57600080fd5b6200068987828601620004e7565b6040830152506200069d60608401620004ca565b6060820152620006b060808401620004ca565b608082015260a0838101519082015260c0808401519082015260e08084015190820152610100808401519082015261012080840151908201526101408084015190820152610160808401519082015261018080840151908201526101a080840151908201526101c09150620007288683850162000594565b828201526200073c86610240850162000594565b6101e0820152620007516102c08401620004ca565b6102008201526102e09290920151610220830152509392505050565b6000826200078b57634e487b7160e01b600052601260045260246000fd5b500690565b612fd380620007a06000396000f3fe6080604052600436106102b25760003560e01c80639cafb91911610175578063d6f50169116100dc578063e333155511610095578063eb71f66c1161006f578063eb71f66c1461085a578063ec895f111461087a578063f8c09e591461089a578063fe3d5aeb146108ca57600080fd5b8063e333155514610805578063e71f34b314610825578063e83e34b11461084557600080fd5b8063d6f501691461076e578063daac24da14610784578063daf012e6146107a4578063dd2b8fbb146107ba578063e0e2daaa146107da578063e1b39c80146107f057600080fd5b8063c17225631161012e578063c1722563146106ca578063c415b95c146106ec578063c905a4b51461070c578063d0f96b9214610722578063d23d7ea314610738578063d2c35ce81461074e57600080fd5b80639cafb9191461061f578063a18cb81a14610632578063a64c90bf14610652578063b256126314610674578063bc30e7a114610694578063bf9bd5cd146106b457600080fd5b80636b44e6be116102195780638627a4f0116101d25780638627a4f0146105695780638e127cf5146105895780638efc0986146105a957806397b0e8ce146105bf57806399623bb1146105df5780639af25262146105ff57600080fd5b80636b44e6be1461047e5780636c8cc865146104be5780636e95d67c146104f45780636f6d5c4a1461050957806383b361e814610529578063852297851461054957600080fd5b8063421caba81161026b578063421caba8146103bf57806348800760146103df5780634fbfee77146104035780635720c9d5146104235780635aa6e67514610439578063628027a31461045e57600080fd5b806310780f73146102e257806310d1dc3e1461031f57806311e77bfe1461033f5780631978ebcf1461035f5780632885e3ac1461037f578063411c30351461039f57600080fd5b366102dd5760005460ff16156102db57604051630aac75b560e31b815260040160405180910390fd5b005b600080fd5b3480156102ee57600080fd5b50600554610302906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561032b57600080fd5b506102db61033a3660046126ba565b6108ea565b34801561034b57600080fd5b506102db61035a3660046126cc565b610a08565b34801561036b57600080fd5b506102db61037a3660046126cc565b610ae6565b34801561038b57600080fd5b506102db61039a3660046126ba565b610b6d565b3480156103ab57600080fd5b506102db6103ba36600461270d565b610cd8565b3480156103cb57600080fd5b506102db6103da366004612739565b610e95565b3480156103eb57600080fd5b506103f5600e5481565b604051908152602001610316565b34801561040f57600080fd5b506102db61041e3660046126cc565b610f8a565b34801561042f57600080fd5b506103f560075481565b34801561044557600080fd5b506000546103029061010090046001600160a01b031681565b34801561046a57600080fd5b506102db6104793660046126cc565b610fec565b34801561048a57600080fd5b506104ae610499366004612739565b601c6020526000908152604090205460ff1681565b6040519015158152602001610316565b3480156104ca57600080fd5b506103026104d9366004612739565b601a602052600090815260409020546001600160a01b031681565b34801561050057600080fd5b50601b546103f5565b34801561051557600080fd5b506102db6105243660046126cc565b611073565b34801561053557600080fd5b506102db6105443660046126cc565b61111c565b34801561055557600080fd5b506102db610564366004612739565b6111a3565b34801561057557600080fd5b506102db610584366004612739565b61121c565b34801561059557600080fd5b506102db6105a43660046126cc565b611295565b3480156105b557600080fd5b506103f5600a5481565b3480156105cb57600080fd5b506102db6105da3660046126cc565b61133e565b3480156105eb57600080fd5b50600254610302906001600160a01b031681565b34801561060b57600080fd5b506102db61061a36600461275d565b6113c5565b61030261062d3660046129c9565b611432565b34801561063e57600080fd5b5061030261064d366004612af8565b61182f565b34801561065e57600080fd5b50610667611921565b6040516103169190612b8c565b34801561068057600080fd5b506102db61068f366004612739565b611983565b3480156106a057600080fd5b506106676106af366004612bd9565b611a02565b3480156106c057600080fd5b506103f5600c5481565b3480156106d657600080fd5b506106df611b1f565b6040516103169190612bfb565b3480156106f857600080fd5b50600454610302906001600160a01b031681565b34801561071857600080fd5b506103f560035481565b34801561072e57600080fd5b506103f560065481565b34801561074457600080fd5b506103f5600b5481565b34801561075a57600080fd5b506102db610769366004612739565b611b77565b34801561077a57600080fd5b506103f5600d5481565b34801561079057600080fd5b5061030261079f3660046126cc565b611bf0565b3480156107b057600080fd5b506103f560095481565b3480156107c657600080fd5b506102db6107d5366004612739565b611c20565b3480156107e657600080fd5b506103f560085481565b3480156107fc57600080fd5b506018546103f5565b34801561081157600080fd5b50600154610302906001600160a01b031681565b34801561083157600080fd5b506102db6108403660046126cc565b611c99565b34801561085157600080fd5b506106df611d42565b34801561086657600080fd5b506102db6108753660046126cc565b611d9a565b34801561088657600080fd5b50610667610895366004612bd9565b611e37565b3480156108a657600080fd5b506104ae6108b5366004612739565b60196020526000908152604090205460ff1681565b3480156108d657600080fd5b506103026108e53660046126cc565b611f4d565b60005461010090046001600160a01b03163314610919576040516282b42960e81b815260040160405180910390fd5b6040805160808101825260135480825260145460208301526015549282019290925260165460608201529082351180610959575080602001518260200135115b8061096b575080604001518260400135115b8061097d575080606001518260600135115b1561099b576040516315b05a8f60e01b815260040160405180910390fd5b8135600f819055602080840135601081905560408086013560118190556060808801356012819055835196875294860193909352908401528201527fe1c45f8aeb543f30b37cc2fccfbac0f32cc8f234284df921d71cff04e51ef421906080015b60405180910390a15050565b60005461010090046001600160a01b03163314610a37576040516282b42960e81b815260040160405180910390fd5b80600754610a459190612c26565b151580610a5e575080600854610a5b9190612c26565b15155b80610a75575080600954610a729190612c26565b15155b80610a8c575080600a54610a899190612c26565b15155b15610aaa576040516311b75c1560e31b815260040160405180910390fd5b60068190556040518181527f04ed835b488b4fcf0a212a46ed67cbbffc2fc81b5cb6a12c546572cbf7b7e06a906020015b60405180910390a150565b60005461010090046001600160a01b03163314610b15576040516282b42960e81b815260040160405180910390fd5b600c54811115610b3857604051631670f79760e01b815260040160405180910390fd5b600b8190556040518181527faab0ee9100629c405a4d75336e1640cc81e0608fb0d7f17389c06ee8d4f0219190602001610adb565b60005461010090046001600160a01b03163314610b9c576040516282b42960e81b815260040160405180910390fd5b60408051608081018252600f5481526010546020820152601154918101919091526012546060820152670de0b6b3a764000082351180610be75750670de0b6b3a76400008260200135115b80610bfd5750670de0b6b3a76400008260400135115b80610c135750670de0b6b3a76400008260600135115b80610c1f575080518235105b80610c31575080602001518260200135105b80610c43575080604001518260400135105b80610c55575080606001518260600135105b15610c735760405163161071fb60e11b815260040160405180910390fd5b81356013819055602080840135601481905560408086013560158190556060808801356016819055835196875294860193909352908401528201527f8c6093c7e65dd862e88162770c4e156e8a0da57d25d961e0fb6f28cfb7ff89a7906080016109fc565b60005461010090046001600160a01b03163314610d07576040516282b42960e81b815260040160405180910390fd5b6001600160a01b03821660009081526019602052604090205460ff16610d4057604051634bf121ab60e01b815260040160405180910390fd5b816001600160a01b031660188281548110610d5d57610d5d612c48565b6000918252602090912001546001600160a01b031614610d9057604051630f2700cb60e21b815260040160405180910390fd5b6001600160a01b0382166000908152601960205260409020805460ff1916905560188054610dc090600190612c74565b81548110610dd057610dd0612c48565b600091825260209091200154601880546001600160a01b039092169183908110610dfc57610dfc612c48565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506018805480610e3b57610e3b612c87565b600082815260208120820160001990810180546001600160a01b03191690559091019091556040516001600160a01b038416917f709b7450bfafda93efd91d29149870a794637ac9d696ca61625fd2f53548afe091a25050565b60005461010090046001600160a01b03163314610ec4576040516282b42960e81b815260040160405180910390fd5b6001600160a01b03811660009081526019602052604090205460ff1615610efe5760405163bd34634f60e01b815260040160405180910390fd5b6001600160a01b038116600081815260196020526040808220805460ff1916600190811790915560188054918201815583527fb13d2d76d1f4b7be834882e410b3e3a8afaf69f83600ae24db354391d2378d2e0180546001600160a01b03191684179055517f16ce88285cfd59829a5aa04370a5ec8090a18c14e7e7fb9d4b12a42291c098e39190a250565b60005461010090046001600160a01b03163314610fb9576040516282b42960e81b815260040160405180910390fd5b600381905560405181907f395a61259037298d1c4cd4bf177b64ad5995d38a9394573fcd9060d649314ad090600090a250565b60005461010090046001600160a01b0316331461101b576040516282b42960e81b815260040160405180910390fd5b600d5481101561103e57604051630a35539d60e41b815260040160405180910390fd5b600e8190556040518181527fa9e7961bb3342715dbecc208087a6a9df8986d524b3a0a829fd90f5a2f5ba53e90602001610adb565b60005461010090046001600160a01b031633146110a2576040516282b42960e81b815260040160405180910390fd5b6007548110806110bd57506006546110ba9082612c26565b15155b806110c9575060095481115b156110e75760405163f9c0959d60e01b815260040160405180910390fd5b60088190556040518181527f31407ddd1722f500b8aa2c18e112398626dd7c2869a5f80731ec30b244d9b5f290602001610adb565b60005461010090046001600160a01b0316331461114b576040516282b42960e81b815260040160405180910390fd5b600e5481111561116e57604051635a8f655760e01b815260040160405180910390fd5b600d8190556040518181527f490eb2a91746aa933c9ffe2f7939aa06498f3259139f8805f008b12c8c697a4690602001610adb565b60005461010090046001600160a01b031633146111d2576040516282b42960e81b815260040160405180910390fd5b600280546001600160a01b0319166001600160a01b0383169081179091556040517f03aa5b0fb65014eea89fda04a7bc11742014881f3c078f2c75b7226ce10d941890600090a250565b60005461010090046001600160a01b0316331461124b576040516282b42960e81b815260040160405180910390fd5b600580546001600160a01b0319166001600160a01b0383169081179091556040517fc049058b1df2dd8902739ceb78992df12fa8369c06c450b3c6787137b452fdd290600090a250565b60005461010090046001600160a01b031633146112c4576040516282b42960e81b815260040160405180910390fd5b6006548110806112df57506006546112dc9082612c26565b15155b806112eb575060085481115b1561130957604051630219d66360e11b815260040160405180910390fd5b60078190556040518181527f6f8175cdbac1b4d238abba24a17d2554d7b9750bbeda6414e191c478384b763190602001610adb565b60005461010090046001600160a01b0316331461136d576040516282b42960e81b815260040160405180910390fd5b600b548110156113905760405163019cfb7b60e61b815260040160405180910390fd5b600c8190556040518181527f4fa35c11ce9a45ae882c154ecb53ab5cac52a74a5b9b0373be36deb30c78297890602001610adb565b60005461010090046001600160a01b031633146113f4576040516282b42960e81b815260040160405180910390fd5b6114006017838361264b565b507f2a85276cf604a3822e19b29a3e97aebfbc47a19025c2e8f6e80b3af774dcbc3882826040516109fc929190612c9d565b6001600160a01b03881660009081526019602052604081205460ff1661146b57604051636e623f0f60e01b815260040160405180910390fd5b611476888686611f62565b60408051336020808301919091528183018d905282518083038401815260608301938490528051910120638d10a15b60e01b9092526000916001600160a01b038c1691638d10a15b916114d1918d908d908990606401612e0c565b6020604051808303816000875af11580156114f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115149190612e47565b6001600160a01b038181166000908152601a60205260409081902080546001600160a01b0319168e84169081179091556001549092166101008d015251919250907fabd0a413b2318f33298ccd074a9909d411d3f249cf2e65761d2dd1002e1cb7e5906115869084908d908d90612e64565b60405180910390a2601b805460018082019092557f3ad8aa4f87544323a9d1e5dd902f40c356527a7955687113db5f9a85ad579dc10180546001600160a01b0319166001600160a01b038481169182179092556000908152601c60209081526040808320805460ff1990811690961790558254909416909155825133918101919091529182018d90528b16906316abfc7090349060600160405160208183030381529060405280519060200120338b8b8a6040518763ffffffff1660e01b8152600401611657959493929190612e9f565b60206040518083038185885af1158015611675573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061169a9190612f02565b506000805460ff191660011781555b60175481101561174c57816001600160a01b0316637180c8ca601783815481106116d5576116d5612c48565b60009182526020909120015460405160e083901b6001600160e01b03191681526001600160a01b03909116600482015260016024820152604401600060405180830381600087803b15801561172957600080fd5b505af115801561173d573d6000803e3d6000fd5b505050508060010190506116a9565b5060015460405163ab033ea960e01b81526001600160a01b0391821660048201529082169063ab033ea990602401600060405180830381600087803b15801561179457600080fd5b505af11580156117a8573d6000803e3d6000fd5b50479250508115905061182057604051600090339083908381818185875af1925050503d80600081146117f7576040519150601f19603f3d011682016040523d82523d6000602084013e6117fc565b606091505b505090508061181e576040516312171d8360e31b815260040160405180910390fd5b505b509a9950505050505050505050565b6001600160a01b03871660009081526019602052604081205460ff1661186857604051636e623f0f60e01b815260040160405180910390fd5b611873878686611f62565b60408051336020808301919091528183018c905282518083038401815260608301938490528051910120631b06a35b60e01b9092526000916001600160a01b038b1691631b06a35b916118d0918c908c908a908a90606401612f1b565b6020604051808303816000875af11580156118ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119139190612e47565b9a9950505050505050505050565b6060601780548060200260200160405190810160405280929190818152602001828054801561197957602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161195b575b5050505050905090565b60005461010090046001600160a01b031633146119b2576040516282b42960e81b815260040160405180910390fd5b60008054610100600160a81b0319166101006001600160a01b03841690810291909117825560405190917f9d3e522e1e47a2f6009739342b9cc7b252a1888154e843ab55ee1c81745795ab91a250565b606081831115611a2557604051633b2735ab60e11b815260040160405180910390fd5b601b548210611a475760405163e0f7becb60e01b815260040160405180910390fd5b611a518383612c74565b611a5c906001612f5a565b67ffffffffffffffff811115611a7457611a746127d2565b604051908082528060200260200182016040528015611a9d578160200160208202803683370190505b509050825b828111611b1857601b8181548110611abc57611abc612c48565b9060005260206000200160009054906101000a90046001600160a01b03168285830381518110611aee57611aee612c48565b6001600160a01b039092166020928302919091019091015280611b1081612f6d565b915050611aa2565b5092915050565b611b4a6040518060800160405280600081526020016000815260200160008152602001600081525090565b5060408051608081018252600f548152601054602082015260115491810191909152601254606082015290565b60005461010090046001600160a01b03163314611ba6576040516282b42960e81b815260040160405180910390fd5b600480546001600160a01b0319166001600160a01b0383169081179091556040517fe5693914d19c789bdee50a362998c0bc8d035a835f9871da5d51152f0582c34f90600090a250565b6000601b8281548110611c0557611c05612c48565b6000918252602090912001546001600160a01b031692915050565b60005461010090046001600160a01b03163314611c4f576040516282b42960e81b815260040160405180910390fd5b600180546001600160a01b0319166001600160a01b0383169081179091556040517ff3e07b4bb4394f2ff320bd1dd151551dff304d5e948b401d8558b228482c97d890600090a250565b60005461010090046001600160a01b03163314611cc8576040516282b42960e81b815260040160405180910390fd5b600854811080611ce35750600654611ce09082612c26565b15155b80611cef5750600a5481115b15611d0d57604051633007ad0160e11b815260040160405180910390fd5b60098190556040518181527fe9ef3e93dff799d4db8a12ff79e0918a5a78d75b10527864f4b1c920f6f4f17890602001610adb565b611d6d6040518060800160405280600081526020016000815260200160008152602001600081525090565b50604080516080810182526013548152601454602082015260155491810191909152601654606082015290565b60005461010090046001600160a01b03163314611dc9576040516282b42960e81b815260040160405180910390fd5b600954811080611de45750600654611de19082612c26565b15155b15611e025760405163cfb699cb60e01b815260040160405180910390fd5b600a8190556040518181527f866fe9485f9983afceaa1385307b6eb0fd3df5a250ae2b0bf76dc9ddd316926b90602001610adb565b606081831115611e5a57604051633b2735ab60e11b815260040160405180910390fd5b6018548210611e7c5760405163e0f7becb60e01b815260040160405180910390fd5b611e868383612c74565b611e91906001612f5a565b67ffffffffffffffff811115611ea957611ea96127d2565b604051908082528060200260200182016040528015611ed2578160200160208202803683370190505b509050825b828111611b185760188181548110611ef157611ef1612c48565b9060005260206000200160009054906101000a90046001600160a01b03168285830381518110611f2357611f23612c48565b6001600160a01b039092166020928302919091019091015280611f4581612f6d565b915050611ed7565b600060188281548110611c0557611c05612c48565b6007548360c001511080611f7b57506008548360c00151115b80611f9657506006548360c00151611f939190612c26565b15155b15611fb457604051635428734d60e01b815260040160405180910390fd5b6009548360a001511080611fcd5750600a548360a00151115b80611fea57508260c001518360a00151611fe79190612c26565b15155b156120085760405163253fffcf60e11b815260040160405180910390fd5b60135461016084015151118061203c575060145460a08401516101608501516020015161203a916301e13380906122a7565b115b80612051575060155461016084015160400151115b80612066575060165461016084015160600151115b806120785750600f5461016084015151105b806120a1575060105460a08401516101608501516020015161209f916301e13380906122c5565b105b806120b6575060115461016084015160400151105b806120cb575060125461016084015160600151105b156120e957604051632d8768f960e01b815260040160405180910390fd5b600b548210806120fa5750600c5482115b15612118576040516330554de160e01b815260040160405180910390fd5b600061213d6611c37937e0800061213785671bc16d674ec800006122eb565b90612309565b600d5490915061214d9082612309565b821080612180575061217d612174671bc16d674ec8000061216e8685612309565b9061231f565b600e5490612334565b82115b1561219e576040516383ebdfb760e01b815260040160405180910390fd5b60006121ae838660a00151612349565b60025460208701519192506001600160a01b0391821691161415806121d95750600354856040015114155b806121f857506004546101208601516001600160a01b03908116911614155b8061221757506005546101408601516001600160a01b03908116911614155b8061223657506001546101008601516001600160a01b03908116911614155b80612244575060e085015115155b156122625760405163e8c02dd760e01b815260040160405180910390fd5b6002546001600160a01b03908116602087015260035460408701526004548116610120870152600554166101408601523061010086015260e090940193909352505050565b60008260001904841183021582026122be57600080fd5b5091020490565b60008260001904841183021582026122dc57600080fd5b50910281810615159190040190565b600061230083670de0b6b3a7640000846122a7565b90505b92915050565b60008183116123185781612300565b5090919050565b60006123008383670de0b6b3a76400006122a7565b60008183116123435782612300565b50919050565b60008061237a61236b61235d866064612f86565b66a5bbed86c5a0009061231f565b6748cd4072281e0000906122eb565b905061238e670de0b6b3a7640000826122eb565b90506123e68161216e6123b96123b46123af89670de0b6b3a7640000612f5a565b6123ee565b61241c565b6123e06123b46123ce8a8a6301e133806122a7565b6123af90670de0b6b3a7640000612f5a565b906122eb565b949350505050565b60006001600160ff1b038211156124185760405163396ea70160e11b815260040160405180910390fd5b5090565b600080821361243e5760405163e61b497560e01b815260040160405180910390fd5b506fffffffffffffffffffffffffffffffff811160071b81811c67ffffffffffffffff1060061b1781811c63ffffffff1060051b1781811c61ffff1060041b1781811c60ff10600390811b90911782811c600f1060021b1782811c909110600190811b90911782811c90911017609f8181036060019290921b91605f198201906124ca9084901c6123ee565b6c465772b2bbbb5f824b15207a3081018102606090811d6d0388eaa27412d5aca026815d636e018202811d6d0df99ac502031bf953eff472fdcc018202811d6d13cdffb29d51d99322bdff5f2211018202811d6d0a0f742023def783a307a986912e018202811d6d01920d8043ca89b5239253284e42018202811d6c0b7a86d7375468fac667a0a527016c29508e458543d8aa4df2abee7883018302821d6d0139601a2efabe717e604cbb4894018302821d6d02247f7a7b6594320649aa03aba1018302821d6c8c3f38e95a6b1ff2ab1c3b343619018302821d6d02384773bdf1ac5676facced60901901830290911d6cb9a025d814b29c212b8b1a07cd1901909102780a09507084cc699bb0e71ea869ffffffffffffffffffffffff190105711340daa0d5f769dba1915cef59f0815a5506027d0267a36c0c95b3975ab3ee5b203a7614a3f75373f047d803ae7b6687f2b391909102017d57115e47018c7177eebf7cd370a3356a1b7863008a5ae8028c72b88642840160ae1d92915050565b82805482825590600052602060002090810192821561269e579160200282015b8281111561269e5781546001600160a01b0319166001600160a01b0384351617825560209092019160019091019061266b565b506124189291505b8082111561241857600081556001016126a6565b60006080828403121561234357600080fd5b6000602082840312156126de57600080fd5b5035919050565b6001600160a01b03811681146126fa57600080fd5b50565b8035612708816126e5565b919050565b6000806040838503121561272057600080fd5b823561272b816126e5565b946020939093013593505050565b60006020828403121561274b57600080fd5b8135612756816126e5565b9392505050565b6000806020838503121561277057600080fd5b823567ffffffffffffffff8082111561278857600080fd5b818501915085601f83011261279c57600080fd5b8135818111156127ab57600080fd5b8660208260051b85010111156127c057600080fd5b60209290920196919550909350505050565b634e487b7160e01b600052604160045260246000fd5b604051610180810167ffffffffffffffff8111828210171561280c5761280c6127d2565b60405290565b60006080828403121561282457600080fd5b6040516080810181811067ffffffffffffffff82111715612847576128476127d2565b8060405250809150823581526020830135602082015260408301356040820152606083013560608201525092915050565b60006101e0828403121561288b57600080fd5b6128936127e8565b905061289e826126fd565b81526128ac602083016126fd565b602082015260408201356040820152606082013560608201526080820135608082015260a082013560a082015260c082013560c082015260e082013560e08201526101006128fb8184016126fd565b9082015261012061290d8382016126fd565b9082015261014061291f8382016126fd565b9082015261016061293284848301612812565b9082015292915050565b600082601f83011261294d57600080fd5b813567ffffffffffffffff80821115612968576129686127d2565b604051601f8301601f19908116603f01168101908282118183101715612990576129906127d2565b816040528381528660208588010111156129a957600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060008060008060008060006102e08a8c0312156129e857600080fd5b8935985060208a01356129fa816126e5565b9750612a098b60408c01612878565b96506102208a013567ffffffffffffffff80821115612a2757600080fd5b612a338d838e0161293c565b97506102408c013596506102608c013595506102808c013594506102a08c0135915080821115612a6257600080fd5b908b01906060828e031215612a7657600080fd5b604051606081018181108382111715612a9157612a916127d2565b6040528235612a9f816126e5565b815260208301358015158114612ab457600080fd5b6020820152604083013582811115612acb57600080fd5b612ad78f82860161293c565b6040830152508094505050506102c08a013590509295985092959850929598565b6000806000806000806000806102c0898b031215612b1557600080fd5b883597506020890135612b27816126e5565b9650612b368a60408b01612878565b955061022089013567ffffffffffffffff811115612b5357600080fd5b612b5f8b828c0161293c565b989b979a50959861024081013597610260820135975061028082013596506102a090910135945092505050565b6020808252825182820181905260009190848201906040850190845b81811015612bcd5783516001600160a01b031683529284019291840191600101612ba8565b50909695505050505050565b60008060408385031215612bec57600080fd5b50508035926020909101359150565b8151815260208083015190820152604080830151908201526060808301519082015260808101612303565b600082612c4357634e487b7160e01b600052601260045260246000fd5b500690565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b8181038181111561230357612303612c5e565b634e487b7160e01b600052603160045260246000fd5b60208082528181018390526000908460408401835b86811015612ce0578235612cc5816126e5565b6001600160a01b031682529183019190830190600101612cb2565b509695505050505050565b80516001600160a01b031682526020810151612d1260208401826001600160a01b03169052565b5060408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e083015261010080820151612d6a828501826001600160a01b03169052565b5050610120818101516001600160a01b0390811691840191909152610140808301519091169083015261016090810151805191830191909152602081015161018083015260408101516101a0830152606001516101c090910152565b6000815180845260005b81811015612dec57602081850181015186830182015201612dd0565b506000602082860101526020601f19601f83011685010191505092915050565b6000610240868352612e216020840187612ceb565b80610200840152612e3481840186612dc6565b9150508261022083015295945050505050565b600060208284031215612e5957600080fd5b8151612756816126e5565b6001600160a01b03841681526000610220612e826020840186612ceb565b80610200840152612e9581840185612dc6565b9695505050505050565b858152600060018060a01b03808716602084015285604084015284606084015260a060808401528084511660a0840152506020830151151560c08301526040830151606060e0840152612ef6610100840182612dc6565b98975050505050505050565b600060208284031215612f1457600080fd5b5051919050565b6000610260878352612f306020840188612ceb565b80610200840152612f4381840187612dc6565b610220840195909552505061024001529392505050565b8082018082111561230357612303612c5e565b600060018201612f7f57612f7f612c5e565b5060010190565b808202811582820484141761230357612303612c5e56fea26469706673582212202a0dedc739ec319748b4ad36ab20f7d9ed5a84fd53ddc96a82dbb3369175f16b64736f6c63430008140033"
)


class HyperdriveFactoryContract(Contract):
    """A web3.py Contract class for the HyperdriveFactory contract."""

    abi: ABI = hyperdrivefactory_abi
    bytecode: bytes = HexBytes(hyperdrivefactory_bytecode)

    def __init__(self, address: ChecksumAddress | None = None) -> None:
        try:
            # Initialize parent Contract class
            super().__init__(address=address)
            self.functions = HyperdriveFactoryContractFunctions(hyperdrivefactory_abi, self.w3, address)  # type: ignore
            self.events = HyperdriveFactoryContractEvents(hyperdrivefactory_abi, self.w3, address)  # type: ignore
            self.errors = HyperdriveFactoryContractErrors()

        except FallbackNotFound:
            print("Fallback function not found. Continuing...")

    events: HyperdriveFactoryContractEvents

    errors: HyperdriveFactoryContractErrors = HyperdriveFactoryContractErrors()

    functions: HyperdriveFactoryContractFunctions

    class ConstructorArgs(NamedTuple):
        """Arguments to pass the contract's constructor function."""

        factoryConfig: FactoryConfig

    @classmethod
    def constructor(cls, factoryConfig: FactoryConfig) -> ContractConstructor:  # type: ignore
        """Creates a transaction with the contract's constructor function.

        Parameters
        ----------

        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.

        """

        return super().constructor(dataclass_to_tuple(factoryConfig))

    @classmethod
    def deploy(cls, w3: Web3, account: LocalAccount | ChecksumAddress, constructorArgs: ConstructorArgs) -> Self:
        """Deploys and instance of the contract.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.
        """
        deployer = cls.factory(w3=w3)
        constructor_fn = deployer.constructor(*constructorArgs)

        # if an address is supplied, try to use a web3 default account
        if isinstance(account, str):
            tx_hash = constructor_fn.transact({"from": account})
            tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

            deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
            return deployed_contract

        # otherwise use the account provided.
        deployment_tx = constructor_fn.build_transaction()
        current_nonce = w3.eth.get_transaction_count(account.address)
        deployment_tx.update({"nonce": current_nonce})

        # Sign the transaction with local account private key
        signed_tx = account.sign_transaction(deployment_tx)

        # Send the signed transaction and wait for receipt
        tx_hash = w3.eth.send_raw_transaction(signed_tx.rawTransaction)
        tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

        deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
        return deployed_contract

    @classmethod
    def factory(cls, w3: Web3, class_name: str | None = None, **kwargs: Any) -> Type[Self]:
        """Deploys and instance of the contract.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        class_name: str | None
            The instance class name.

        Returns
        -------
        Self
            A deployed instance of the contract.
        """
        contract = super().factory(w3, class_name, **kwargs)
        contract.functions = HyperdriveFactoryContractFunctions(hyperdrivefactory_abi, w3, None)
        contract.errors = HyperdriveFactoryContractErrors()

        return contract
