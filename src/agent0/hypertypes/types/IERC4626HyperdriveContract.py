"""A web3.py Contract class for the IERC4626Hyperdrive contract.

DO NOT EDIT.  This file was generated by pypechain.  See documentation at
https://github.com/delvtech/pypechain"""

# contracts have PascalCase names
# pylint: disable=invalid-name

# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments

# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return

# This file is bound to get very long depending on contract sizes.
# pylint: disable=too-many-lines

# methods are overriden with specific arguments instead of generic *args, **kwargs
# pylint: disable=arguments-differ

# consumers have too many opinions on line length
# pylint: disable=line-too-long


from __future__ import annotations

from typing import Any, Iterable, NamedTuple, Sequence, Type, cast

from eth_abi.codec import ABICodec
from eth_abi.registry import registry as default_registry
from eth_account.signers.local import LocalAccount
from eth_typing import ChecksumAddress, HexStr
from hexbytes import HexBytes
from typing_extensions import Self
from web3 import Web3
from web3._utils.filters import LogFilter
from web3.contract.contract import (
    Contract,
    ContractConstructor,
    ContractEvent,
    ContractEvents,
    ContractFunction,
    ContractFunctions,
)
from web3.exceptions import FallbackNotFound
from web3.types import ABI, ABIFunction, BlockIdentifier, CallOverride, EventData, TxParams

from .IHyperdriveTypes import Checkpoint, Fees, MarketState, Options, PoolConfig, PoolInfo, WithdrawPool
from .utilities import dataclass_to_tuple, get_abi_input_types, rename_returned_types

structs = {
    "Options": Options,
    "Checkpoint": Checkpoint,
    "MarketState": MarketState,
    "Fees": Fees,
    "PoolConfig": PoolConfig,
    "PoolInfo": PoolInfo,
    "WithdrawPool": WithdrawPool,
}


class IERC4626HyperdrivePERMIT_TYPEHASHContractFunction(ContractFunction):
    """ContractFunction for the PERMIT_TYPEHASH method."""

    def __call__(self) -> IERC4626HyperdrivePERMIT_TYPEHASHContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bytes:
        """returns bytes."""
        # Define the expected return types from the smart contract call

        return_types = bytes

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(bytes, rename_returned_types(structs, return_types, raw_values))


class IERC4626HyperdriveAddLiquidityContractFunction(ContractFunction):
    """ContractFunction for the addLiquidity method."""

    def __call__(self, contribution: int, minLpSharePrice: int, minApr: int, maxApr: int, options: Options) -> IERC4626HyperdriveAddLiquidityContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(contribution),
            dataclass_to_tuple(minLpSharePrice),
            dataclass_to_tuple(minApr),
            dataclass_to_tuple(maxApr),
            dataclass_to_tuple(options),
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(int, rename_returned_types(structs, return_types, raw_values))


class IERC4626HyperdriveBalanceOfContractFunction(ContractFunction):
    """ContractFunction for the balanceOf method."""

    def __call__(self, tokenId: int, owner: str) -> IERC4626HyperdriveBalanceOfContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(tokenId), dataclass_to_tuple(owner))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(int, rename_returned_types(structs, return_types, raw_values))


class IERC4626HyperdriveBaseTokenContractFunction(ContractFunction):
    """ContractFunction for the baseToken method."""

    def __call__(self) -> IERC4626HyperdriveBaseTokenContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(str, rename_returned_types(structs, return_types, raw_values))


class IERC4626HyperdriveBatchTransferFromContractFunction(ContractFunction):
    """ContractFunction for the batchTransferFrom method."""

    def __call__(self, _from: str, to: str, ids: list[int], values: list[int]) -> IERC4626HyperdriveBatchTransferFromContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(_from), dataclass_to_tuple(to), dataclass_to_tuple(ids), dataclass_to_tuple(values)
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class IERC4626HyperdriveCheckpointContractFunction(ContractFunction):
    """ContractFunction for the checkpoint method."""

    def __call__(self, checkpointTime: int) -> IERC4626HyperdriveCheckpointContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(checkpointTime))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class IERC4626HyperdriveCloseLongContractFunction(ContractFunction):
    """ContractFunction for the closeLong method."""

    def __call__(self, maturityTime: int, bondAmount: int, minOutput: int, options: Options) -> IERC4626HyperdriveCloseLongContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(maturityTime),
            dataclass_to_tuple(bondAmount),
            dataclass_to_tuple(minOutput),
            dataclass_to_tuple(options),
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(int, rename_returned_types(structs, return_types, raw_values))


class IERC4626HyperdriveCloseShortContractFunction(ContractFunction):
    """ContractFunction for the closeShort method."""

    def __call__(self, maturityTime: int, bondAmount: int, minOutput: int, options: Options) -> IERC4626HyperdriveCloseShortContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(maturityTime),
            dataclass_to_tuple(bondAmount),
            dataclass_to_tuple(minOutput),
            dataclass_to_tuple(options),
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(int, rename_returned_types(structs, return_types, raw_values))


class IERC4626HyperdriveCollectGovernanceFeeContractFunction(ContractFunction):
    """ContractFunction for the collectGovernanceFee method."""

    def __call__(self, options: Options) -> IERC4626HyperdriveCollectGovernanceFeeContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(options))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(int, rename_returned_types(structs, return_types, raw_values))


class IERC4626HyperdriveDecimalsContractFunction(ContractFunction):
    """ContractFunction for the decimals method."""

    def __call__(self) -> IERC4626HyperdriveDecimalsContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(int, rename_returned_types(structs, return_types, raw_values))


class IERC4626HyperdriveDomainSeparatorContractFunction(ContractFunction):
    """ContractFunction for the domainSeparator method."""

    def __call__(self) -> IERC4626HyperdriveDomainSeparatorContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bytes:
        """returns bytes."""
        # Define the expected return types from the smart contract call

        return_types = bytes

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(bytes, rename_returned_types(structs, return_types, raw_values))


class IERC4626HyperdriveGetCheckpointContractFunction(ContractFunction):
    """ContractFunction for the getCheckpoint method."""

    def __call__(self, checkpointTime: int) -> IERC4626HyperdriveGetCheckpointContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(checkpointTime))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> Checkpoint:
        """returns Checkpoint."""
        # Define the expected return types from the smart contract call

        return_types = Checkpoint

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(Checkpoint, rename_returned_types(structs, return_types, raw_values))


class IERC4626HyperdriveGetCheckpointExposureContractFunction(ContractFunction):
    """ContractFunction for the getCheckpointExposure method."""

    def __call__(self, checkpointTime: int) -> IERC4626HyperdriveGetCheckpointExposureContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(checkpointTime))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(int, rename_returned_types(structs, return_types, raw_values))


class IERC4626HyperdriveGetMarketStateContractFunction(ContractFunction):
    """ContractFunction for the getMarketState method."""

    def __call__(self) -> IERC4626HyperdriveGetMarketStateContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> MarketState:
        """returns MarketState."""
        # Define the expected return types from the smart contract call

        return_types = MarketState

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(MarketState, rename_returned_types(structs, return_types, raw_values))


class IERC4626HyperdriveGetPoolConfigContractFunction(ContractFunction):
    """ContractFunction for the getPoolConfig method."""

    def __call__(self) -> IERC4626HyperdriveGetPoolConfigContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> PoolConfig:
        """returns PoolConfig."""
        # Define the expected return types from the smart contract call

        return_types = PoolConfig

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(PoolConfig, rename_returned_types(structs, return_types, raw_values))


class IERC4626HyperdriveGetPoolInfoContractFunction(ContractFunction):
    """ContractFunction for the getPoolInfo method."""

    def __call__(self) -> IERC4626HyperdriveGetPoolInfoContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> PoolInfo:
        """returns PoolInfo."""
        # Define the expected return types from the smart contract call

        return_types = PoolInfo

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(PoolInfo, rename_returned_types(structs, return_types, raw_values))


class IERC4626HyperdriveGetUncollectedGovernanceFeesContractFunction(ContractFunction):
    """ContractFunction for the getUncollectedGovernanceFees method."""

    def __call__(self) -> IERC4626HyperdriveGetUncollectedGovernanceFeesContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(int, rename_returned_types(structs, return_types, raw_values))


class IERC4626HyperdriveGetWithdrawPoolContractFunction(ContractFunction):
    """ContractFunction for the getWithdrawPool method."""

    def __call__(self) -> IERC4626HyperdriveGetWithdrawPoolContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> WithdrawPool:
        """returns WithdrawPool."""
        # Define the expected return types from the smart contract call

        return_types = WithdrawPool

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(WithdrawPool, rename_returned_types(structs, return_types, raw_values))


class IERC4626HyperdriveInitializeContractFunction(ContractFunction):
    """ContractFunction for the initialize method."""

    def __call__(self, contribution: int, apr: int, options: Options) -> IERC4626HyperdriveInitializeContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(contribution), dataclass_to_tuple(apr), dataclass_to_tuple(options))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(int, rename_returned_types(structs, return_types, raw_values))


class IERC4626HyperdriveIsApprovedForAllContractFunction(ContractFunction):
    """ContractFunction for the isApprovedForAll method."""

    def __call__(self, owner: str, spender: str) -> IERC4626HyperdriveIsApprovedForAllContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(owner), dataclass_to_tuple(spender))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bool:
        """returns bool."""
        # Define the expected return types from the smart contract call

        return_types = bool

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(bool, rename_returned_types(structs, return_types, raw_values))


class IERC4626HyperdriveIsPauserContractFunction(ContractFunction):
    """ContractFunction for the isPauser method."""

    def __call__(self, account: str) -> IERC4626HyperdriveIsPauserContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(account))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bool:
        """returns bool."""
        # Define the expected return types from the smart contract call

        return_types = bool

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(bool, rename_returned_types(structs, return_types, raw_values))


class IERC4626HyperdriveLoadContractFunction(ContractFunction):
    """ContractFunction for the load method."""

    def __call__(self, slots: list[int]) -> IERC4626HyperdriveLoadContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(slots))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[bytes]:
        """returns list[bytes]."""
        # Define the expected return types from the smart contract call

        return_types = list[bytes]

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(list[bytes], rename_returned_types(structs, return_types, raw_values))


class IERC4626HyperdriveNameContractFunction(ContractFunction):
    """ContractFunction for the name method."""

    def __call__(self, tokenId: int) -> IERC4626HyperdriveNameContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(tokenId))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(str, rename_returned_types(structs, return_types, raw_values))


class IERC4626HyperdriveNoncesContractFunction(ContractFunction):
    """ContractFunction for the nonces method."""

    def __call__(self, owner: str) -> IERC4626HyperdriveNoncesContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(owner))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(int, rename_returned_types(structs, return_types, raw_values))


class IERC4626HyperdriveOpenLongContractFunction(ContractFunction):
    """ContractFunction for the openLong method."""

    class ReturnValues(NamedTuple):
        """The return named tuple for OpenLong."""

        arg1: int
        arg2: int

    def __call__(self, amount: int, minOutput: int, minVaultSharePrice: int, options: Options) -> IERC4626HyperdriveOpenLongContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(amount),
            dataclass_to_tuple(minOutput),
            dataclass_to_tuple(minVaultSharePrice),
            dataclass_to_tuple(options),
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> ReturnValues:
        """returns ReturnValues."""
        # Define the expected return types from the smart contract call

        return_types = [int, int]

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return self.ReturnValues(*rename_returned_types(structs, return_types, raw_values))


class IERC4626HyperdriveOpenShortContractFunction(ContractFunction):
    """ContractFunction for the openShort method."""

    class ReturnValues(NamedTuple):
        """The return named tuple for OpenShort."""

        arg1: int
        arg2: int

    def __call__(self, bondAmount: int, maxDeposit: int, minVaultSharePrice: int, options: Options) -> IERC4626HyperdriveOpenShortContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(bondAmount),
            dataclass_to_tuple(maxDeposit),
            dataclass_to_tuple(minVaultSharePrice),
            dataclass_to_tuple(options),
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> ReturnValues:
        """returns ReturnValues."""
        # Define the expected return types from the smart contract call

        return_types = [int, int]

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return self.ReturnValues(*rename_returned_types(structs, return_types, raw_values))


class IERC4626HyperdrivePauseContractFunction(ContractFunction):
    """ContractFunction for the pause method."""

    def __call__(self, status: bool) -> IERC4626HyperdrivePauseContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(status))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class IERC4626HyperdrivePerTokenApprovalsContractFunction(ContractFunction):
    """ContractFunction for the perTokenApprovals method."""

    def __call__(self, tokenId: int, owner: str, spender: str) -> IERC4626HyperdrivePerTokenApprovalsContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(tokenId), dataclass_to_tuple(owner), dataclass_to_tuple(spender))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(int, rename_returned_types(structs, return_types, raw_values))


class IERC4626HyperdrivePermitForAllContractFunction(ContractFunction):
    """ContractFunction for the permitForAll method."""

    def __call__(self, owner: str, spender: str, approved: bool, deadline: int, v: int, r: bytes, s: bytes) -> IERC4626HyperdrivePermitForAllContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(owner),
            dataclass_to_tuple(spender),
            dataclass_to_tuple(approved),
            dataclass_to_tuple(deadline),
            dataclass_to_tuple(v),
            dataclass_to_tuple(r),
            dataclass_to_tuple(s),
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class IERC4626HyperdriveRedeemWithdrawalSharesContractFunction(ContractFunction):
    """ContractFunction for the redeemWithdrawalShares method."""

    class ReturnValues(NamedTuple):
        """The return named tuple for RedeemWithdrawalShares."""

        arg1: int
        arg2: int

    def __call__(self, withdrawalShares: int, minOutputPerShare: int, options: Options) -> IERC4626HyperdriveRedeemWithdrawalSharesContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(withdrawalShares), dataclass_to_tuple(minOutputPerShare), dataclass_to_tuple(options)
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> ReturnValues:
        """returns ReturnValues."""
        # Define the expected return types from the smart contract call

        return_types = [int, int]

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return self.ReturnValues(*rename_returned_types(structs, return_types, raw_values))


class IERC4626HyperdriveRemoveLiquidityContractFunction(ContractFunction):
    """ContractFunction for the removeLiquidity method."""

    class ReturnValues(NamedTuple):
        """The return named tuple for RemoveLiquidity."""

        arg1: int
        arg2: int

    def __call__(self, lpShares: int, minOutputPerShare: int, options: Options) -> IERC4626HyperdriveRemoveLiquidityContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(lpShares), dataclass_to_tuple(minOutputPerShare), dataclass_to_tuple(options)
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> ReturnValues:
        """returns ReturnValues."""
        # Define the expected return types from the smart contract call

        return_types = [int, int]

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return self.ReturnValues(*rename_returned_types(structs, return_types, raw_values))


class IERC4626HyperdriveSetApprovalContractFunction(ContractFunction):
    """ContractFunction for the setApproval method."""

    def __call__(self, tokenID: int, operator: str, amount: int) -> IERC4626HyperdriveSetApprovalContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(tokenID), dataclass_to_tuple(operator), dataclass_to_tuple(amount))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class IERC4626HyperdriveSetApprovalBridgeContractFunction(ContractFunction):
    """ContractFunction for the setApprovalBridge method."""

    def __call__(self, tokenID: int, operator: str, amount: int, caller: str) -> IERC4626HyperdriveSetApprovalBridgeContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(tokenID),
            dataclass_to_tuple(operator),
            dataclass_to_tuple(amount),
            dataclass_to_tuple(caller),
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class IERC4626HyperdriveSetApprovalForAllContractFunction(ContractFunction):
    """ContractFunction for the setApprovalForAll method."""

    def __call__(self, operator: str, approved: bool) -> IERC4626HyperdriveSetApprovalForAllContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(operator), dataclass_to_tuple(approved))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class IERC4626HyperdriveSetGovernanceContractFunction(ContractFunction):
    """ContractFunction for the setGovernance method."""

    def __call__(self, who: str) -> IERC4626HyperdriveSetGovernanceContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(who))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class IERC4626HyperdriveSetPauserContractFunction(ContractFunction):
    """ContractFunction for the setPauser method."""

    def __call__(self, who: str, status: bool) -> IERC4626HyperdriveSetPauserContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(who), dataclass_to_tuple(status))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class IERC4626HyperdriveSweepContractFunction(ContractFunction):
    """ContractFunction for the sweep method."""

    def __call__(self, target: str) -> IERC4626HyperdriveSweepContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(target))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class IERC4626HyperdriveSymbolContractFunction(ContractFunction):
    """ContractFunction for the symbol method."""

    def __call__(self, tokenId: int) -> IERC4626HyperdriveSymbolContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(tokenId))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(str, rename_returned_types(structs, return_types, raw_values))


class IERC4626HyperdriveTarget0ContractFunction(ContractFunction):
    """ContractFunction for the target0 method."""

    def __call__(self) -> IERC4626HyperdriveTarget0ContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(str, rename_returned_types(structs, return_types, raw_values))


class IERC4626HyperdriveTarget1ContractFunction(ContractFunction):
    """ContractFunction for the target1 method."""

    def __call__(self) -> IERC4626HyperdriveTarget1ContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(str, rename_returned_types(structs, return_types, raw_values))


class IERC4626HyperdriveTarget2ContractFunction(ContractFunction):
    """ContractFunction for the target2 method."""

    def __call__(self) -> IERC4626HyperdriveTarget2ContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(str, rename_returned_types(structs, return_types, raw_values))


class IERC4626HyperdriveTarget3ContractFunction(ContractFunction):
    """ContractFunction for the target3 method."""

    def __call__(self) -> IERC4626HyperdriveTarget3ContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(str, rename_returned_types(structs, return_types, raw_values))


class IERC4626HyperdriveTarget4ContractFunction(ContractFunction):
    """ContractFunction for the target4 method."""

    def __call__(self) -> IERC4626HyperdriveTarget4ContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(str, rename_returned_types(structs, return_types, raw_values))


class IERC4626HyperdriveTotalSupplyContractFunction(ContractFunction):
    """ContractFunction for the totalSupply method."""

    def __call__(self, tokenId: int) -> IERC4626HyperdriveTotalSupplyContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(tokenId))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(int, rename_returned_types(structs, return_types, raw_values))


class IERC4626HyperdriveTransferFromContractFunction(ContractFunction):
    """ContractFunction for the transferFrom method."""

    def __call__(self, tokenID: int, _from: str, to: str, amount: int) -> IERC4626HyperdriveTransferFromContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(tokenID), dataclass_to_tuple(_from), dataclass_to_tuple(to), dataclass_to_tuple(amount)
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class IERC4626HyperdriveTransferFromBridgeContractFunction(ContractFunction):
    """ContractFunction for the transferFromBridge method."""

    def __call__(self, tokenID: int, _from: str, to: str, amount: int, caller: str) -> IERC4626HyperdriveTransferFromBridgeContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(tokenID),
            dataclass_to_tuple(_from),
            dataclass_to_tuple(to),
            dataclass_to_tuple(amount),
            dataclass_to_tuple(caller),
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class IERC4626HyperdriveVaultContractFunction(ContractFunction):
    """ContractFunction for the vault method."""

    def __call__(self) -> IERC4626HyperdriveVaultContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(str, rename_returned_types(structs, return_types, raw_values))


class IERC4626HyperdriveContractFunctions(ContractFunctions):
    """ContractFunctions for the IERC4626Hyperdrive contract."""

    PERMIT_TYPEHASH: IERC4626HyperdrivePERMIT_TYPEHASHContractFunction

    addLiquidity: IERC4626HyperdriveAddLiquidityContractFunction

    balanceOf: IERC4626HyperdriveBalanceOfContractFunction

    baseToken: IERC4626HyperdriveBaseTokenContractFunction

    batchTransferFrom: IERC4626HyperdriveBatchTransferFromContractFunction

    checkpoint: IERC4626HyperdriveCheckpointContractFunction

    closeLong: IERC4626HyperdriveCloseLongContractFunction

    closeShort: IERC4626HyperdriveCloseShortContractFunction

    collectGovernanceFee: IERC4626HyperdriveCollectGovernanceFeeContractFunction

    decimals: IERC4626HyperdriveDecimalsContractFunction

    domainSeparator: IERC4626HyperdriveDomainSeparatorContractFunction

    getCheckpoint: IERC4626HyperdriveGetCheckpointContractFunction

    getCheckpointExposure: IERC4626HyperdriveGetCheckpointExposureContractFunction

    getMarketState: IERC4626HyperdriveGetMarketStateContractFunction

    getPoolConfig: IERC4626HyperdriveGetPoolConfigContractFunction

    getPoolInfo: IERC4626HyperdriveGetPoolInfoContractFunction

    getUncollectedGovernanceFees: IERC4626HyperdriveGetUncollectedGovernanceFeesContractFunction

    getWithdrawPool: IERC4626HyperdriveGetWithdrawPoolContractFunction

    initialize: IERC4626HyperdriveInitializeContractFunction

    isApprovedForAll: IERC4626HyperdriveIsApprovedForAllContractFunction

    isPauser: IERC4626HyperdriveIsPauserContractFunction

    load: IERC4626HyperdriveLoadContractFunction

    name: IERC4626HyperdriveNameContractFunction

    nonces: IERC4626HyperdriveNoncesContractFunction

    openLong: IERC4626HyperdriveOpenLongContractFunction

    openShort: IERC4626HyperdriveOpenShortContractFunction

    pause: IERC4626HyperdrivePauseContractFunction

    perTokenApprovals: IERC4626HyperdrivePerTokenApprovalsContractFunction

    permitForAll: IERC4626HyperdrivePermitForAllContractFunction

    redeemWithdrawalShares: IERC4626HyperdriveRedeemWithdrawalSharesContractFunction

    removeLiquidity: IERC4626HyperdriveRemoveLiquidityContractFunction

    setApproval: IERC4626HyperdriveSetApprovalContractFunction

    setApprovalBridge: IERC4626HyperdriveSetApprovalBridgeContractFunction

    setApprovalForAll: IERC4626HyperdriveSetApprovalForAllContractFunction

    setGovernance: IERC4626HyperdriveSetGovernanceContractFunction

    setPauser: IERC4626HyperdriveSetPauserContractFunction

    sweep: IERC4626HyperdriveSweepContractFunction

    symbol: IERC4626HyperdriveSymbolContractFunction

    target0: IERC4626HyperdriveTarget0ContractFunction

    target1: IERC4626HyperdriveTarget1ContractFunction

    target2: IERC4626HyperdriveTarget2ContractFunction

    target3: IERC4626HyperdriveTarget3ContractFunction

    target4: IERC4626HyperdriveTarget4ContractFunction

    totalSupply: IERC4626HyperdriveTotalSupplyContractFunction

    transferFrom: IERC4626HyperdriveTransferFromContractFunction

    transferFromBridge: IERC4626HyperdriveTransferFromBridgeContractFunction

    vault: IERC4626HyperdriveVaultContractFunction

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
        decode_tuples: bool | None = False,
    ) -> None:
        super().__init__(abi, w3, address, decode_tuples)
        self.PERMIT_TYPEHASH = IERC4626HyperdrivePERMIT_TYPEHASHContractFunction.factory(
            "PERMIT_TYPEHASH",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="PERMIT_TYPEHASH",
        )
        self.addLiquidity = IERC4626HyperdriveAddLiquidityContractFunction.factory(
            "addLiquidity",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="addLiquidity",
        )
        self.balanceOf = IERC4626HyperdriveBalanceOfContractFunction.factory(
            "balanceOf",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="balanceOf",
        )
        self.baseToken = IERC4626HyperdriveBaseTokenContractFunction.factory(
            "baseToken",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="baseToken",
        )
        self.batchTransferFrom = IERC4626HyperdriveBatchTransferFromContractFunction.factory(
            "batchTransferFrom",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="batchTransferFrom",
        )
        self.checkpoint = IERC4626HyperdriveCheckpointContractFunction.factory(
            "checkpoint",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="checkpoint",
        )
        self.closeLong = IERC4626HyperdriveCloseLongContractFunction.factory(
            "closeLong",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="closeLong",
        )
        self.closeShort = IERC4626HyperdriveCloseShortContractFunction.factory(
            "closeShort",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="closeShort",
        )
        self.collectGovernanceFee = IERC4626HyperdriveCollectGovernanceFeeContractFunction.factory(
            "collectGovernanceFee",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="collectGovernanceFee",
        )
        self.decimals = IERC4626HyperdriveDecimalsContractFunction.factory(
            "decimals",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="decimals",
        )
        self.domainSeparator = IERC4626HyperdriveDomainSeparatorContractFunction.factory(
            "domainSeparator",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="domainSeparator",
        )
        self.getCheckpoint = IERC4626HyperdriveGetCheckpointContractFunction.factory(
            "getCheckpoint",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="getCheckpoint",
        )
        self.getCheckpointExposure = IERC4626HyperdriveGetCheckpointExposureContractFunction.factory(
            "getCheckpointExposure",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="getCheckpointExposure",
        )
        self.getMarketState = IERC4626HyperdriveGetMarketStateContractFunction.factory(
            "getMarketState",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="getMarketState",
        )
        self.getPoolConfig = IERC4626HyperdriveGetPoolConfigContractFunction.factory(
            "getPoolConfig",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="getPoolConfig",
        )
        self.getPoolInfo = IERC4626HyperdriveGetPoolInfoContractFunction.factory(
            "getPoolInfo",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="getPoolInfo",
        )
        self.getUncollectedGovernanceFees = IERC4626HyperdriveGetUncollectedGovernanceFeesContractFunction.factory(
            "getUncollectedGovernanceFees",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="getUncollectedGovernanceFees",
        )
        self.getWithdrawPool = IERC4626HyperdriveGetWithdrawPoolContractFunction.factory(
            "getWithdrawPool",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="getWithdrawPool",
        )
        self.initialize = IERC4626HyperdriveInitializeContractFunction.factory(
            "initialize",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="initialize",
        )
        self.isApprovedForAll = IERC4626HyperdriveIsApprovedForAllContractFunction.factory(
            "isApprovedForAll",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="isApprovedForAll",
        )
        self.isPauser = IERC4626HyperdriveIsPauserContractFunction.factory(
            "isPauser",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="isPauser",
        )
        self.load = IERC4626HyperdriveLoadContractFunction.factory(
            "load",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="load",
        )
        self.name = IERC4626HyperdriveNameContractFunction.factory(
            "name",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="name",
        )
        self.nonces = IERC4626HyperdriveNoncesContractFunction.factory(
            "nonces",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="nonces",
        )
        self.openLong = IERC4626HyperdriveOpenLongContractFunction.factory(
            "openLong",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="openLong",
        )
        self.openShort = IERC4626HyperdriveOpenShortContractFunction.factory(
            "openShort",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="openShort",
        )
        self.pause = IERC4626HyperdrivePauseContractFunction.factory(
            "pause",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="pause",
        )
        self.perTokenApprovals = IERC4626HyperdrivePerTokenApprovalsContractFunction.factory(
            "perTokenApprovals",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="perTokenApprovals",
        )
        self.permitForAll = IERC4626HyperdrivePermitForAllContractFunction.factory(
            "permitForAll",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="permitForAll",
        )
        self.redeemWithdrawalShares = IERC4626HyperdriveRedeemWithdrawalSharesContractFunction.factory(
            "redeemWithdrawalShares",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="redeemWithdrawalShares",
        )
        self.removeLiquidity = IERC4626HyperdriveRemoveLiquidityContractFunction.factory(
            "removeLiquidity",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="removeLiquidity",
        )
        self.setApproval = IERC4626HyperdriveSetApprovalContractFunction.factory(
            "setApproval",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="setApproval",
        )
        self.setApprovalBridge = IERC4626HyperdriveSetApprovalBridgeContractFunction.factory(
            "setApprovalBridge",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="setApprovalBridge",
        )
        self.setApprovalForAll = IERC4626HyperdriveSetApprovalForAllContractFunction.factory(
            "setApprovalForAll",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="setApprovalForAll",
        )
        self.setGovernance = IERC4626HyperdriveSetGovernanceContractFunction.factory(
            "setGovernance",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="setGovernance",
        )
        self.setPauser = IERC4626HyperdriveSetPauserContractFunction.factory(
            "setPauser",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="setPauser",
        )
        self.sweep = IERC4626HyperdriveSweepContractFunction.factory(
            "sweep",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="sweep",
        )
        self.symbol = IERC4626HyperdriveSymbolContractFunction.factory(
            "symbol",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="symbol",
        )
        self.target0 = IERC4626HyperdriveTarget0ContractFunction.factory(
            "target0",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="target0",
        )
        self.target1 = IERC4626HyperdriveTarget1ContractFunction.factory(
            "target1",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="target1",
        )
        self.target2 = IERC4626HyperdriveTarget2ContractFunction.factory(
            "target2",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="target2",
        )
        self.target3 = IERC4626HyperdriveTarget3ContractFunction.factory(
            "target3",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="target3",
        )
        self.target4 = IERC4626HyperdriveTarget4ContractFunction.factory(
            "target4",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="target4",
        )
        self.totalSupply = IERC4626HyperdriveTotalSupplyContractFunction.factory(
            "totalSupply",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="totalSupply",
        )
        self.transferFrom = IERC4626HyperdriveTransferFromContractFunction.factory(
            "transferFrom",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="transferFrom",
        )
        self.transferFromBridge = IERC4626HyperdriveTransferFromBridgeContractFunction.factory(
            "transferFromBridge",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="transferFromBridge",
        )
        self.vault = IERC4626HyperdriveVaultContractFunction.factory(
            "vault",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="vault",
        )


class IERC4626HyperdriveAddLiquidityContractEvent(ContractEvent):
    """ContractEvent for AddLiquidity."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "IERC4626HyperdriveAddLiquidityContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["IERC4626HyperdriveAddLiquidityContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "IERC4626HyperdriveAddLiquidityContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["IERC4626HyperdriveAddLiquidityContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class IERC4626HyperdriveApprovalContractEvent(ContractEvent):
    """ContractEvent for Approval."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "IERC4626HyperdriveApprovalContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["IERC4626HyperdriveApprovalContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "IERC4626HyperdriveApprovalContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["IERC4626HyperdriveApprovalContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class IERC4626HyperdriveApprovalForAllContractEvent(ContractEvent):
    """ContractEvent for ApprovalForAll."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "IERC4626HyperdriveApprovalForAllContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["IERC4626HyperdriveApprovalForAllContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "IERC4626HyperdriveApprovalForAllContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["IERC4626HyperdriveApprovalForAllContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class IERC4626HyperdriveCloseLongContractEvent(ContractEvent):
    """ContractEvent for CloseLong."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "IERC4626HyperdriveCloseLongContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["IERC4626HyperdriveCloseLongContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "IERC4626HyperdriveCloseLongContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["IERC4626HyperdriveCloseLongContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class IERC4626HyperdriveCloseShortContractEvent(ContractEvent):
    """ContractEvent for CloseShort."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "IERC4626HyperdriveCloseShortContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["IERC4626HyperdriveCloseShortContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "IERC4626HyperdriveCloseShortContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["IERC4626HyperdriveCloseShortContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class IERC4626HyperdriveCollectGovernanceFeeContractEvent(ContractEvent):
    """ContractEvent for CollectGovernanceFee."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "IERC4626HyperdriveCollectGovernanceFeeContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["IERC4626HyperdriveCollectGovernanceFeeContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "IERC4626HyperdriveCollectGovernanceFeeContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["IERC4626HyperdriveCollectGovernanceFeeContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class IERC4626HyperdriveCreateCheckpointContractEvent(ContractEvent):
    """ContractEvent for CreateCheckpoint."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "IERC4626HyperdriveCreateCheckpointContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["IERC4626HyperdriveCreateCheckpointContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "IERC4626HyperdriveCreateCheckpointContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["IERC4626HyperdriveCreateCheckpointContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class IERC4626HyperdriveGovernanceUpdatedContractEvent(ContractEvent):
    """ContractEvent for GovernanceUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "IERC4626HyperdriveGovernanceUpdatedContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["IERC4626HyperdriveGovernanceUpdatedContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "IERC4626HyperdriveGovernanceUpdatedContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["IERC4626HyperdriveGovernanceUpdatedContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class IERC4626HyperdriveInitializeContractEvent(ContractEvent):
    """ContractEvent for Initialize."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "IERC4626HyperdriveInitializeContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["IERC4626HyperdriveInitializeContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "IERC4626HyperdriveInitializeContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["IERC4626HyperdriveInitializeContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class IERC4626HyperdriveOpenLongContractEvent(ContractEvent):
    """ContractEvent for OpenLong."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "IERC4626HyperdriveOpenLongContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["IERC4626HyperdriveOpenLongContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "IERC4626HyperdriveOpenLongContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["IERC4626HyperdriveOpenLongContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class IERC4626HyperdriveOpenShortContractEvent(ContractEvent):
    """ContractEvent for OpenShort."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "IERC4626HyperdriveOpenShortContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["IERC4626HyperdriveOpenShortContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "IERC4626HyperdriveOpenShortContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["IERC4626HyperdriveOpenShortContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class IERC4626HyperdrivePauseStatusUpdatedContractEvent(ContractEvent):
    """ContractEvent for PauseStatusUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "IERC4626HyperdrivePauseStatusUpdatedContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["IERC4626HyperdrivePauseStatusUpdatedContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "IERC4626HyperdrivePauseStatusUpdatedContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["IERC4626HyperdrivePauseStatusUpdatedContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class IERC4626HyperdrivePauserUpdatedContractEvent(ContractEvent):
    """ContractEvent for PauserUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "IERC4626HyperdrivePauserUpdatedContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["IERC4626HyperdrivePauserUpdatedContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "IERC4626HyperdrivePauserUpdatedContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["IERC4626HyperdrivePauserUpdatedContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class IERC4626HyperdriveRedeemWithdrawalSharesContractEvent(ContractEvent):
    """ContractEvent for RedeemWithdrawalShares."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "IERC4626HyperdriveRedeemWithdrawalSharesContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["IERC4626HyperdriveRedeemWithdrawalSharesContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "IERC4626HyperdriveRedeemWithdrawalSharesContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["IERC4626HyperdriveRedeemWithdrawalSharesContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class IERC4626HyperdriveRemoveLiquidityContractEvent(ContractEvent):
    """ContractEvent for RemoveLiquidity."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "IERC4626HyperdriveRemoveLiquidityContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["IERC4626HyperdriveRemoveLiquidityContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "IERC4626HyperdriveRemoveLiquidityContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["IERC4626HyperdriveRemoveLiquidityContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class IERC4626HyperdriveTransferSingleContractEvent(ContractEvent):
    """ContractEvent for TransferSingle."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "IERC4626HyperdriveTransferSingleContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["IERC4626HyperdriveTransferSingleContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "IERC4626HyperdriveTransferSingleContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["IERC4626HyperdriveTransferSingleContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class IERC4626HyperdriveContractEvents(ContractEvents):
    """ContractEvents for the IERC4626Hyperdrive contract."""

    AddLiquidity: IERC4626HyperdriveAddLiquidityContractEvent

    Approval: IERC4626HyperdriveApprovalContractEvent

    ApprovalForAll: IERC4626HyperdriveApprovalForAllContractEvent

    CloseLong: IERC4626HyperdriveCloseLongContractEvent

    CloseShort: IERC4626HyperdriveCloseShortContractEvent

    CollectGovernanceFee: IERC4626HyperdriveCollectGovernanceFeeContractEvent

    CreateCheckpoint: IERC4626HyperdriveCreateCheckpointContractEvent

    GovernanceUpdated: IERC4626HyperdriveGovernanceUpdatedContractEvent

    Initialize: IERC4626HyperdriveInitializeContractEvent

    OpenLong: IERC4626HyperdriveOpenLongContractEvent

    OpenShort: IERC4626HyperdriveOpenShortContractEvent

    PauseStatusUpdated: IERC4626HyperdrivePauseStatusUpdatedContractEvent

    PauserUpdated: IERC4626HyperdrivePauserUpdatedContractEvent

    RedeemWithdrawalShares: IERC4626HyperdriveRedeemWithdrawalSharesContractEvent

    RemoveLiquidity: IERC4626HyperdriveRemoveLiquidityContractEvent

    TransferSingle: IERC4626HyperdriveTransferSingleContractEvent

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
    ) -> None:
        super().__init__(abi, w3, address)
        self.AddLiquidity = cast(
            IERC4626HyperdriveAddLiquidityContractEvent,
            IERC4626HyperdriveAddLiquidityContractEvent.factory(
                "AddLiquidity", w3=w3, contract_abi=abi, address=address, event_name="AddLiquidity"
            ),
        )
        self.Approval = cast(
            IERC4626HyperdriveApprovalContractEvent,
            IERC4626HyperdriveApprovalContractEvent.factory(
                "Approval", w3=w3, contract_abi=abi, address=address, event_name="Approval"
            ),
        )
        self.ApprovalForAll = cast(
            IERC4626HyperdriveApprovalForAllContractEvent,
            IERC4626HyperdriveApprovalForAllContractEvent.factory(
                "ApprovalForAll", w3=w3, contract_abi=abi, address=address, event_name="ApprovalForAll"
            ),
        )
        self.CloseLong = cast(
            IERC4626HyperdriveCloseLongContractEvent,
            IERC4626HyperdriveCloseLongContractEvent.factory(
                "CloseLong", w3=w3, contract_abi=abi, address=address, event_name="CloseLong"
            ),
        )
        self.CloseShort = cast(
            IERC4626HyperdriveCloseShortContractEvent,
            IERC4626HyperdriveCloseShortContractEvent.factory(
                "CloseShort", w3=w3, contract_abi=abi, address=address, event_name="CloseShort"
            ),
        )
        self.CollectGovernanceFee = cast(
            IERC4626HyperdriveCollectGovernanceFeeContractEvent,
            IERC4626HyperdriveCollectGovernanceFeeContractEvent.factory(
                "CollectGovernanceFee", w3=w3, contract_abi=abi, address=address, event_name="CollectGovernanceFee"
            ),
        )
        self.CreateCheckpoint = cast(
            IERC4626HyperdriveCreateCheckpointContractEvent,
            IERC4626HyperdriveCreateCheckpointContractEvent.factory(
                "CreateCheckpoint", w3=w3, contract_abi=abi, address=address, event_name="CreateCheckpoint"
            ),
        )
        self.GovernanceUpdated = cast(
            IERC4626HyperdriveGovernanceUpdatedContractEvent,
            IERC4626HyperdriveGovernanceUpdatedContractEvent.factory(
                "GovernanceUpdated", w3=w3, contract_abi=abi, address=address, event_name="GovernanceUpdated"
            ),
        )
        self.Initialize = cast(
            IERC4626HyperdriveInitializeContractEvent,
            IERC4626HyperdriveInitializeContractEvent.factory(
                "Initialize", w3=w3, contract_abi=abi, address=address, event_name="Initialize"
            ),
        )
        self.OpenLong = cast(
            IERC4626HyperdriveOpenLongContractEvent,
            IERC4626HyperdriveOpenLongContractEvent.factory(
                "OpenLong", w3=w3, contract_abi=abi, address=address, event_name="OpenLong"
            ),
        )
        self.OpenShort = cast(
            IERC4626HyperdriveOpenShortContractEvent,
            IERC4626HyperdriveOpenShortContractEvent.factory(
                "OpenShort", w3=w3, contract_abi=abi, address=address, event_name="OpenShort"
            ),
        )
        self.PauseStatusUpdated = cast(
            IERC4626HyperdrivePauseStatusUpdatedContractEvent,
            IERC4626HyperdrivePauseStatusUpdatedContractEvent.factory(
                "PauseStatusUpdated", w3=w3, contract_abi=abi, address=address, event_name="PauseStatusUpdated"
            ),
        )
        self.PauserUpdated = cast(
            IERC4626HyperdrivePauserUpdatedContractEvent,
            IERC4626HyperdrivePauserUpdatedContractEvent.factory(
                "PauserUpdated", w3=w3, contract_abi=abi, address=address, event_name="PauserUpdated"
            ),
        )
        self.RedeemWithdrawalShares = cast(
            IERC4626HyperdriveRedeemWithdrawalSharesContractEvent,
            IERC4626HyperdriveRedeemWithdrawalSharesContractEvent.factory(
                "RedeemWithdrawalShares", w3=w3, contract_abi=abi, address=address, event_name="RedeemWithdrawalShares"
            ),
        )
        self.RemoveLiquidity = cast(
            IERC4626HyperdriveRemoveLiquidityContractEvent,
            IERC4626HyperdriveRemoveLiquidityContractEvent.factory(
                "RemoveLiquidity", w3=w3, contract_abi=abi, address=address, event_name="RemoveLiquidity"
            ),
        )
        self.TransferSingle = cast(
            IERC4626HyperdriveTransferSingleContractEvent,
            IERC4626HyperdriveTransferSingleContractEvent.factory(
                "TransferSingle", w3=w3, contract_abi=abi, address=address, event_name="TransferSingle"
            ),
        )


class IERC4626HyperdriveBatchInputLengthMismatchContractError:
    """ContractError for BatchInputLengthMismatch."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "IERC4626HyperdriveBatchInputLengthMismatchContractError",
    ) -> None:
        self.selector = "0xba430d38"
        self.signature = "BatchInputLengthMismatch()"

    def decode_error_data(  # type: ignore
        self: "IERC4626HyperdriveBatchInputLengthMismatchContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ierc4626hyperdrive_abi
                if item.get("name") == "BatchInputLengthMismatch" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["IERC4626HyperdriveBatchInputLengthMismatchContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ierc4626hyperdrive_abi
                if item.get("name") == "BatchInputLengthMismatch" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class IERC4626HyperdriveBelowMinimumContributionContractError:
    """ContractError for BelowMinimumContribution."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "IERC4626HyperdriveBelowMinimumContributionContractError",
    ) -> None:
        self.selector = "0xabed41c4"
        self.signature = "BelowMinimumContribution()"

    def decode_error_data(  # type: ignore
        self: "IERC4626HyperdriveBelowMinimumContributionContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ierc4626hyperdrive_abi
                if item.get("name") == "BelowMinimumContribution" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["IERC4626HyperdriveBelowMinimumContributionContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ierc4626hyperdrive_abi
                if item.get("name") == "BelowMinimumContribution" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class IERC4626HyperdriveDecreasedPresentValueWhenAddingLiquidityContractError:
    """ContractError for DecreasedPresentValueWhenAddingLiquidity."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "IERC4626HyperdriveDecreasedPresentValueWhenAddingLiquidityContractError",
    ) -> None:
        self.selector = "0x309b2a42"
        self.signature = "DecreasedPresentValueWhenAddingLiquidity()"

    def decode_error_data(  # type: ignore
        self: "IERC4626HyperdriveDecreasedPresentValueWhenAddingLiquidityContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ierc4626hyperdrive_abi
                if item.get("name") == "DecreasedPresentValueWhenAddingLiquidity" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["IERC4626HyperdriveDecreasedPresentValueWhenAddingLiquidityContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ierc4626hyperdrive_abi
                if item.get("name") == "DecreasedPresentValueWhenAddingLiquidity" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class IERC4626HyperdriveDistributeExcessIdleFailedContractError:
    """ContractError for DistributeExcessIdleFailed."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "IERC4626HyperdriveDistributeExcessIdleFailedContractError",
    ) -> None:
        self.selector = "0x8bdf918d"
        self.signature = "DistributeExcessIdleFailed()"

    def decode_error_data(  # type: ignore
        self: "IERC4626HyperdriveDistributeExcessIdleFailedContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ierc4626hyperdrive_abi
                if item.get("name") == "DistributeExcessIdleFailed" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["IERC4626HyperdriveDistributeExcessIdleFailedContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ierc4626hyperdrive_abi
                if item.get("name") == "DistributeExcessIdleFailed" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class IERC4626HyperdriveExpInvalidExponentContractError:
    """ContractError for ExpInvalidExponent."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "IERC4626HyperdriveExpInvalidExponentContractError",
    ) -> None:
        self.selector = "0x73a2d6b1"
        self.signature = "ExpInvalidExponent()"

    def decode_error_data(  # type: ignore
        self: "IERC4626HyperdriveExpInvalidExponentContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ierc4626hyperdrive_abi
                if item.get("name") == "ExpInvalidExponent" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["IERC4626HyperdriveExpInvalidExponentContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ierc4626hyperdrive_abi
                if item.get("name") == "ExpInvalidExponent" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class IERC4626HyperdriveExpiredDeadlineContractError:
    """ContractError for ExpiredDeadline."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "IERC4626HyperdriveExpiredDeadlineContractError",
    ) -> None:
        self.selector = "0xf87d9271"
        self.signature = "ExpiredDeadline()"

    def decode_error_data(  # type: ignore
        self: "IERC4626HyperdriveExpiredDeadlineContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ierc4626hyperdrive_abi
                if item.get("name") == "ExpiredDeadline" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["IERC4626HyperdriveExpiredDeadlineContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ierc4626hyperdrive_abi
                if item.get("name") == "ExpiredDeadline" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class IERC4626HyperdriveInsufficientBalanceContractError:
    """ContractError for InsufficientBalance."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "IERC4626HyperdriveInsufficientBalanceContractError",
    ) -> None:
        self.selector = "0xf4d678b8"
        self.signature = "InsufficientBalance()"

    def decode_error_data(  # type: ignore
        self: "IERC4626HyperdriveInsufficientBalanceContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ierc4626hyperdrive_abi
                if item.get("name") == "InsufficientBalance" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["IERC4626HyperdriveInsufficientBalanceContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ierc4626hyperdrive_abi
                if item.get("name") == "InsufficientBalance" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class IERC4626HyperdriveInsufficientLiquidityContractError:
    """ContractError for InsufficientLiquidity."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "IERC4626HyperdriveInsufficientLiquidityContractError",
    ) -> None:
        self.selector = "0x780daf16"
        self.signature = "InsufficientLiquidity(uint8)"

    def decode_error_data(  # type: ignore
        self: "IERC4626HyperdriveInsufficientLiquidityContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ierc4626hyperdrive_abi
                if item.get("name") == "InsufficientLiquidity" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["IERC4626HyperdriveInsufficientLiquidityContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ierc4626hyperdrive_abi
                if item.get("name") == "InsufficientLiquidity" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class IERC4626HyperdriveInvalidAprContractError:
    """ContractError for InvalidApr."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "IERC4626HyperdriveInvalidAprContractError",
    ) -> None:
        self.selector = "0x76c22a22"
        self.signature = "InvalidApr()"

    def decode_error_data(  # type: ignore
        self: "IERC4626HyperdriveInvalidAprContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ierc4626hyperdrive_abi
                if item.get("name") == "InvalidApr" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["IERC4626HyperdriveInvalidAprContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ierc4626hyperdrive_abi
                if item.get("name") == "InvalidApr" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class IERC4626HyperdriveInvalidBaseTokenContractError:
    """ContractError for InvalidBaseToken."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "IERC4626HyperdriveInvalidBaseTokenContractError",
    ) -> None:
        self.selector = "0x0e442a4a"
        self.signature = "InvalidBaseToken()"

    def decode_error_data(  # type: ignore
        self: "IERC4626HyperdriveInvalidBaseTokenContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ierc4626hyperdrive_abi
                if item.get("name") == "InvalidBaseToken" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["IERC4626HyperdriveInvalidBaseTokenContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ierc4626hyperdrive_abi
                if item.get("name") == "InvalidBaseToken" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class IERC4626HyperdriveInvalidCheckpointTimeContractError:
    """ContractError for InvalidCheckpointTime."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "IERC4626HyperdriveInvalidCheckpointTimeContractError",
    ) -> None:
        self.selector = "0xecd29e81"
        self.signature = "InvalidCheckpointTime()"

    def decode_error_data(  # type: ignore
        self: "IERC4626HyperdriveInvalidCheckpointTimeContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ierc4626hyperdrive_abi
                if item.get("name") == "InvalidCheckpointTime" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["IERC4626HyperdriveInvalidCheckpointTimeContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ierc4626hyperdrive_abi
                if item.get("name") == "InvalidCheckpointTime" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class IERC4626HyperdriveInvalidERC20BridgeContractError:
    """ContractError for InvalidERC20Bridge."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "IERC4626HyperdriveInvalidERC20BridgeContractError",
    ) -> None:
        self.selector = "0x2aab8bd3"
        self.signature = "InvalidERC20Bridge()"

    def decode_error_data(  # type: ignore
        self: "IERC4626HyperdriveInvalidERC20BridgeContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ierc4626hyperdrive_abi
                if item.get("name") == "InvalidERC20Bridge" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["IERC4626HyperdriveInvalidERC20BridgeContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ierc4626hyperdrive_abi
                if item.get("name") == "InvalidERC20Bridge" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class IERC4626HyperdriveInvalidFeeDestinationContractError:
    """ContractError for InvalidFeeDestination."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "IERC4626HyperdriveInvalidFeeDestinationContractError",
    ) -> None:
        self.selector = "0x2b44eccc"
        self.signature = "InvalidFeeDestination()"

    def decode_error_data(  # type: ignore
        self: "IERC4626HyperdriveInvalidFeeDestinationContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ierc4626hyperdrive_abi
                if item.get("name") == "InvalidFeeDestination" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["IERC4626HyperdriveInvalidFeeDestinationContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ierc4626hyperdrive_abi
                if item.get("name") == "InvalidFeeDestination" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class IERC4626HyperdriveInvalidInitialVaultSharePriceContractError:
    """ContractError for InvalidInitialVaultSharePrice."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "IERC4626HyperdriveInvalidInitialVaultSharePriceContractError",
    ) -> None:
        self.selector = "0x094b19ad"
        self.signature = "InvalidInitialVaultSharePrice()"

    def decode_error_data(  # type: ignore
        self: "IERC4626HyperdriveInvalidInitialVaultSharePriceContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ierc4626hyperdrive_abi
                if item.get("name") == "InvalidInitialVaultSharePrice" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["IERC4626HyperdriveInvalidInitialVaultSharePriceContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ierc4626hyperdrive_abi
                if item.get("name") == "InvalidInitialVaultSharePrice" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class IERC4626HyperdriveInvalidLPSharePriceContractError:
    """ContractError for InvalidLPSharePrice."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "IERC4626HyperdriveInvalidLPSharePriceContractError",
    ) -> None:
        self.selector = "0xabeba7ee"
        self.signature = "InvalidLPSharePrice()"

    def decode_error_data(  # type: ignore
        self: "IERC4626HyperdriveInvalidLPSharePriceContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ierc4626hyperdrive_abi
                if item.get("name") == "InvalidLPSharePrice" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["IERC4626HyperdriveInvalidLPSharePriceContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ierc4626hyperdrive_abi
                if item.get("name") == "InvalidLPSharePrice" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class IERC4626HyperdriveInvalidPresentValueContractError:
    """ContractError for InvalidPresentValue."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "IERC4626HyperdriveInvalidPresentValueContractError",
    ) -> None:
        self.selector = "0xaa2c6516"
        self.signature = "InvalidPresentValue()"

    def decode_error_data(  # type: ignore
        self: "IERC4626HyperdriveInvalidPresentValueContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ierc4626hyperdrive_abi
                if item.get("name") == "InvalidPresentValue" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["IERC4626HyperdriveInvalidPresentValueContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ierc4626hyperdrive_abi
                if item.get("name") == "InvalidPresentValue" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class IERC4626HyperdriveInvalidShareReservesContractError:
    """ContractError for InvalidShareReserves."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "IERC4626HyperdriveInvalidShareReservesContractError",
    ) -> None:
        self.selector = "0xb0bfcdbe"
        self.signature = "InvalidShareReserves()"

    def decode_error_data(  # type: ignore
        self: "IERC4626HyperdriveInvalidShareReservesContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ierc4626hyperdrive_abi
                if item.get("name") == "InvalidShareReserves" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["IERC4626HyperdriveInvalidShareReservesContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ierc4626hyperdrive_abi
                if item.get("name") == "InvalidShareReserves" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class IERC4626HyperdriveInvalidSignatureContractError:
    """ContractError for InvalidSignature."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "IERC4626HyperdriveInvalidSignatureContractError",
    ) -> None:
        self.selector = "0x8baa579f"
        self.signature = "InvalidSignature()"

    def decode_error_data(  # type: ignore
        self: "IERC4626HyperdriveInvalidSignatureContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ierc4626hyperdrive_abi
                if item.get("name") == "InvalidSignature" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["IERC4626HyperdriveInvalidSignatureContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ierc4626hyperdrive_abi
                if item.get("name") == "InvalidSignature" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class IERC4626HyperdriveInvalidTimestampContractError:
    """ContractError for InvalidTimestamp."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "IERC4626HyperdriveInvalidTimestampContractError",
    ) -> None:
        self.selector = "0xb7d09497"
        self.signature = "InvalidTimestamp()"

    def decode_error_data(  # type: ignore
        self: "IERC4626HyperdriveInvalidTimestampContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ierc4626hyperdrive_abi
                if item.get("name") == "InvalidTimestamp" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["IERC4626HyperdriveInvalidTimestampContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ierc4626hyperdrive_abi
                if item.get("name") == "InvalidTimestamp" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class IERC4626HyperdriveLnInvalidInputContractError:
    """ContractError for LnInvalidInput."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "IERC4626HyperdriveLnInvalidInputContractError",
    ) -> None:
        self.selector = "0xe61b4975"
        self.signature = "LnInvalidInput()"

    def decode_error_data(  # type: ignore
        self: "IERC4626HyperdriveLnInvalidInputContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ierc4626hyperdrive_abi
                if item.get("name") == "LnInvalidInput" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["IERC4626HyperdriveLnInvalidInputContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ierc4626hyperdrive_abi
                if item.get("name") == "LnInvalidInput" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class IERC4626HyperdriveMinimumSharePriceContractError:
    """ContractError for MinimumSharePrice."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "IERC4626HyperdriveMinimumSharePriceContractError",
    ) -> None:
        self.selector = "0x42af972b"
        self.signature = "MinimumSharePrice()"

    def decode_error_data(  # type: ignore
        self: "IERC4626HyperdriveMinimumSharePriceContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ierc4626hyperdrive_abi
                if item.get("name") == "MinimumSharePrice" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["IERC4626HyperdriveMinimumSharePriceContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ierc4626hyperdrive_abi
                if item.get("name") == "MinimumSharePrice" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class IERC4626HyperdriveMinimumTransactionAmountContractError:
    """ContractError for MinimumTransactionAmount."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "IERC4626HyperdriveMinimumTransactionAmountContractError",
    ) -> None:
        self.selector = "0x423bbb46"
        self.signature = "MinimumTransactionAmount()"

    def decode_error_data(  # type: ignore
        self: "IERC4626HyperdriveMinimumTransactionAmountContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ierc4626hyperdrive_abi
                if item.get("name") == "MinimumTransactionAmount" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["IERC4626HyperdriveMinimumTransactionAmountContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ierc4626hyperdrive_abi
                if item.get("name") == "MinimumTransactionAmount" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class IERC4626HyperdriveNotPayableContractError:
    """ContractError for NotPayable."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "IERC4626HyperdriveNotPayableContractError",
    ) -> None:
        self.selector = "0x1574f9f3"
        self.signature = "NotPayable()"

    def decode_error_data(  # type: ignore
        self: "IERC4626HyperdriveNotPayableContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ierc4626hyperdrive_abi
                if item.get("name") == "NotPayable" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["IERC4626HyperdriveNotPayableContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ierc4626hyperdrive_abi
                if item.get("name") == "NotPayable" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class IERC4626HyperdriveOutputLimitContractError:
    """ContractError for OutputLimit."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "IERC4626HyperdriveOutputLimitContractError",
    ) -> None:
        self.selector = "0xc9726517"
        self.signature = "OutputLimit()"

    def decode_error_data(  # type: ignore
        self: "IERC4626HyperdriveOutputLimitContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ierc4626hyperdrive_abi
                if item.get("name") == "OutputLimit" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["IERC4626HyperdriveOutputLimitContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ierc4626hyperdrive_abi
                if item.get("name") == "OutputLimit" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class IERC4626HyperdrivePoolAlreadyInitializedContractError:
    """ContractError for PoolAlreadyInitialized."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "IERC4626HyperdrivePoolAlreadyInitializedContractError",
    ) -> None:
        self.selector = "0x7983c051"
        self.signature = "PoolAlreadyInitialized()"

    def decode_error_data(  # type: ignore
        self: "IERC4626HyperdrivePoolAlreadyInitializedContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ierc4626hyperdrive_abi
                if item.get("name") == "PoolAlreadyInitialized" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["IERC4626HyperdrivePoolAlreadyInitializedContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ierc4626hyperdrive_abi
                if item.get("name") == "PoolAlreadyInitialized" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class IERC4626HyperdrivePoolIsPausedContractError:
    """ContractError for PoolIsPaused."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "IERC4626HyperdrivePoolIsPausedContractError",
    ) -> None:
        self.selector = "0x21081abf"
        self.signature = "PoolIsPaused()"

    def decode_error_data(  # type: ignore
        self: "IERC4626HyperdrivePoolIsPausedContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ierc4626hyperdrive_abi
                if item.get("name") == "PoolIsPaused" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["IERC4626HyperdrivePoolIsPausedContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ierc4626hyperdrive_abi
                if item.get("name") == "PoolIsPaused" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class IERC4626HyperdriveRestrictedZeroAddressContractError:
    """ContractError for RestrictedZeroAddress."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "IERC4626HyperdriveRestrictedZeroAddressContractError",
    ) -> None:
        self.selector = "0xf0dd15fd"
        self.signature = "RestrictedZeroAddress()"

    def decode_error_data(  # type: ignore
        self: "IERC4626HyperdriveRestrictedZeroAddressContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ierc4626hyperdrive_abi
                if item.get("name") == "RestrictedZeroAddress" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["IERC4626HyperdriveRestrictedZeroAddressContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ierc4626hyperdrive_abi
                if item.get("name") == "RestrictedZeroAddress" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class IERC4626HyperdriveReturnDataContractError:
    """ContractError for ReturnData."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "IERC4626HyperdriveReturnDataContractError",
    ) -> None:
        self.selector = "0xdcc81126"
        self.signature = "ReturnData(bytes)"

    def decode_error_data(  # type: ignore
        self: "IERC4626HyperdriveReturnDataContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ierc4626hyperdrive_abi
                if item.get("name") == "ReturnData" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["IERC4626HyperdriveReturnDataContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ierc4626hyperdrive_abi
                if item.get("name") == "ReturnData" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class IERC4626HyperdriveSweepFailedContractError:
    """ContractError for SweepFailed."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "IERC4626HyperdriveSweepFailedContractError",
    ) -> None:
        self.selector = "0x9eec2ff8"
        self.signature = "SweepFailed()"

    def decode_error_data(  # type: ignore
        self: "IERC4626HyperdriveSweepFailedContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ierc4626hyperdrive_abi
                if item.get("name") == "SweepFailed" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["IERC4626HyperdriveSweepFailedContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ierc4626hyperdrive_abi
                if item.get("name") == "SweepFailed" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class IERC4626HyperdriveTransferFailedContractError:
    """ContractError for TransferFailed."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "IERC4626HyperdriveTransferFailedContractError",
    ) -> None:
        self.selector = "0x90b8ec18"
        self.signature = "TransferFailed()"

    def decode_error_data(  # type: ignore
        self: "IERC4626HyperdriveTransferFailedContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ierc4626hyperdrive_abi
                if item.get("name") == "TransferFailed" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["IERC4626HyperdriveTransferFailedContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ierc4626hyperdrive_abi
                if item.get("name") == "TransferFailed" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class IERC4626HyperdriveUnauthorizedContractError:
    """ContractError for Unauthorized."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "IERC4626HyperdriveUnauthorizedContractError",
    ) -> None:
        self.selector = "0x82b42900"
        self.signature = "Unauthorized()"

    def decode_error_data(  # type: ignore
        self: "IERC4626HyperdriveUnauthorizedContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ierc4626hyperdrive_abi
                if item.get("name") == "Unauthorized" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["IERC4626HyperdriveUnauthorizedContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ierc4626hyperdrive_abi
                if item.get("name") == "Unauthorized" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class IERC4626HyperdriveUnexpectedSuccessContractError:
    """ContractError for UnexpectedSuccess."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "IERC4626HyperdriveUnexpectedSuccessContractError",
    ) -> None:
        self.selector = "0x8bb0a34b"
        self.signature = "UnexpectedSuccess()"

    def decode_error_data(  # type: ignore
        self: "IERC4626HyperdriveUnexpectedSuccessContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ierc4626hyperdrive_abi
                if item.get("name") == "UnexpectedSuccess" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["IERC4626HyperdriveUnexpectedSuccessContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ierc4626hyperdrive_abi
                if item.get("name") == "UnexpectedSuccess" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class IERC4626HyperdriveUnsafeCastToInt128ContractError:
    """ContractError for UnsafeCastToInt128."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "IERC4626HyperdriveUnsafeCastToInt128ContractError",
    ) -> None:
        self.selector = "0xa5353be5"
        self.signature = "UnsafeCastToInt128()"

    def decode_error_data(  # type: ignore
        self: "IERC4626HyperdriveUnsafeCastToInt128ContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ierc4626hyperdrive_abi
                if item.get("name") == "UnsafeCastToInt128" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["IERC4626HyperdriveUnsafeCastToInt128ContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ierc4626hyperdrive_abi
                if item.get("name") == "UnsafeCastToInt128" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class IERC4626HyperdriveUnsafeCastToInt256ContractError:
    """ContractError for UnsafeCastToInt256."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "IERC4626HyperdriveUnsafeCastToInt256ContractError",
    ) -> None:
        self.selector = "0x72dd4e02"
        self.signature = "UnsafeCastToInt256()"

    def decode_error_data(  # type: ignore
        self: "IERC4626HyperdriveUnsafeCastToInt256ContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ierc4626hyperdrive_abi
                if item.get("name") == "UnsafeCastToInt256" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["IERC4626HyperdriveUnsafeCastToInt256ContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ierc4626hyperdrive_abi
                if item.get("name") == "UnsafeCastToInt256" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class IERC4626HyperdriveUnsafeCastToUint112ContractError:
    """ContractError for UnsafeCastToUint112."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "IERC4626HyperdriveUnsafeCastToUint112ContractError",
    ) -> None:
        self.selector = "0x10d62a2e"
        self.signature = "UnsafeCastToUint112()"

    def decode_error_data(  # type: ignore
        self: "IERC4626HyperdriveUnsafeCastToUint112ContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ierc4626hyperdrive_abi
                if item.get("name") == "UnsafeCastToUint112" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["IERC4626HyperdriveUnsafeCastToUint112ContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ierc4626hyperdrive_abi
                if item.get("name") == "UnsafeCastToUint112" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class IERC4626HyperdriveUnsafeCastToUint128ContractError:
    """ContractError for UnsafeCastToUint128."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "IERC4626HyperdriveUnsafeCastToUint128ContractError",
    ) -> None:
        self.selector = "0x1e15f2a2"
        self.signature = "UnsafeCastToUint128()"

    def decode_error_data(  # type: ignore
        self: "IERC4626HyperdriveUnsafeCastToUint128ContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ierc4626hyperdrive_abi
                if item.get("name") == "UnsafeCastToUint128" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["IERC4626HyperdriveUnsafeCastToUint128ContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ierc4626hyperdrive_abi
                if item.get("name") == "UnsafeCastToUint128" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class IERC4626HyperdriveUnsupportedTokenContractError:
    """ContractError for UnsupportedToken."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "IERC4626HyperdriveUnsupportedTokenContractError",
    ) -> None:
        self.selector = "0x6a172882"
        self.signature = "UnsupportedToken()"

    def decode_error_data(  # type: ignore
        self: "IERC4626HyperdriveUnsupportedTokenContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ierc4626hyperdrive_abi
                if item.get("name") == "UnsupportedToken" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["IERC4626HyperdriveUnsupportedTokenContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in ierc4626hyperdrive_abi
                if item.get("name") == "UnsupportedToken" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class IERC4626HyperdriveContractErrors:
    """ContractErrors for the IERC4626Hyperdrive contract."""

    BatchInputLengthMismatch: IERC4626HyperdriveBatchInputLengthMismatchContractError

    BelowMinimumContribution: IERC4626HyperdriveBelowMinimumContributionContractError

    DecreasedPresentValueWhenAddingLiquidity: IERC4626HyperdriveDecreasedPresentValueWhenAddingLiquidityContractError

    DistributeExcessIdleFailed: IERC4626HyperdriveDistributeExcessIdleFailedContractError

    ExpInvalidExponent: IERC4626HyperdriveExpInvalidExponentContractError

    ExpiredDeadline: IERC4626HyperdriveExpiredDeadlineContractError

    InsufficientBalance: IERC4626HyperdriveInsufficientBalanceContractError

    InsufficientLiquidity: IERC4626HyperdriveInsufficientLiquidityContractError

    InvalidApr: IERC4626HyperdriveInvalidAprContractError

    InvalidBaseToken: IERC4626HyperdriveInvalidBaseTokenContractError

    InvalidCheckpointTime: IERC4626HyperdriveInvalidCheckpointTimeContractError

    InvalidERC20Bridge: IERC4626HyperdriveInvalidERC20BridgeContractError

    InvalidFeeDestination: IERC4626HyperdriveInvalidFeeDestinationContractError

    InvalidInitialVaultSharePrice: IERC4626HyperdriveInvalidInitialVaultSharePriceContractError

    InvalidLPSharePrice: IERC4626HyperdriveInvalidLPSharePriceContractError

    InvalidPresentValue: IERC4626HyperdriveInvalidPresentValueContractError

    InvalidShareReserves: IERC4626HyperdriveInvalidShareReservesContractError

    InvalidSignature: IERC4626HyperdriveInvalidSignatureContractError

    InvalidTimestamp: IERC4626HyperdriveInvalidTimestampContractError

    LnInvalidInput: IERC4626HyperdriveLnInvalidInputContractError

    MinimumSharePrice: IERC4626HyperdriveMinimumSharePriceContractError

    MinimumTransactionAmount: IERC4626HyperdriveMinimumTransactionAmountContractError

    NotPayable: IERC4626HyperdriveNotPayableContractError

    OutputLimit: IERC4626HyperdriveOutputLimitContractError

    PoolAlreadyInitialized: IERC4626HyperdrivePoolAlreadyInitializedContractError

    PoolIsPaused: IERC4626HyperdrivePoolIsPausedContractError

    RestrictedZeroAddress: IERC4626HyperdriveRestrictedZeroAddressContractError

    ReturnData: IERC4626HyperdriveReturnDataContractError

    SweepFailed: IERC4626HyperdriveSweepFailedContractError

    TransferFailed: IERC4626HyperdriveTransferFailedContractError

    Unauthorized: IERC4626HyperdriveUnauthorizedContractError

    UnexpectedSuccess: IERC4626HyperdriveUnexpectedSuccessContractError

    UnsafeCastToInt128: IERC4626HyperdriveUnsafeCastToInt128ContractError

    UnsafeCastToInt256: IERC4626HyperdriveUnsafeCastToInt256ContractError

    UnsafeCastToUint112: IERC4626HyperdriveUnsafeCastToUint112ContractError

    UnsafeCastToUint128: IERC4626HyperdriveUnsafeCastToUint128ContractError

    UnsupportedToken: IERC4626HyperdriveUnsupportedTokenContractError

    def __init__(
        self,
    ) -> None:
        self.BatchInputLengthMismatch = IERC4626HyperdriveBatchInputLengthMismatchContractError()
        self.BelowMinimumContribution = IERC4626HyperdriveBelowMinimumContributionContractError()
        self.DecreasedPresentValueWhenAddingLiquidity = (
            IERC4626HyperdriveDecreasedPresentValueWhenAddingLiquidityContractError()
        )
        self.DistributeExcessIdleFailed = IERC4626HyperdriveDistributeExcessIdleFailedContractError()
        self.ExpInvalidExponent = IERC4626HyperdriveExpInvalidExponentContractError()
        self.ExpiredDeadline = IERC4626HyperdriveExpiredDeadlineContractError()
        self.InsufficientBalance = IERC4626HyperdriveInsufficientBalanceContractError()
        self.InsufficientLiquidity = IERC4626HyperdriveInsufficientLiquidityContractError()
        self.InvalidApr = IERC4626HyperdriveInvalidAprContractError()
        self.InvalidBaseToken = IERC4626HyperdriveInvalidBaseTokenContractError()
        self.InvalidCheckpointTime = IERC4626HyperdriveInvalidCheckpointTimeContractError()
        self.InvalidERC20Bridge = IERC4626HyperdriveInvalidERC20BridgeContractError()
        self.InvalidFeeDestination = IERC4626HyperdriveInvalidFeeDestinationContractError()
        self.InvalidInitialVaultSharePrice = IERC4626HyperdriveInvalidInitialVaultSharePriceContractError()
        self.InvalidLPSharePrice = IERC4626HyperdriveInvalidLPSharePriceContractError()
        self.InvalidPresentValue = IERC4626HyperdriveInvalidPresentValueContractError()
        self.InvalidShareReserves = IERC4626HyperdriveInvalidShareReservesContractError()
        self.InvalidSignature = IERC4626HyperdriveInvalidSignatureContractError()
        self.InvalidTimestamp = IERC4626HyperdriveInvalidTimestampContractError()
        self.LnInvalidInput = IERC4626HyperdriveLnInvalidInputContractError()
        self.MinimumSharePrice = IERC4626HyperdriveMinimumSharePriceContractError()
        self.MinimumTransactionAmount = IERC4626HyperdriveMinimumTransactionAmountContractError()
        self.NotPayable = IERC4626HyperdriveNotPayableContractError()
        self.OutputLimit = IERC4626HyperdriveOutputLimitContractError()
        self.PoolAlreadyInitialized = IERC4626HyperdrivePoolAlreadyInitializedContractError()
        self.PoolIsPaused = IERC4626HyperdrivePoolIsPausedContractError()
        self.RestrictedZeroAddress = IERC4626HyperdriveRestrictedZeroAddressContractError()
        self.ReturnData = IERC4626HyperdriveReturnDataContractError()
        self.SweepFailed = IERC4626HyperdriveSweepFailedContractError()
        self.TransferFailed = IERC4626HyperdriveTransferFailedContractError()
        self.Unauthorized = IERC4626HyperdriveUnauthorizedContractError()
        self.UnexpectedSuccess = IERC4626HyperdriveUnexpectedSuccessContractError()
        self.UnsafeCastToInt128 = IERC4626HyperdriveUnsafeCastToInt128ContractError()
        self.UnsafeCastToInt256 = IERC4626HyperdriveUnsafeCastToInt256ContractError()
        self.UnsafeCastToUint112 = IERC4626HyperdriveUnsafeCastToUint112ContractError()
        self.UnsafeCastToUint128 = IERC4626HyperdriveUnsafeCastToUint128ContractError()
        self.UnsupportedToken = IERC4626HyperdriveUnsupportedTokenContractError()

        self._all = [
            self.BatchInputLengthMismatch,
            self.BelowMinimumContribution,
            self.DecreasedPresentValueWhenAddingLiquidity,
            self.DistributeExcessIdleFailed,
            self.ExpInvalidExponent,
            self.ExpiredDeadline,
            self.InsufficientBalance,
            self.InsufficientLiquidity,
            self.InvalidApr,
            self.InvalidBaseToken,
            self.InvalidCheckpointTime,
            self.InvalidERC20Bridge,
            self.InvalidFeeDestination,
            self.InvalidInitialVaultSharePrice,
            self.InvalidLPSharePrice,
            self.InvalidPresentValue,
            self.InvalidShareReserves,
            self.InvalidSignature,
            self.InvalidTimestamp,
            self.LnInvalidInput,
            self.MinimumSharePrice,
            self.MinimumTransactionAmount,
            self.NotPayable,
            self.OutputLimit,
            self.PoolAlreadyInitialized,
            self.PoolIsPaused,
            self.RestrictedZeroAddress,
            self.ReturnData,
            self.SweepFailed,
            self.TransferFailed,
            self.Unauthorized,
            self.UnexpectedSuccess,
            self.UnsafeCastToInt128,
            self.UnsafeCastToInt256,
            self.UnsafeCastToUint112,
            self.UnsafeCastToUint128,
            self.UnsupportedToken,
        ]

    def decode_custom_error(self, data: str) -> tuple[Any, ...]:
        """Decodes a custom contract error."""
        selector = data[:10]
        for err in self._all:
            if err.selector == selector:
                return err.decode_error_data(HexBytes(data[10:]))

        raise ValueError(f"IERC4626Hyperdrive does not have a selector matching {selector}")


ierc4626hyperdrive_abi: ABI = cast(
    ABI,
    [
        {
            "type": "function",
            "name": "PERMIT_TYPEHASH",
            "inputs": [],
            "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "addLiquidity",
            "inputs": [
                {"name": "_contribution", "type": "uint256", "internalType": "uint256"},
                {"name": "_minLpSharePrice", "type": "uint256", "internalType": "uint256"},
                {"name": "_minApr", "type": "uint256", "internalType": "uint256"},
                {"name": "_maxApr", "type": "uint256", "internalType": "uint256"},
                {
                    "name": "_options",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.Options",
                    "components": [
                        {"name": "destination", "type": "address", "internalType": "address"},
                        {"name": "asBase", "type": "bool", "internalType": "bool"},
                        {"name": "extraData", "type": "bytes", "internalType": "bytes"},
                    ],
                },
            ],
            "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}],
            "stateMutability": "payable",
        },
        {
            "type": "function",
            "name": "balanceOf",
            "inputs": [
                {"name": "tokenId", "type": "uint256", "internalType": "uint256"},
                {"name": "owner", "type": "address", "internalType": "address"},
            ],
            "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "baseToken",
            "inputs": [],
            "outputs": [{"name": "", "type": "address", "internalType": "address"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "batchTransferFrom",
            "inputs": [
                {"name": "from", "type": "address", "internalType": "address"},
                {"name": "to", "type": "address", "internalType": "address"},
                {"name": "ids", "type": "uint256[]", "internalType": "uint256[]"},
                {"name": "values", "type": "uint256[]", "internalType": "uint256[]"},
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "checkpoint",
            "inputs": [{"name": "_checkpointTime", "type": "uint256", "internalType": "uint256"}],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "closeLong",
            "inputs": [
                {"name": "_maturityTime", "type": "uint256", "internalType": "uint256"},
                {"name": "_bondAmount", "type": "uint256", "internalType": "uint256"},
                {"name": "_minOutput", "type": "uint256", "internalType": "uint256"},
                {
                    "name": "_options",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.Options",
                    "components": [
                        {"name": "destination", "type": "address", "internalType": "address"},
                        {"name": "asBase", "type": "bool", "internalType": "bool"},
                        {"name": "extraData", "type": "bytes", "internalType": "bytes"},
                    ],
                },
            ],
            "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "closeShort",
            "inputs": [
                {"name": "_maturityTime", "type": "uint256", "internalType": "uint256"},
                {"name": "_bondAmount", "type": "uint256", "internalType": "uint256"},
                {"name": "_minOutput", "type": "uint256", "internalType": "uint256"},
                {
                    "name": "_options",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.Options",
                    "components": [
                        {"name": "destination", "type": "address", "internalType": "address"},
                        {"name": "asBase", "type": "bool", "internalType": "bool"},
                        {"name": "extraData", "type": "bytes", "internalType": "bytes"},
                    ],
                },
            ],
            "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "collectGovernanceFee",
            "inputs": [
                {
                    "name": "_options",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.Options",
                    "components": [
                        {"name": "destination", "type": "address", "internalType": "address"},
                        {"name": "asBase", "type": "bool", "internalType": "bool"},
                        {"name": "extraData", "type": "bytes", "internalType": "bytes"},
                    ],
                }
            ],
            "outputs": [{"name": "proceeds", "type": "uint256", "internalType": "uint256"}],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "decimals",
            "inputs": [],
            "outputs": [{"name": "", "type": "uint8", "internalType": "uint8"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "domainSeparator",
            "inputs": [],
            "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getCheckpoint",
            "inputs": [{"name": "_checkpointTime", "type": "uint256", "internalType": "uint256"}],
            "outputs": [
                {
                    "name": "",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.Checkpoint",
                    "components": [{"name": "vaultSharePrice", "type": "uint128", "internalType": "uint128"}],
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getCheckpointExposure",
            "inputs": [{"name": "_checkpointTime", "type": "uint256", "internalType": "uint256"}],
            "outputs": [{"name": "", "type": "int256", "internalType": "int256"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getMarketState",
            "inputs": [],
            "outputs": [
                {
                    "name": "",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.MarketState",
                    "components": [
                        {"name": "shareReserves", "type": "uint128", "internalType": "uint128"},
                        {"name": "bondReserves", "type": "uint128", "internalType": "uint128"},
                        {"name": "longExposure", "type": "uint128", "internalType": "uint128"},
                        {"name": "longsOutstanding", "type": "uint128", "internalType": "uint128"},
                        {"name": "shareAdjustment", "type": "int128", "internalType": "int128"},
                        {"name": "shortsOutstanding", "type": "uint128", "internalType": "uint128"},
                        {"name": "longAverageMaturityTime", "type": "uint128", "internalType": "uint128"},
                        {"name": "shortAverageMaturityTime", "type": "uint128", "internalType": "uint128"},
                        {"name": "isInitialized", "type": "bool", "internalType": "bool"},
                        {"name": "isPaused", "type": "bool", "internalType": "bool"},
                        {"name": "zombieBaseProceeds", "type": "uint112", "internalType": "uint112"},
                        {"name": "zombieShareReserves", "type": "uint128", "internalType": "uint128"},
                    ],
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getPoolConfig",
            "inputs": [],
            "outputs": [
                {
                    "name": "",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.PoolConfig",
                    "components": [
                        {"name": "baseToken", "type": "address", "internalType": "contract IERC20"},
                        {"name": "linkerFactory", "type": "address", "internalType": "address"},
                        {"name": "linkerCodeHash", "type": "bytes32", "internalType": "bytes32"},
                        {"name": "initialVaultSharePrice", "type": "uint256", "internalType": "uint256"},
                        {"name": "minimumShareReserves", "type": "uint256", "internalType": "uint256"},
                        {"name": "minimumTransactionAmount", "type": "uint256", "internalType": "uint256"},
                        {"name": "positionDuration", "type": "uint256", "internalType": "uint256"},
                        {"name": "checkpointDuration", "type": "uint256", "internalType": "uint256"},
                        {"name": "timeStretch", "type": "uint256", "internalType": "uint256"},
                        {"name": "governance", "type": "address", "internalType": "address"},
                        {"name": "feeCollector", "type": "address", "internalType": "address"},
                        {
                            "name": "fees",
                            "type": "tuple",
                            "internalType": "struct IHyperdrive.Fees",
                            "components": [
                                {"name": "curve", "type": "uint256", "internalType": "uint256"},
                                {"name": "flat", "type": "uint256", "internalType": "uint256"},
                                {"name": "governanceLP", "type": "uint256", "internalType": "uint256"},
                                {"name": "governanceZombie", "type": "uint256", "internalType": "uint256"},
                            ],
                        },
                    ],
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getPoolInfo",
            "inputs": [],
            "outputs": [
                {
                    "name": "",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.PoolInfo",
                    "components": [
                        {"name": "shareReserves", "type": "uint256", "internalType": "uint256"},
                        {"name": "shareAdjustment", "type": "int256", "internalType": "int256"},
                        {"name": "zombieBaseProceeds", "type": "uint256", "internalType": "uint256"},
                        {"name": "zombieShareReserves", "type": "uint256", "internalType": "uint256"},
                        {"name": "bondReserves", "type": "uint256", "internalType": "uint256"},
                        {"name": "lpTotalSupply", "type": "uint256", "internalType": "uint256"},
                        {"name": "vaultSharePrice", "type": "uint256", "internalType": "uint256"},
                        {"name": "longsOutstanding", "type": "uint256", "internalType": "uint256"},
                        {"name": "longAverageMaturityTime", "type": "uint256", "internalType": "uint256"},
                        {"name": "shortsOutstanding", "type": "uint256", "internalType": "uint256"},
                        {"name": "shortAverageMaturityTime", "type": "uint256", "internalType": "uint256"},
                        {"name": "withdrawalSharesReadyToWithdraw", "type": "uint256", "internalType": "uint256"},
                        {"name": "withdrawalSharesProceeds", "type": "uint256", "internalType": "uint256"},
                        {"name": "lpSharePrice", "type": "uint256", "internalType": "uint256"},
                        {"name": "longExposure", "type": "uint256", "internalType": "uint256"},
                    ],
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getUncollectedGovernanceFees",
            "inputs": [],
            "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getWithdrawPool",
            "inputs": [],
            "outputs": [
                {
                    "name": "",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.WithdrawPool",
                    "components": [
                        {"name": "readyToWithdraw", "type": "uint128", "internalType": "uint128"},
                        {"name": "proceeds", "type": "uint128", "internalType": "uint128"},
                    ],
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "initialize",
            "inputs": [
                {"name": "_contribution", "type": "uint256", "internalType": "uint256"},
                {"name": "_apr", "type": "uint256", "internalType": "uint256"},
                {
                    "name": "_options",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.Options",
                    "components": [
                        {"name": "destination", "type": "address", "internalType": "address"},
                        {"name": "asBase", "type": "bool", "internalType": "bool"},
                        {"name": "extraData", "type": "bytes", "internalType": "bytes"},
                    ],
                },
            ],
            "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}],
            "stateMutability": "payable",
        },
        {
            "type": "function",
            "name": "isApprovedForAll",
            "inputs": [
                {"name": "owner", "type": "address", "internalType": "address"},
                {"name": "spender", "type": "address", "internalType": "address"},
            ],
            "outputs": [{"name": "", "type": "bool", "internalType": "bool"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "isPauser",
            "inputs": [{"name": "_account", "type": "address", "internalType": "address"}],
            "outputs": [{"name": "", "type": "bool", "internalType": "bool"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "load",
            "inputs": [{"name": "_slots", "type": "uint256[]", "internalType": "uint256[]"}],
            "outputs": [{"name": "", "type": "bytes32[]", "internalType": "bytes32[]"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "name",
            "inputs": [{"name": "tokenId", "type": "uint256", "internalType": "uint256"}],
            "outputs": [{"name": "", "type": "string", "internalType": "string"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "nonces",
            "inputs": [{"name": "owner", "type": "address", "internalType": "address"}],
            "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "openLong",
            "inputs": [
                {"name": "_amount", "type": "uint256", "internalType": "uint256"},
                {"name": "_minOutput", "type": "uint256", "internalType": "uint256"},
                {"name": "_minVaultSharePrice", "type": "uint256", "internalType": "uint256"},
                {
                    "name": "_options",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.Options",
                    "components": [
                        {"name": "destination", "type": "address", "internalType": "address"},
                        {"name": "asBase", "type": "bool", "internalType": "bool"},
                        {"name": "extraData", "type": "bytes", "internalType": "bytes"},
                    ],
                },
            ],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"},
                {"name": "", "type": "uint256", "internalType": "uint256"},
            ],
            "stateMutability": "payable",
        },
        {
            "type": "function",
            "name": "openShort",
            "inputs": [
                {"name": "_bondAmount", "type": "uint256", "internalType": "uint256"},
                {"name": "_maxDeposit", "type": "uint256", "internalType": "uint256"},
                {"name": "_minVaultSharePrice", "type": "uint256", "internalType": "uint256"},
                {
                    "name": "_options",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.Options",
                    "components": [
                        {"name": "destination", "type": "address", "internalType": "address"},
                        {"name": "asBase", "type": "bool", "internalType": "bool"},
                        {"name": "extraData", "type": "bytes", "internalType": "bytes"},
                    ],
                },
            ],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"},
                {"name": "", "type": "uint256", "internalType": "uint256"},
            ],
            "stateMutability": "payable",
        },
        {
            "type": "function",
            "name": "pause",
            "inputs": [{"name": "_status", "type": "bool", "internalType": "bool"}],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "perTokenApprovals",
            "inputs": [
                {"name": "tokenId", "type": "uint256", "internalType": "uint256"},
                {"name": "owner", "type": "address", "internalType": "address"},
                {"name": "spender", "type": "address", "internalType": "address"},
            ],
            "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "permitForAll",
            "inputs": [
                {"name": "owner", "type": "address", "internalType": "address"},
                {"name": "spender", "type": "address", "internalType": "address"},
                {"name": "_approved", "type": "bool", "internalType": "bool"},
                {"name": "deadline", "type": "uint256", "internalType": "uint256"},
                {"name": "v", "type": "uint8", "internalType": "uint8"},
                {"name": "r", "type": "bytes32", "internalType": "bytes32"},
                {"name": "s", "type": "bytes32", "internalType": "bytes32"},
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "redeemWithdrawalShares",
            "inputs": [
                {"name": "_withdrawalShares", "type": "uint256", "internalType": "uint256"},
                {"name": "_minOutputPerShare", "type": "uint256", "internalType": "uint256"},
                {
                    "name": "_options",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.Options",
                    "components": [
                        {"name": "destination", "type": "address", "internalType": "address"},
                        {"name": "asBase", "type": "bool", "internalType": "bool"},
                        {"name": "extraData", "type": "bytes", "internalType": "bytes"},
                    ],
                },
            ],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"},
                {"name": "", "type": "uint256", "internalType": "uint256"},
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "removeLiquidity",
            "inputs": [
                {"name": "_lpShares", "type": "uint256", "internalType": "uint256"},
                {"name": "_minOutputPerShare", "type": "uint256", "internalType": "uint256"},
                {
                    "name": "_options",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.Options",
                    "components": [
                        {"name": "destination", "type": "address", "internalType": "address"},
                        {"name": "asBase", "type": "bool", "internalType": "bool"},
                        {"name": "extraData", "type": "bytes", "internalType": "bytes"},
                    ],
                },
            ],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"},
                {"name": "", "type": "uint256", "internalType": "uint256"},
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "setApproval",
            "inputs": [
                {"name": "tokenID", "type": "uint256", "internalType": "uint256"},
                {"name": "operator", "type": "address", "internalType": "address"},
                {"name": "amount", "type": "uint256", "internalType": "uint256"},
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "setApprovalBridge",
            "inputs": [
                {"name": "tokenID", "type": "uint256", "internalType": "uint256"},
                {"name": "operator", "type": "address", "internalType": "address"},
                {"name": "amount", "type": "uint256", "internalType": "uint256"},
                {"name": "caller", "type": "address", "internalType": "address"},
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "setApprovalForAll",
            "inputs": [
                {"name": "operator", "type": "address", "internalType": "address"},
                {"name": "approved", "type": "bool", "internalType": "bool"},
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "setGovernance",
            "inputs": [{"name": "_who", "type": "address", "internalType": "address"}],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "setPauser",
            "inputs": [
                {"name": "who", "type": "address", "internalType": "address"},
                {"name": "status", "type": "bool", "internalType": "bool"},
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "sweep",
            "inputs": [{"name": "_target", "type": "address", "internalType": "contract IERC20"}],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "symbol",
            "inputs": [{"name": "tokenId", "type": "uint256", "internalType": "uint256"}],
            "outputs": [{"name": "", "type": "string", "internalType": "string"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "target0",
            "inputs": [],
            "outputs": [{"name": "", "type": "address", "internalType": "address"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "target1",
            "inputs": [],
            "outputs": [{"name": "", "type": "address", "internalType": "address"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "target2",
            "inputs": [],
            "outputs": [{"name": "", "type": "address", "internalType": "address"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "target3",
            "inputs": [],
            "outputs": [{"name": "", "type": "address", "internalType": "address"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "target4",
            "inputs": [],
            "outputs": [{"name": "", "type": "address", "internalType": "address"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "totalSupply",
            "inputs": [{"name": "tokenId", "type": "uint256", "internalType": "uint256"}],
            "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "transferFrom",
            "inputs": [
                {"name": "tokenID", "type": "uint256", "internalType": "uint256"},
                {"name": "from", "type": "address", "internalType": "address"},
                {"name": "to", "type": "address", "internalType": "address"},
                {"name": "amount", "type": "uint256", "internalType": "uint256"},
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "transferFromBridge",
            "inputs": [
                {"name": "tokenID", "type": "uint256", "internalType": "uint256"},
                {"name": "from", "type": "address", "internalType": "address"},
                {"name": "to", "type": "address", "internalType": "address"},
                {"name": "amount", "type": "uint256", "internalType": "uint256"},
                {"name": "caller", "type": "address", "internalType": "address"},
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "vault",
            "inputs": [],
            "outputs": [{"name": "", "type": "address", "internalType": "contract IERC4626"}],
            "stateMutability": "view",
        },
        {
            "type": "event",
            "name": "AddLiquidity",
            "inputs": [
                {"name": "provider", "type": "address", "indexed": True, "internalType": "address"},
                {"name": "lpAmount", "type": "uint256", "indexed": False, "internalType": "uint256"},
                {"name": "baseAmount", "type": "uint256", "indexed": False, "internalType": "uint256"},
                {"name": "vaultShareAmount", "type": "uint256", "indexed": False, "internalType": "uint256"},
                {"name": "asBase", "type": "bool", "indexed": False, "internalType": "bool"},
                {"name": "lpSharePrice", "type": "uint256", "indexed": False, "internalType": "uint256"},
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "Approval",
            "inputs": [
                {"name": "owner", "type": "address", "indexed": True, "internalType": "address"},
                {"name": "spender", "type": "address", "indexed": True, "internalType": "address"},
                {"name": "value", "type": "uint256", "indexed": False, "internalType": "uint256"},
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "ApprovalForAll",
            "inputs": [
                {"name": "account", "type": "address", "indexed": True, "internalType": "address"},
                {"name": "operator", "type": "address", "indexed": True, "internalType": "address"},
                {"name": "approved", "type": "bool", "indexed": False, "internalType": "bool"},
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "CloseLong",
            "inputs": [
                {"name": "trader", "type": "address", "indexed": True, "internalType": "address"},
                {"name": "assetId", "type": "uint256", "indexed": True, "internalType": "uint256"},
                {"name": "maturityTime", "type": "uint256", "indexed": False, "internalType": "uint256"},
                {"name": "baseAmount", "type": "uint256", "indexed": False, "internalType": "uint256"},
                {"name": "vaultShareAmount", "type": "uint256", "indexed": False, "internalType": "uint256"},
                {"name": "asBase", "type": "bool", "indexed": False, "internalType": "bool"},
                {"name": "bondAmount", "type": "uint256", "indexed": False, "internalType": "uint256"},
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "CloseShort",
            "inputs": [
                {"name": "trader", "type": "address", "indexed": True, "internalType": "address"},
                {"name": "assetId", "type": "uint256", "indexed": True, "internalType": "uint256"},
                {"name": "maturityTime", "type": "uint256", "indexed": False, "internalType": "uint256"},
                {"name": "baseAmount", "type": "uint256", "indexed": False, "internalType": "uint256"},
                {"name": "vaultShareAmount", "type": "uint256", "indexed": False, "internalType": "uint256"},
                {"name": "asBase", "type": "bool", "indexed": False, "internalType": "bool"},
                {"name": "bondAmount", "type": "uint256", "indexed": False, "internalType": "uint256"},
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "CollectGovernanceFee",
            "inputs": [
                {"name": "collector", "type": "address", "indexed": True, "internalType": "address"},
                {"name": "fees", "type": "uint256", "indexed": False, "internalType": "uint256"},
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "CreateCheckpoint",
            "inputs": [
                {"name": "checkpointTime", "type": "uint256", "indexed": True, "internalType": "uint256"},
                {"name": "vaultSharePrice", "type": "uint256", "indexed": False, "internalType": "uint256"},
                {"name": "maturedShorts", "type": "uint256", "indexed": False, "internalType": "uint256"},
                {"name": "maturedLongs", "type": "uint256", "indexed": False, "internalType": "uint256"},
                {"name": "lpSharePrice", "type": "uint256", "indexed": False, "internalType": "uint256"},
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "GovernanceUpdated",
            "inputs": [{"name": "newGovernance", "type": "address", "indexed": True, "internalType": "address"}],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "Initialize",
            "inputs": [
                {"name": "provider", "type": "address", "indexed": True, "internalType": "address"},
                {"name": "lpAmount", "type": "uint256", "indexed": False, "internalType": "uint256"},
                {"name": "baseAmount", "type": "uint256", "indexed": False, "internalType": "uint256"},
                {"name": "vaultShareAmount", "type": "uint256", "indexed": False, "internalType": "uint256"},
                {"name": "asBase", "type": "bool", "indexed": False, "internalType": "bool"},
                {"name": "apr", "type": "uint256", "indexed": False, "internalType": "uint256"},
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "OpenLong",
            "inputs": [
                {"name": "trader", "type": "address", "indexed": True, "internalType": "address"},
                {"name": "assetId", "type": "uint256", "indexed": True, "internalType": "uint256"},
                {"name": "maturityTime", "type": "uint256", "indexed": False, "internalType": "uint256"},
                {"name": "baseAmount", "type": "uint256", "indexed": False, "internalType": "uint256"},
                {"name": "vaultShareAmount", "type": "uint256", "indexed": False, "internalType": "uint256"},
                {"name": "asBase", "type": "bool", "indexed": False, "internalType": "bool"},
                {"name": "bondAmount", "type": "uint256", "indexed": False, "internalType": "uint256"},
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "OpenShort",
            "inputs": [
                {"name": "trader", "type": "address", "indexed": True, "internalType": "address"},
                {"name": "assetId", "type": "uint256", "indexed": True, "internalType": "uint256"},
                {"name": "maturityTime", "type": "uint256", "indexed": False, "internalType": "uint256"},
                {"name": "baseAmount", "type": "uint256", "indexed": False, "internalType": "uint256"},
                {"name": "vaultShareAmount", "type": "uint256", "indexed": False, "internalType": "uint256"},
                {"name": "asBase", "type": "bool", "indexed": False, "internalType": "bool"},
                {"name": "baseProceeds", "type": "uint256", "indexed": False, "internalType": "uint256"},
                {"name": "bondAmount", "type": "uint256", "indexed": False, "internalType": "uint256"},
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "PauseStatusUpdated",
            "inputs": [{"name": "isPaused", "type": "bool", "indexed": False, "internalType": "bool"}],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "PauserUpdated",
            "inputs": [
                {"name": "newPauser", "type": "address", "indexed": True, "internalType": "address"},
                {"name": "status", "type": "bool", "indexed": False, "internalType": "bool"},
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "RedeemWithdrawalShares",
            "inputs": [
                {"name": "provider", "type": "address", "indexed": True, "internalType": "address"},
                {"name": "withdrawalShareAmount", "type": "uint256", "indexed": False, "internalType": "uint256"},
                {"name": "baseAmount", "type": "uint256", "indexed": False, "internalType": "uint256"},
                {"name": "vaultShareAmount", "type": "uint256", "indexed": False, "internalType": "uint256"},
                {"name": "asBase", "type": "bool", "indexed": False, "internalType": "bool"},
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "RemoveLiquidity",
            "inputs": [
                {"name": "provider", "type": "address", "indexed": True, "internalType": "address"},
                {"name": "lpAmount", "type": "uint256", "indexed": False, "internalType": "uint256"},
                {"name": "baseAmount", "type": "uint256", "indexed": False, "internalType": "uint256"},
                {"name": "vaultShareAmount", "type": "uint256", "indexed": False, "internalType": "uint256"},
                {"name": "asBase", "type": "bool", "indexed": False, "internalType": "bool"},
                {"name": "withdrawalShareAmount", "type": "uint256", "indexed": False, "internalType": "uint256"},
                {"name": "lpSharePrice", "type": "uint256", "indexed": False, "internalType": "uint256"},
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "TransferSingle",
            "inputs": [
                {"name": "operator", "type": "address", "indexed": True, "internalType": "address"},
                {"name": "from", "type": "address", "indexed": True, "internalType": "address"},
                {"name": "to", "type": "address", "indexed": True, "internalType": "address"},
                {"name": "id", "type": "uint256", "indexed": False, "internalType": "uint256"},
                {"name": "value", "type": "uint256", "indexed": False, "internalType": "uint256"},
            ],
            "anonymous": False,
        },
        {"type": "error", "name": "BatchInputLengthMismatch", "inputs": []},
        {"type": "error", "name": "BelowMinimumContribution", "inputs": []},
        {"type": "error", "name": "DecreasedPresentValueWhenAddingLiquidity", "inputs": []},
        {"type": "error", "name": "DistributeExcessIdleFailed", "inputs": []},
        {"type": "error", "name": "ExpInvalidExponent", "inputs": []},
        {"type": "error", "name": "ExpiredDeadline", "inputs": []},
        {"type": "error", "name": "InsufficientBalance", "inputs": []},
        {
            "type": "error",
            "name": "InsufficientLiquidity",
            "inputs": [
                {"name": "reason", "type": "uint8", "internalType": "enum IHyperdrive.InsufficientLiquidityReason"}
            ],
        },
        {"type": "error", "name": "InvalidApr", "inputs": []},
        {"type": "error", "name": "InvalidBaseToken", "inputs": []},
        {"type": "error", "name": "InvalidCheckpointTime", "inputs": []},
        {"type": "error", "name": "InvalidERC20Bridge", "inputs": []},
        {"type": "error", "name": "InvalidFeeDestination", "inputs": []},
        {"type": "error", "name": "InvalidInitialVaultSharePrice", "inputs": []},
        {"type": "error", "name": "InvalidLPSharePrice", "inputs": []},
        {"type": "error", "name": "InvalidPresentValue", "inputs": []},
        {"type": "error", "name": "InvalidShareReserves", "inputs": []},
        {"type": "error", "name": "InvalidSignature", "inputs": []},
        {"type": "error", "name": "InvalidTimestamp", "inputs": []},
        {"type": "error", "name": "LnInvalidInput", "inputs": []},
        {"type": "error", "name": "MinimumSharePrice", "inputs": []},
        {"type": "error", "name": "MinimumTransactionAmount", "inputs": []},
        {"type": "error", "name": "NotPayable", "inputs": []},
        {"type": "error", "name": "OutputLimit", "inputs": []},
        {"type": "error", "name": "PoolAlreadyInitialized", "inputs": []},
        {"type": "error", "name": "PoolIsPaused", "inputs": []},
        {"type": "error", "name": "RestrictedZeroAddress", "inputs": []},
        {"type": "error", "name": "ReturnData", "inputs": [{"name": "data", "type": "bytes", "internalType": "bytes"}]},
        {"type": "error", "name": "SweepFailed", "inputs": []},
        {"type": "error", "name": "TransferFailed", "inputs": []},
        {"type": "error", "name": "Unauthorized", "inputs": []},
        {"type": "error", "name": "UnexpectedSuccess", "inputs": []},
        {"type": "error", "name": "UnsafeCastToInt128", "inputs": []},
        {"type": "error", "name": "UnsafeCastToInt256", "inputs": []},
        {"type": "error", "name": "UnsafeCastToUint112", "inputs": []},
        {"type": "error", "name": "UnsafeCastToUint128", "inputs": []},
        {"type": "error", "name": "UnsupportedToken", "inputs": []},
    ],
)
# pylint: disable=line-too-long
ierc4626hyperdrive_bytecode = HexStr("0x")


class IERC4626HyperdriveContract(Contract):
    """A web3.py Contract class for the IERC4626Hyperdrive contract."""

    abi: ABI = ierc4626hyperdrive_abi
    bytecode: bytes = HexBytes(ierc4626hyperdrive_bytecode)

    def __init__(self, address: ChecksumAddress | None = None) -> None:
        try:
            # Initialize parent Contract class
            super().__init__(address=address)
            self.functions = IERC4626HyperdriveContractFunctions(ierc4626hyperdrive_abi, self.w3, address)  # type: ignore
            self.events = IERC4626HyperdriveContractEvents(ierc4626hyperdrive_abi, self.w3, address)  # type: ignore
            self.errors = IERC4626HyperdriveContractErrors()

        except FallbackNotFound:
            print("Fallback function not found. Continuing...")

    events: IERC4626HyperdriveContractEvents

    errors: IERC4626HyperdriveContractErrors = IERC4626HyperdriveContractErrors()

    functions: IERC4626HyperdriveContractFunctions

    @classmethod
    def constructor(cls) -> ContractConstructor:  # type: ignore
        """Creates a transaction with the contract's constructor function.

        Parameters
        ----------

        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.

        """

        return super().constructor()

    @classmethod
    def deploy(cls, w3: Web3, account: LocalAccount | ChecksumAddress) -> Self:
        """Deploys and instance of the contract.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.
        """
        deployer = cls.factory(w3=w3)
        constructor_fn = deployer.constructor()

        # if an address is supplied, try to use a web3 default account
        if isinstance(account, str):
            tx_hash = constructor_fn.transact({"from": account})
            tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

            deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
            return deployed_contract

        # otherwise use the account provided.
        deployment_tx = constructor_fn.build_transaction()
        current_nonce = w3.eth.get_transaction_count(account.address)
        deployment_tx.update({"nonce": current_nonce})

        # Sign the transaction with local account private key
        signed_tx = account.sign_transaction(deployment_tx)

        # Send the signed transaction and wait for receipt
        tx_hash = w3.eth.send_raw_transaction(signed_tx.rawTransaction)
        tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

        deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
        return deployed_contract

    @classmethod
    def factory(cls, w3: Web3, class_name: str | None = None, **kwargs: Any) -> Type[Self]:
        """Deploys and instance of the contract.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        class_name: str | None
            The instance class name.

        Returns
        -------
        Self
            A deployed instance of the contract.
        """
        contract = super().factory(w3, class_name, **kwargs)
        contract.functions = IERC4626HyperdriveContractFunctions(ierc4626hyperdrive_abi, w3, None)
        contract.errors = IERC4626HyperdriveContractErrors()

        return contract
