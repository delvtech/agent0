"""A web3.py Contract class for the HyperdriveRegistry contract.

DO NOT EDIT.  This file was generated by pypechain.  See documentation at
https://github.com/delvtech/pypechain"""

# contracts have PascalCase names
# pylint: disable=invalid-name

# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments

# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return

# This file is bound to get very long depending on contract sizes.
# pylint: disable=too-many-lines

# methods are overriden with specific arguments instead of generic *args, **kwargs
# pylint: disable=arguments-differ

# consumers have too many opinions on line length
# pylint: disable=line-too-long


from __future__ import annotations

from typing import Any, Iterable, NamedTuple, Sequence, Type, cast

from eth_abi.codec import ABICodec
from eth_abi.registry import registry as default_registry
from eth_account.signers.local import LocalAccount
from eth_typing import ChecksumAddress, HexStr
from hexbytes import HexBytes
from typing_extensions import Self
from web3 import Web3
from web3._utils.filters import LogFilter
from web3.contract.contract import (
    Contract,
    ContractConstructor,
    ContractEvent,
    ContractEvents,
    ContractFunction,
    ContractFunctions,
)
from web3.exceptions import FallbackNotFound
from web3.types import ABI, ABIFunction, BlockIdentifier, CallOverride, EventData, TxParams

from .IHyperdriveRegistryTypes import FactoryInfo, FactoryInfoWithMetadata, InstanceInfo, InstanceInfoWithMetadata
from .utilities import dataclass_to_tuple, get_abi_input_types, rename_returned_types, try_bytecode_hexbytes

structs = {
    "FactoryInfo": FactoryInfo,
    "FactoryInfoWithMetadata": FactoryInfoWithMetadata,
    "InstanceInfo": InstanceInfo,
    "InstanceInfoWithMetadata": InstanceInfoWithMetadata,
}


class HyperdriveRegistryAdminContractFunction(ContractFunction):
    """ContractFunction for the admin method."""

    def __call__(self) -> HyperdriveRegistryAdminContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(str, rename_returned_types(structs, return_types, raw_values))


class HyperdriveRegistryGetFactoriesInRangeContractFunction(ContractFunction):
    """ContractFunction for the getFactoriesInRange method."""

    def __call__(self, startIndex: int, endIndex: int) -> HyperdriveRegistryGetFactoriesInRangeContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(startIndex), dataclass_to_tuple(endIndex))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[str]:
        """returns list[str]."""
        # Define the expected return types from the smart contract call

        return_types = list[str]

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(list[str], rename_returned_types(structs, return_types, raw_values))


class HyperdriveRegistryGetFactoryAtIndexContractFunction(ContractFunction):
    """ContractFunction for the getFactoryAtIndex method."""

    def __call__(self, index: int) -> HyperdriveRegistryGetFactoryAtIndexContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(index))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(str, rename_returned_types(structs, return_types, raw_values))


class HyperdriveRegistryGetFactoryInfoContractFunction(ContractFunction):
    """ContractFunction for the getFactoryInfo method."""

    def __call__(self, factory: str) -> HyperdriveRegistryGetFactoryInfoContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(factory))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> FactoryInfo:
        """returns FactoryInfo."""
        # Define the expected return types from the smart contract call

        return_types = FactoryInfo

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(FactoryInfo, rename_returned_types(structs, return_types, raw_values))


class HyperdriveRegistryGetFactoryInfoWithMetadataContractFunction(ContractFunction):
    """ContractFunction for the getFactoryInfoWithMetadata method."""

    def __call__(self, factory: str) -> HyperdriveRegistryGetFactoryInfoWithMetadataContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(factory))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> FactoryInfoWithMetadata:
        """returns FactoryInfoWithMetadata."""
        # Define the expected return types from the smart contract call

        return_types = FactoryInfoWithMetadata

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(FactoryInfoWithMetadata, rename_returned_types(structs, return_types, raw_values))


class HyperdriveRegistryGetFactoryInfosContractFunction(ContractFunction):
    """ContractFunction for the getFactoryInfos method."""

    def __call__(self, factories: list[str]) -> HyperdriveRegistryGetFactoryInfosContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(factories))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[FactoryInfo]:
        """returns list[FactoryInfo]."""
        # Define the expected return types from the smart contract call

        return_types = list[FactoryInfo]

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(list[FactoryInfo], rename_returned_types(structs, return_types, raw_values))


class HyperdriveRegistryGetFactoryInfosWithMetadataContractFunction(ContractFunction):
    """ContractFunction for the getFactoryInfosWithMetadata method."""

    def __call__(self, factories: list[str]) -> HyperdriveRegistryGetFactoryInfosWithMetadataContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(factories))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[FactoryInfoWithMetadata]:
        """returns list[FactoryInfoWithMetadata]."""
        # Define the expected return types from the smart contract call

        return_types = list[FactoryInfoWithMetadata]

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(list[FactoryInfoWithMetadata], rename_returned_types(structs, return_types, raw_values))


class HyperdriveRegistryGetInstanceAtIndexContractFunction(ContractFunction):
    """ContractFunction for the getInstanceAtIndex method."""

    def __call__(self, index: int) -> HyperdriveRegistryGetInstanceAtIndexContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(index))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(str, rename_returned_types(structs, return_types, raw_values))


class HyperdriveRegistryGetInstanceInfoContractFunction(ContractFunction):
    """ContractFunction for the getInstanceInfo method."""

    def __call__(self, instance: str) -> HyperdriveRegistryGetInstanceInfoContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(instance))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> InstanceInfo:
        """returns InstanceInfo."""
        # Define the expected return types from the smart contract call

        return_types = InstanceInfo

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(InstanceInfo, rename_returned_types(structs, return_types, raw_values))


class HyperdriveRegistryGetInstanceInfoWithMetadataContractFunction(ContractFunction):
    """ContractFunction for the getInstanceInfoWithMetadata method."""

    def __call__(self, instance: str) -> HyperdriveRegistryGetInstanceInfoWithMetadataContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(instance))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> InstanceInfoWithMetadata:
        """returns InstanceInfoWithMetadata."""
        # Define the expected return types from the smart contract call

        return_types = InstanceInfoWithMetadata

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(InstanceInfoWithMetadata, rename_returned_types(structs, return_types, raw_values))


class HyperdriveRegistryGetInstanceInfosContractFunction(ContractFunction):
    """ContractFunction for the getInstanceInfos method."""

    def __call__(self, instances: list[str]) -> HyperdriveRegistryGetInstanceInfosContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(instances))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[InstanceInfo]:
        """returns list[InstanceInfo]."""
        # Define the expected return types from the smart contract call

        return_types = list[InstanceInfo]

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(list[InstanceInfo], rename_returned_types(structs, return_types, raw_values))


class HyperdriveRegistryGetInstanceInfosWithMetadataContractFunction(ContractFunction):
    """ContractFunction for the getInstanceInfosWithMetadata method."""

    def __call__(self, instances: list[str]) -> HyperdriveRegistryGetInstanceInfosWithMetadataContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(instances))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[InstanceInfoWithMetadata]:
        """returns list[InstanceInfoWithMetadata]."""
        # Define the expected return types from the smart contract call

        return_types = list[InstanceInfoWithMetadata]

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(list[InstanceInfoWithMetadata], rename_returned_types(structs, return_types, raw_values))


class HyperdriveRegistryGetInstancesInRangeContractFunction(ContractFunction):
    """ContractFunction for the getInstancesInRange method."""

    def __call__(self, startIndex: int, endIndex: int) -> HyperdriveRegistryGetInstancesInRangeContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(startIndex), dataclass_to_tuple(endIndex))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[str]:
        """returns list[str]."""
        # Define the expected return types from the smart contract call

        return_types = list[str]

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(list[str], rename_returned_types(structs, return_types, raw_values))


class HyperdriveRegistryGetNumberOfFactoriesContractFunction(ContractFunction):
    """ContractFunction for the getNumberOfFactories method."""

    def __call__(self) -> HyperdriveRegistryGetNumberOfFactoriesContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(int, rename_returned_types(structs, return_types, raw_values))


class HyperdriveRegistryGetNumberOfInstancesContractFunction(ContractFunction):
    """ContractFunction for the getNumberOfInstances method."""

    def __call__(self) -> HyperdriveRegistryGetNumberOfInstancesContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(int, rename_returned_types(structs, return_types, raw_values))


class HyperdriveRegistryKindContractFunction(ContractFunction):
    """ContractFunction for the kind method."""

    def __call__(self) -> HyperdriveRegistryKindContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(str, rename_returned_types(structs, return_types, raw_values))


class HyperdriveRegistryNameContractFunction(ContractFunction):
    """ContractFunction for the name method."""

    def __call__(self) -> HyperdriveRegistryNameContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(str, rename_returned_types(structs, return_types, raw_values))


class HyperdriveRegistrySetFactoryInfoContractFunction(ContractFunction):
    """ContractFunction for the setFactoryInfo method."""

    def __call__(self, factories: list[str], data: list[int]) -> HyperdriveRegistrySetFactoryInfoContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(factories), dataclass_to_tuple(data))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class HyperdriveRegistrySetInstanceInfoContractFunction(ContractFunction):
    """ContractFunction for the setInstanceInfo method."""

    def __call__(self, instances: list[str], data: list[int], factories: list[str]) -> HyperdriveRegistrySetInstanceInfoContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(instances), dataclass_to_tuple(data), dataclass_to_tuple(factories))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class HyperdriveRegistryUpdateAdminContractFunction(ContractFunction):
    """ContractFunction for the updateAdmin method."""

    def __call__(self, admin: str) -> HyperdriveRegistryUpdateAdminContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(admin))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class HyperdriveRegistryVersionContractFunction(ContractFunction):
    """ContractFunction for the version method."""

    def __call__(self) -> HyperdriveRegistryVersionContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(str, rename_returned_types(structs, return_types, raw_values))


class HyperdriveRegistryContractFunctions(ContractFunctions):
    """ContractFunctions for the HyperdriveRegistry contract."""

    admin: HyperdriveRegistryAdminContractFunction

    getFactoriesInRange: HyperdriveRegistryGetFactoriesInRangeContractFunction

    getFactoryAtIndex: HyperdriveRegistryGetFactoryAtIndexContractFunction

    getFactoryInfo: HyperdriveRegistryGetFactoryInfoContractFunction

    getFactoryInfoWithMetadata: HyperdriveRegistryGetFactoryInfoWithMetadataContractFunction

    getFactoryInfos: HyperdriveRegistryGetFactoryInfosContractFunction

    getFactoryInfosWithMetadata: HyperdriveRegistryGetFactoryInfosWithMetadataContractFunction

    getInstanceAtIndex: HyperdriveRegistryGetInstanceAtIndexContractFunction

    getInstanceInfo: HyperdriveRegistryGetInstanceInfoContractFunction

    getInstanceInfoWithMetadata: HyperdriveRegistryGetInstanceInfoWithMetadataContractFunction

    getInstanceInfos: HyperdriveRegistryGetInstanceInfosContractFunction

    getInstanceInfosWithMetadata: HyperdriveRegistryGetInstanceInfosWithMetadataContractFunction

    getInstancesInRange: HyperdriveRegistryGetInstancesInRangeContractFunction

    getNumberOfFactories: HyperdriveRegistryGetNumberOfFactoriesContractFunction

    getNumberOfInstances: HyperdriveRegistryGetNumberOfInstancesContractFunction

    kind: HyperdriveRegistryKindContractFunction

    name: HyperdriveRegistryNameContractFunction

    setFactoryInfo: HyperdriveRegistrySetFactoryInfoContractFunction

    setInstanceInfo: HyperdriveRegistrySetInstanceInfoContractFunction

    updateAdmin: HyperdriveRegistryUpdateAdminContractFunction

    version: HyperdriveRegistryVersionContractFunction

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
        decode_tuples: bool | None = False,
    ) -> None:
        super().__init__(abi, w3, address, decode_tuples)
        self.admin = HyperdriveRegistryAdminContractFunction.factory(
            "admin",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="admin",
        )
        self.getFactoriesInRange = HyperdriveRegistryGetFactoriesInRangeContractFunction.factory(
            "getFactoriesInRange",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="getFactoriesInRange",
        )
        self.getFactoryAtIndex = HyperdriveRegistryGetFactoryAtIndexContractFunction.factory(
            "getFactoryAtIndex",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="getFactoryAtIndex",
        )
        self.getFactoryInfo = HyperdriveRegistryGetFactoryInfoContractFunction.factory(
            "getFactoryInfo",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="getFactoryInfo",
        )
        self.getFactoryInfoWithMetadata = HyperdriveRegistryGetFactoryInfoWithMetadataContractFunction.factory(
            "getFactoryInfoWithMetadata",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="getFactoryInfoWithMetadata",
        )
        self.getFactoryInfos = HyperdriveRegistryGetFactoryInfosContractFunction.factory(
            "getFactoryInfos",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="getFactoryInfos",
        )
        self.getFactoryInfosWithMetadata = HyperdriveRegistryGetFactoryInfosWithMetadataContractFunction.factory(
            "getFactoryInfosWithMetadata",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="getFactoryInfosWithMetadata",
        )
        self.getInstanceAtIndex = HyperdriveRegistryGetInstanceAtIndexContractFunction.factory(
            "getInstanceAtIndex",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="getInstanceAtIndex",
        )
        self.getInstanceInfo = HyperdriveRegistryGetInstanceInfoContractFunction.factory(
            "getInstanceInfo",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="getInstanceInfo",
        )
        self.getInstanceInfoWithMetadata = HyperdriveRegistryGetInstanceInfoWithMetadataContractFunction.factory(
            "getInstanceInfoWithMetadata",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="getInstanceInfoWithMetadata",
        )
        self.getInstanceInfos = HyperdriveRegistryGetInstanceInfosContractFunction.factory(
            "getInstanceInfos",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="getInstanceInfos",
        )
        self.getInstanceInfosWithMetadata = HyperdriveRegistryGetInstanceInfosWithMetadataContractFunction.factory(
            "getInstanceInfosWithMetadata",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="getInstanceInfosWithMetadata",
        )
        self.getInstancesInRange = HyperdriveRegistryGetInstancesInRangeContractFunction.factory(
            "getInstancesInRange",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="getInstancesInRange",
        )
        self.getNumberOfFactories = HyperdriveRegistryGetNumberOfFactoriesContractFunction.factory(
            "getNumberOfFactories",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="getNumberOfFactories",
        )
        self.getNumberOfInstances = HyperdriveRegistryGetNumberOfInstancesContractFunction.factory(
            "getNumberOfInstances",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="getNumberOfInstances",
        )
        self.kind = HyperdriveRegistryKindContractFunction.factory(
            "kind",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="kind",
        )
        self.name = HyperdriveRegistryNameContractFunction.factory(
            "name",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="name",
        )
        self.setFactoryInfo = HyperdriveRegistrySetFactoryInfoContractFunction.factory(
            "setFactoryInfo",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="setFactoryInfo",
        )
        self.setInstanceInfo = HyperdriveRegistrySetInstanceInfoContractFunction.factory(
            "setInstanceInfo",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="setInstanceInfo",
        )
        self.updateAdmin = HyperdriveRegistryUpdateAdminContractFunction.factory(
            "updateAdmin",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="updateAdmin",
        )
        self.version = HyperdriveRegistryVersionContractFunction.factory(
            "version",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="version",
        )


class HyperdriveRegistryAdminUpdatedContractEvent(ContractEvent):
    """ContractEvent for AdminUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "HyperdriveRegistryAdminUpdatedContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["HyperdriveRegistryAdminUpdatedContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "HyperdriveRegistryAdminUpdatedContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["HyperdriveRegistryAdminUpdatedContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class HyperdriveRegistryFactoryInfoUpdatedContractEvent(ContractEvent):
    """ContractEvent for FactoryInfoUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "HyperdriveRegistryFactoryInfoUpdatedContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["HyperdriveRegistryFactoryInfoUpdatedContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "HyperdriveRegistryFactoryInfoUpdatedContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["HyperdriveRegistryFactoryInfoUpdatedContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class HyperdriveRegistryInstanceInfoUpdatedContractEvent(ContractEvent):
    """ContractEvent for InstanceInfoUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "HyperdriveRegistryInstanceInfoUpdatedContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["HyperdriveRegistryInstanceInfoUpdatedContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "HyperdriveRegistryInstanceInfoUpdatedContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["HyperdriveRegistryInstanceInfoUpdatedContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class HyperdriveRegistryContractEvents(ContractEvents):
    """ContractEvents for the HyperdriveRegistry contract."""

    AdminUpdated: HyperdriveRegistryAdminUpdatedContractEvent

    FactoryInfoUpdated: HyperdriveRegistryFactoryInfoUpdatedContractEvent

    InstanceInfoUpdated: HyperdriveRegistryInstanceInfoUpdatedContractEvent

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
    ) -> None:
        super().__init__(abi, w3, address)
        self.AdminUpdated = cast(
            HyperdriveRegistryAdminUpdatedContractEvent,
            HyperdriveRegistryAdminUpdatedContractEvent.factory(
                "AdminUpdated", w3=w3, contract_abi=abi, address=address, event_name="AdminUpdated"
            ),
        )
        self.FactoryInfoUpdated = cast(
            HyperdriveRegistryFactoryInfoUpdatedContractEvent,
            HyperdriveRegistryFactoryInfoUpdatedContractEvent.factory(
                "FactoryInfoUpdated", w3=w3, contract_abi=abi, address=address, event_name="FactoryInfoUpdated"
            ),
        )
        self.InstanceInfoUpdated = cast(
            HyperdriveRegistryInstanceInfoUpdatedContractEvent,
            HyperdriveRegistryInstanceInfoUpdatedContractEvent.factory(
                "InstanceInfoUpdated", w3=w3, contract_abi=abi, address=address, event_name="InstanceInfoUpdated"
            ),
        )


class HyperdriveRegistryEndIndexTooLargeContractError:
    """ContractError for EndIndexTooLarge."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveRegistryEndIndexTooLargeContractError",
    ) -> None:
        self.selector = "0xe0f7becb"
        self.signature = "EndIndexTooLarge()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveRegistryEndIndexTooLargeContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdriveregistry_abi
                if item.get("name") == "EndIndexTooLarge" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveRegistryEndIndexTooLargeContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdriveregistry_abi
                if item.get("name") == "EndIndexTooLarge" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveRegistryInputLengthMismatchContractError:
    """ContractError for InputLengthMismatch."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveRegistryInputLengthMismatchContractError",
    ) -> None:
        self.selector = "0xaaad13f7"
        self.signature = "InputLengthMismatch()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveRegistryInputLengthMismatchContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdriveregistry_abi
                if item.get("name") == "InputLengthMismatch" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveRegistryInputLengthMismatchContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdriveregistry_abi
                if item.get("name") == "InputLengthMismatch" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveRegistryInvalidFactoryContractError:
    """ContractError for InvalidFactory."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveRegistryInvalidFactoryContractError",
    ) -> None:
        self.selector = "0x7a44db95"
        self.signature = "InvalidFactory()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveRegistryInvalidFactoryContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdriveregistry_abi
                if item.get("name") == "InvalidFactory" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveRegistryInvalidFactoryContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdriveregistry_abi
                if item.get("name") == "InvalidFactory" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveRegistryInvalidIndexesContractError:
    """ContractError for InvalidIndexes."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveRegistryInvalidIndexesContractError",
    ) -> None:
        self.selector = "0x764e6b56"
        self.signature = "InvalidIndexes()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveRegistryInvalidIndexesContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdriveregistry_abi
                if item.get("name") == "InvalidIndexes" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveRegistryInvalidIndexesContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdriveregistry_abi
                if item.get("name") == "InvalidIndexes" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveRegistryUnauthorizedContractError:
    """ContractError for Unauthorized."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "HyperdriveRegistryUnauthorizedContractError",
    ) -> None:
        self.selector = "0x82b42900"
        self.signature = "Unauthorized()"

    def decode_error_data(  # type: ignore
        self: "HyperdriveRegistryUnauthorizedContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdriveregistry_abi
                if item.get("name") == "Unauthorized" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["HyperdriveRegistryUnauthorizedContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in hyperdriveregistry_abi
                if item.get("name") == "Unauthorized" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class HyperdriveRegistryContractErrors:
    """ContractErrors for the HyperdriveRegistry contract."""

    EndIndexTooLarge: HyperdriveRegistryEndIndexTooLargeContractError

    InputLengthMismatch: HyperdriveRegistryInputLengthMismatchContractError

    InvalidFactory: HyperdriveRegistryInvalidFactoryContractError

    InvalidIndexes: HyperdriveRegistryInvalidIndexesContractError

    Unauthorized: HyperdriveRegistryUnauthorizedContractError

    def __init__(
        self,
    ) -> None:
        self.EndIndexTooLarge = HyperdriveRegistryEndIndexTooLargeContractError()
        self.InputLengthMismatch = HyperdriveRegistryInputLengthMismatchContractError()
        self.InvalidFactory = HyperdriveRegistryInvalidFactoryContractError()
        self.InvalidIndexes = HyperdriveRegistryInvalidIndexesContractError()
        self.Unauthorized = HyperdriveRegistryUnauthorizedContractError()

        self._all = [
            self.EndIndexTooLarge,
            self.InputLengthMismatch,
            self.InvalidFactory,
            self.InvalidIndexes,
            self.Unauthorized,
        ]

    def decode_custom_error(self, data: str) -> tuple[Any, ...]:
        """Decodes a custom contract error."""
        selector = data[:10]
        for err in self._all:
            if err.selector == selector:
                return err.decode_error_data(HexBytes(data[10:]))

        raise ValueError(f"HyperdriveRegistry does not have a selector matching {selector}")


hyperdriveregistry_abi: ABI = cast(
    ABI,
    [
        {
            "type": "constructor",
            "inputs": [{"name": "_name", "type": "string", "internalType": "string"}],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "admin",
            "inputs": [],
            "outputs": [{"name": "", "type": "address", "internalType": "address"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getFactoriesInRange",
            "inputs": [
                {"name": "_startIndex", "type": "uint256", "internalType": "uint256"},
                {"name": "_endIndex", "type": "uint256", "internalType": "uint256"},
            ],
            "outputs": [{"name": "factories", "type": "address[]", "internalType": "address[]"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getFactoryAtIndex",
            "inputs": [{"name": "_index", "type": "uint256", "internalType": "uint256"}],
            "outputs": [{"name": "", "type": "address", "internalType": "address"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getFactoryInfo",
            "inputs": [{"name": "_factory", "type": "address", "internalType": "address"}],
            "outputs": [
                {
                    "name": "info",
                    "type": "tuple",
                    "internalType": "struct IHyperdriveRegistry.FactoryInfo",
                    "components": [{"name": "data", "type": "uint256", "internalType": "uint256"}],
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getFactoryInfoWithMetadata",
            "inputs": [{"name": "_factory", "type": "address", "internalType": "address"}],
            "outputs": [
                {
                    "name": "info",
                    "type": "tuple",
                    "internalType": "struct IHyperdriveRegistry.FactoryInfoWithMetadata",
                    "components": [
                        {"name": "data", "type": "uint256", "internalType": "uint256"},
                        {"name": "name", "type": "string", "internalType": "string"},
                        {"name": "kind", "type": "string", "internalType": "string"},
                        {"name": "version", "type": "string", "internalType": "string"},
                    ],
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getFactoryInfos",
            "inputs": [{"name": "__factories", "type": "address[]", "internalType": "address[]"}],
            "outputs": [
                {
                    "name": "info",
                    "type": "tuple[]",
                    "internalType": "struct IHyperdriveRegistry.FactoryInfo[]",
                    "components": [{"name": "data", "type": "uint256", "internalType": "uint256"}],
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getFactoryInfosWithMetadata",
            "inputs": [{"name": "__factories", "type": "address[]", "internalType": "address[]"}],
            "outputs": [
                {
                    "name": "info",
                    "type": "tuple[]",
                    "internalType": "struct IHyperdriveRegistry.FactoryInfoWithMetadata[]",
                    "components": [
                        {"name": "data", "type": "uint256", "internalType": "uint256"},
                        {"name": "name", "type": "string", "internalType": "string"},
                        {"name": "kind", "type": "string", "internalType": "string"},
                        {"name": "version", "type": "string", "internalType": "string"},
                    ],
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getInstanceAtIndex",
            "inputs": [{"name": "_index", "type": "uint256", "internalType": "uint256"}],
            "outputs": [{"name": "", "type": "address", "internalType": "address"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getInstanceInfo",
            "inputs": [{"name": "_instance", "type": "address", "internalType": "address"}],
            "outputs": [
                {
                    "name": "info",
                    "type": "tuple",
                    "internalType": "struct IHyperdriveRegistry.InstanceInfo",
                    "components": [
                        {"name": "data", "type": "uint256", "internalType": "uint256"},
                        {"name": "factory", "type": "address", "internalType": "address"},
                    ],
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getInstanceInfoWithMetadata",
            "inputs": [{"name": "_instance", "type": "address", "internalType": "address"}],
            "outputs": [
                {
                    "name": "info",
                    "type": "tuple",
                    "internalType": "struct IHyperdriveRegistry.InstanceInfoWithMetadata",
                    "components": [
                        {"name": "data", "type": "uint256", "internalType": "uint256"},
                        {"name": "factory", "type": "address", "internalType": "address"},
                        {"name": "name", "type": "string", "internalType": "string"},
                        {"name": "kind", "type": "string", "internalType": "string"},
                        {"name": "version", "type": "string", "internalType": "string"},
                    ],
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getInstanceInfos",
            "inputs": [{"name": "__instances", "type": "address[]", "internalType": "address[]"}],
            "outputs": [
                {
                    "name": "info",
                    "type": "tuple[]",
                    "internalType": "struct IHyperdriveRegistry.InstanceInfo[]",
                    "components": [
                        {"name": "data", "type": "uint256", "internalType": "uint256"},
                        {"name": "factory", "type": "address", "internalType": "address"},
                    ],
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getInstanceInfosWithMetadata",
            "inputs": [{"name": "__instances", "type": "address[]", "internalType": "address[]"}],
            "outputs": [
                {
                    "name": "info",
                    "type": "tuple[]",
                    "internalType": "struct IHyperdriveRegistry.InstanceInfoWithMetadata[]",
                    "components": [
                        {"name": "data", "type": "uint256", "internalType": "uint256"},
                        {"name": "factory", "type": "address", "internalType": "address"},
                        {"name": "name", "type": "string", "internalType": "string"},
                        {"name": "kind", "type": "string", "internalType": "string"},
                        {"name": "version", "type": "string", "internalType": "string"},
                    ],
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getInstancesInRange",
            "inputs": [
                {"name": "_startIndex", "type": "uint256", "internalType": "uint256"},
                {"name": "_endIndex", "type": "uint256", "internalType": "uint256"},
            ],
            "outputs": [{"name": "instances", "type": "address[]", "internalType": "address[]"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getNumberOfFactories",
            "inputs": [],
            "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getNumberOfInstances",
            "inputs": [],
            "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "kind",
            "inputs": [],
            "outputs": [{"name": "", "type": "string", "internalType": "string"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "name",
            "inputs": [],
            "outputs": [{"name": "", "type": "string", "internalType": "string"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "setFactoryInfo",
            "inputs": [
                {"name": "__factories", "type": "address[]", "internalType": "address[]"},
                {"name": "_data", "type": "uint128[]", "internalType": "uint128[]"},
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "setInstanceInfo",
            "inputs": [
                {"name": "__instances", "type": "address[]", "internalType": "address[]"},
                {"name": "_data", "type": "uint128[]", "internalType": "uint128[]"},
                {"name": "__factories", "type": "address[]", "internalType": "address[]"},
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "updateAdmin",
            "inputs": [{"name": "_admin", "type": "address", "internalType": "address"}],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "version",
            "inputs": [],
            "outputs": [{"name": "", "type": "string", "internalType": "string"}],
            "stateMutability": "view",
        },
        {
            "type": "event",
            "name": "AdminUpdated",
            "inputs": [{"name": "admin", "type": "address", "indexed": True, "internalType": "address"}],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "FactoryInfoUpdated",
            "inputs": [
                {"name": "factory", "type": "address", "indexed": True, "internalType": "address"},
                {"name": "data", "type": "uint256", "indexed": True, "internalType": "uint256"},
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "InstanceInfoUpdated",
            "inputs": [
                {"name": "instance", "type": "address", "indexed": True, "internalType": "address"},
                {"name": "data", "type": "uint256", "indexed": True, "internalType": "uint256"},
                {"name": "factory", "type": "address", "indexed": True, "internalType": "address"},
            ],
            "anonymous": False,
        },
        {"type": "error", "name": "EndIndexTooLarge", "inputs": []},
        {"type": "error", "name": "InputLengthMismatch", "inputs": []},
        {"type": "error", "name": "InvalidFactory", "inputs": []},
        {"type": "error", "name": "InvalidIndexes", "inputs": []},
        {"type": "error", "name": "Unauthorized", "inputs": []},
    ],
)
# pylint: disable=line-too-long
hyperdriveregistry_bytecode = HexStr(
    ""
)


class HyperdriveRegistryContract(Contract):
    """A web3.py Contract class for the HyperdriveRegistry contract."""

    abi: ABI = hyperdriveregistry_abi
    bytecode: bytes | None = try_bytecode_hexbytes(hyperdriveregistry_bytecode, "hyperdriveregistry")

    def __init__(self, address: ChecksumAddress | None = None) -> None:
        try:
            # Initialize parent Contract class
            super().__init__(address=address)
            self.functions = HyperdriveRegistryContractFunctions(hyperdriveregistry_abi, self.w3, address)  # type: ignore
            self.events = HyperdriveRegistryContractEvents(hyperdriveregistry_abi, self.w3, address)  # type: ignore
            self.errors = HyperdriveRegistryContractErrors()

        except FallbackNotFound:
            print("Fallback function not found. Continuing...")

    events: HyperdriveRegistryContractEvents

    errors: HyperdriveRegistryContractErrors = HyperdriveRegistryContractErrors()

    functions: HyperdriveRegistryContractFunctions

    class ConstructorArgs(NamedTuple):
        """Arguments to pass the contract's constructor function."""

        name: str

    @classmethod
    def constructor(cls, name: str) -> ContractConstructor:  # type: ignore
        """Creates a transaction with the contract's constructor function.

        Parameters
        ----------

        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.

        """

        return super().constructor(dataclass_to_tuple(name))

    @classmethod
    def deploy(cls, w3: Web3, account: LocalAccount | ChecksumAddress, constructorArgs: ConstructorArgs) -> Self:
        """Deploys and instance of the contract.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.
        """
        deployer = cls.factory(w3=w3)
        constructor_fn = deployer.constructor(*constructorArgs)

        # if an address is supplied, try to use a web3 default account
        if isinstance(account, str):
            tx_hash = constructor_fn.transact({"from": account})
            tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

            deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
            return deployed_contract

        # otherwise use the account provided.
        deployment_tx = constructor_fn.build_transaction()
        current_nonce = w3.eth.get_transaction_count(account.address, "pending")
        deployment_tx.update({"nonce": current_nonce})

        # Sign the transaction with local account private key
        signed_tx = account.sign_transaction(deployment_tx)

        # Send the signed transaction and wait for receipt
        tx_hash = w3.eth.send_raw_transaction(signed_tx.raw_transaction)
        tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

        deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
        return deployed_contract

    @classmethod
    def factory(cls, w3: Web3, class_name: str | None = None, **kwargs: Any) -> Type[Self]:
        """Deploys and instance of the contract.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        class_name: str | None
            The instance class name.

        Returns
        -------
        Self
            A deployed instance of the contract.
        """
        contract = super().factory(w3, class_name, **kwargs)
        contract.functions = HyperdriveRegistryContractFunctions(hyperdriveregistry_abi, w3, None)
        contract.errors = HyperdriveRegistryContractErrors()

        return contract
