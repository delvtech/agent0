"""A web3.py Contract class for the StETHHyperdriveDeployerCoordinator contract.

DO NOT EDIT.  This file was generated by pypechain.  See documentation at
https://github.com/delvtech/pypechain"""

# contracts have PascalCase names
# pylint: disable=invalid-name

# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments

# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return

# This file is bound to get very long depending on contract sizes.
# pylint: disable=too-many-lines

# methods are overriden with specific arguments instead of generic *args, **kwargs
# pylint: disable=arguments-differ

# consumers have too many opinions on line length
# pylint: disable=line-too-long


from __future__ import annotations

from typing import Any, NamedTuple, Type, cast

from eth_abi.codec import ABICodec
from eth_abi.registry import registry as default_registry
from eth_account.signers.local import LocalAccount
from eth_typing import ChecksumAddress, HexStr
from hexbytes import HexBytes
from typing_extensions import Self
from web3 import Web3
from web3.contract.contract import Contract, ContractConstructor, ContractFunction, ContractFunctions
from web3.exceptions import FallbackNotFound
from web3.types import ABI, ABIFunction, BlockIdentifier, CallOverride, TxParams

from .HyperdriveDeployerCoordinatorTypes import Deployment
from .IHyperdriveTypes import Fees, Options, PoolDeployConfig
from .utilities import dataclass_to_tuple, get_abi_input_types, rename_returned_types, try_bytecode_hexbytes

structs = {
    "Fees": Fees,
    "PoolDeployConfig": PoolDeployConfig,
    "Deployment": Deployment,
    "Options": Options,
}


class StETHHyperdriveDeployerCoordinatorConvertToBaseContractFunction(ContractFunction):
    """ContractFunction for the convertToBase method."""

    def __call__(self, vaultSharesToken: str, shareAmount: int) -> StETHHyperdriveDeployerCoordinatorConvertToBaseContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(vaultSharesToken), dataclass_to_tuple(shareAmount))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(int, rename_returned_types(structs, return_types, raw_values))


class StETHHyperdriveDeployerCoordinatorConvertToSharesContractFunction(ContractFunction):
    """ContractFunction for the convertToShares method."""

    def __call__(self, vaultSharesToken: str, baseAmount: int) -> StETHHyperdriveDeployerCoordinatorConvertToSharesContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(vaultSharesToken), dataclass_to_tuple(baseAmount))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(int, rename_returned_types(structs, return_types, raw_values))


class StETHHyperdriveDeployerCoordinatorCoreDeployerContractFunction(ContractFunction):
    """ContractFunction for the coreDeployer method."""

    def __call__(self) -> StETHHyperdriveDeployerCoordinatorCoreDeployerContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(str, rename_returned_types(structs, return_types, raw_values))


class StETHHyperdriveDeployerCoordinatorDeployHyperdriveContractFunction(ContractFunction):
    """ContractFunction for the deployHyperdrive method."""

    def __call__(self, deploymentId: bytes, name: str, deployConfig: PoolDeployConfig, extraData: bytes, salt: bytes) -> StETHHyperdriveDeployerCoordinatorDeployHyperdriveContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(deploymentId),
            dataclass_to_tuple(name),
            dataclass_to_tuple(deployConfig),
            dataclass_to_tuple(extraData),
            dataclass_to_tuple(salt),
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(str, rename_returned_types(structs, return_types, raw_values))


class StETHHyperdriveDeployerCoordinatorDeployTargetContractFunction(ContractFunction):
    """ContractFunction for the deployTarget method."""

    def __call__(self, deploymentId: bytes, deployConfig: PoolDeployConfig, extraData: bytes, targetIndex: int, salt: bytes) -> StETHHyperdriveDeployerCoordinatorDeployTargetContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(deploymentId),
            dataclass_to_tuple(deployConfig),
            dataclass_to_tuple(extraData),
            dataclass_to_tuple(targetIndex),
            dataclass_to_tuple(salt),
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(str, rename_returned_types(structs, return_types, raw_values))


class StETHHyperdriveDeployerCoordinatorDeploymentsContractFunction(ContractFunction):
    """ContractFunction for the deployments method."""

    def __call__(self, deploymentId: bytes) -> StETHHyperdriveDeployerCoordinatorDeploymentsContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(deploymentId))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> Deployment:
        """returns Deployment."""
        # Define the expected return types from the smart contract call

        return_types = Deployment

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(Deployment, rename_returned_types(structs, return_types, raw_values))


class StETHHyperdriveDeployerCoordinatorFactoryContractFunction(ContractFunction):
    """ContractFunction for the factory method."""

    def __call__(self) -> StETHHyperdriveDeployerCoordinatorFactoryContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(str, rename_returned_types(structs, return_types, raw_values))


class StETHHyperdriveDeployerCoordinatorGetNumberOfTargetsContractFunction(ContractFunction):
    """ContractFunction for the getNumberOfTargets method."""

    def __call__(self) -> StETHHyperdriveDeployerCoordinatorGetNumberOfTargetsContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(int, rename_returned_types(structs, return_types, raw_values))


class StETHHyperdriveDeployerCoordinatorInitializeContractFunction(ContractFunction):
    """ContractFunction for the initialize method."""

    def __call__(self, deploymentId: bytes, lp: str, contribution: int, apr: int, options: Options) -> StETHHyperdriveDeployerCoordinatorInitializeContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(deploymentId),
            dataclass_to_tuple(lp),
            dataclass_to_tuple(contribution),
            dataclass_to_tuple(apr),
            dataclass_to_tuple(options),
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(int, rename_returned_types(structs, return_types, raw_values))


class StETHHyperdriveDeployerCoordinatorKindContractFunction(ContractFunction):
    """ContractFunction for the kind method."""

    def __call__(self) -> StETHHyperdriveDeployerCoordinatorKindContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(str, rename_returned_types(structs, return_types, raw_values))


class StETHHyperdriveDeployerCoordinatorLidoContractFunction(ContractFunction):
    """ContractFunction for the lido method."""

    def __call__(self) -> StETHHyperdriveDeployerCoordinatorLidoContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(str, rename_returned_types(structs, return_types, raw_values))


class StETHHyperdriveDeployerCoordinatorNameContractFunction(ContractFunction):
    """ContractFunction for the name method."""

    def __call__(self) -> StETHHyperdriveDeployerCoordinatorNameContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(str, rename_returned_types(structs, return_types, raw_values))


class StETHHyperdriveDeployerCoordinatorTarget0DeployerContractFunction(ContractFunction):
    """ContractFunction for the target0Deployer method."""

    def __call__(self) -> StETHHyperdriveDeployerCoordinatorTarget0DeployerContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(str, rename_returned_types(structs, return_types, raw_values))


class StETHHyperdriveDeployerCoordinatorTarget1DeployerContractFunction(ContractFunction):
    """ContractFunction for the target1Deployer method."""

    def __call__(self) -> StETHHyperdriveDeployerCoordinatorTarget1DeployerContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(str, rename_returned_types(structs, return_types, raw_values))


class StETHHyperdriveDeployerCoordinatorTarget2DeployerContractFunction(ContractFunction):
    """ContractFunction for the target2Deployer method."""

    def __call__(self) -> StETHHyperdriveDeployerCoordinatorTarget2DeployerContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(str, rename_returned_types(structs, return_types, raw_values))


class StETHHyperdriveDeployerCoordinatorTarget3DeployerContractFunction(ContractFunction):
    """ContractFunction for the target3Deployer method."""

    def __call__(self) -> StETHHyperdriveDeployerCoordinatorTarget3DeployerContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(str, rename_returned_types(structs, return_types, raw_values))


class StETHHyperdriveDeployerCoordinatorTarget4DeployerContractFunction(ContractFunction):
    """ContractFunction for the target4Deployer method."""

    def __call__(self) -> StETHHyperdriveDeployerCoordinatorTarget4DeployerContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(str, rename_returned_types(structs, return_types, raw_values))


class StETHHyperdriveDeployerCoordinatorVersionContractFunction(ContractFunction):
    """ContractFunction for the version method."""

    def __call__(self) -> StETHHyperdriveDeployerCoordinatorVersionContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(str, rename_returned_types(structs, return_types, raw_values))


class StETHHyperdriveDeployerCoordinatorContractFunctions(ContractFunctions):
    """ContractFunctions for the StETHHyperdriveDeployerCoordinator contract."""

    convertToBase: StETHHyperdriveDeployerCoordinatorConvertToBaseContractFunction

    convertToShares: StETHHyperdriveDeployerCoordinatorConvertToSharesContractFunction

    coreDeployer: StETHHyperdriveDeployerCoordinatorCoreDeployerContractFunction

    deployHyperdrive: StETHHyperdriveDeployerCoordinatorDeployHyperdriveContractFunction

    deployTarget: StETHHyperdriveDeployerCoordinatorDeployTargetContractFunction

    deployments: StETHHyperdriveDeployerCoordinatorDeploymentsContractFunction

    factory: StETHHyperdriveDeployerCoordinatorFactoryContractFunction

    getNumberOfTargets: StETHHyperdriveDeployerCoordinatorGetNumberOfTargetsContractFunction

    initialize: StETHHyperdriveDeployerCoordinatorInitializeContractFunction

    kind: StETHHyperdriveDeployerCoordinatorKindContractFunction

    lido: StETHHyperdriveDeployerCoordinatorLidoContractFunction

    name: StETHHyperdriveDeployerCoordinatorNameContractFunction

    target0Deployer: StETHHyperdriveDeployerCoordinatorTarget0DeployerContractFunction

    target1Deployer: StETHHyperdriveDeployerCoordinatorTarget1DeployerContractFunction

    target2Deployer: StETHHyperdriveDeployerCoordinatorTarget2DeployerContractFunction

    target3Deployer: StETHHyperdriveDeployerCoordinatorTarget3DeployerContractFunction

    target4Deployer: StETHHyperdriveDeployerCoordinatorTarget4DeployerContractFunction

    version: StETHHyperdriveDeployerCoordinatorVersionContractFunction

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
        decode_tuples: bool | None = False,
    ) -> None:
        super().__init__(abi, w3, address, decode_tuples)
        self.convertToBase = StETHHyperdriveDeployerCoordinatorConvertToBaseContractFunction.factory(
            "convertToBase",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="convertToBase",
        )
        self.convertToShares = StETHHyperdriveDeployerCoordinatorConvertToSharesContractFunction.factory(
            "convertToShares",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="convertToShares",
        )
        self.coreDeployer = StETHHyperdriveDeployerCoordinatorCoreDeployerContractFunction.factory(
            "coreDeployer",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="coreDeployer",
        )
        self.deployHyperdrive = StETHHyperdriveDeployerCoordinatorDeployHyperdriveContractFunction.factory(
            "deployHyperdrive",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="deployHyperdrive",
        )
        self.deployTarget = StETHHyperdriveDeployerCoordinatorDeployTargetContractFunction.factory(
            "deployTarget",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="deployTarget",
        )
        self.deployments = StETHHyperdriveDeployerCoordinatorDeploymentsContractFunction.factory(
            "deployments",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="deployments",
        )
        self.factory = StETHHyperdriveDeployerCoordinatorFactoryContractFunction.factory(
            "factory",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="factory",
        )
        self.getNumberOfTargets = StETHHyperdriveDeployerCoordinatorGetNumberOfTargetsContractFunction.factory(
            "getNumberOfTargets",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="getNumberOfTargets",
        )
        self.initialize = StETHHyperdriveDeployerCoordinatorInitializeContractFunction.factory(
            "initialize",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="initialize",
        )
        self.kind = StETHHyperdriveDeployerCoordinatorKindContractFunction.factory(
            "kind",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="kind",
        )
        self.lido = StETHHyperdriveDeployerCoordinatorLidoContractFunction.factory(
            "lido",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="lido",
        )
        self.name = StETHHyperdriveDeployerCoordinatorNameContractFunction.factory(
            "name",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="name",
        )
        self.target0Deployer = StETHHyperdriveDeployerCoordinatorTarget0DeployerContractFunction.factory(
            "target0Deployer",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="target0Deployer",
        )
        self.target1Deployer = StETHHyperdriveDeployerCoordinatorTarget1DeployerContractFunction.factory(
            "target1Deployer",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="target1Deployer",
        )
        self.target2Deployer = StETHHyperdriveDeployerCoordinatorTarget2DeployerContractFunction.factory(
            "target2Deployer",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="target2Deployer",
        )
        self.target3Deployer = StETHHyperdriveDeployerCoordinatorTarget3DeployerContractFunction.factory(
            "target3Deployer",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="target3Deployer",
        )
        self.target4Deployer = StETHHyperdriveDeployerCoordinatorTarget4DeployerContractFunction.factory(
            "target4Deployer",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="target4Deployer",
        )
        self.version = StETHHyperdriveDeployerCoordinatorVersionContractFunction.factory(
            "version",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="version",
        )


class StETHHyperdriveDeployerCoordinatorDeploymentAlreadyExistsContractError:
    """ContractError for DeploymentAlreadyExists."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "StETHHyperdriveDeployerCoordinatorDeploymentAlreadyExistsContractError",
    ) -> None:
        self.selector = "0x77c3669a"
        self.signature = "DeploymentAlreadyExists()"

    def decode_error_data(  # type: ignore
        self: "StETHHyperdriveDeployerCoordinatorDeploymentAlreadyExistsContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in stethhyperdrivedeployercoordinator_abi
                if item.get("name") == "DeploymentAlreadyExists" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["StETHHyperdriveDeployerCoordinatorDeploymentAlreadyExistsContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in stethhyperdrivedeployercoordinator_abi
                if item.get("name") == "DeploymentAlreadyExists" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class StETHHyperdriveDeployerCoordinatorDeploymentDoesNotExistContractError:
    """ContractError for DeploymentDoesNotExist."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "StETHHyperdriveDeployerCoordinatorDeploymentDoesNotExistContractError",
    ) -> None:
        self.selector = "0xe62c7024"
        self.signature = "DeploymentDoesNotExist()"

    def decode_error_data(  # type: ignore
        self: "StETHHyperdriveDeployerCoordinatorDeploymentDoesNotExistContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in stethhyperdrivedeployercoordinator_abi
                if item.get("name") == "DeploymentDoesNotExist" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["StETHHyperdriveDeployerCoordinatorDeploymentDoesNotExistContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in stethhyperdrivedeployercoordinator_abi
                if item.get("name") == "DeploymentDoesNotExist" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class StETHHyperdriveDeployerCoordinatorHyperdriveAlreadyDeployedContractError:
    """ContractError for HyperdriveAlreadyDeployed."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "StETHHyperdriveDeployerCoordinatorHyperdriveAlreadyDeployedContractError",
    ) -> None:
        self.selector = "0x2c95caeb"
        self.signature = "HyperdriveAlreadyDeployed()"

    def decode_error_data(  # type: ignore
        self: "StETHHyperdriveDeployerCoordinatorHyperdriveAlreadyDeployedContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in stethhyperdrivedeployercoordinator_abi
                if item.get("name") == "HyperdriveAlreadyDeployed" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["StETHHyperdriveDeployerCoordinatorHyperdriveAlreadyDeployedContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in stethhyperdrivedeployercoordinator_abi
                if item.get("name") == "HyperdriveAlreadyDeployed" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class StETHHyperdriveDeployerCoordinatorHyperdriveIsNotDeployedContractError:
    """ContractError for HyperdriveIsNotDeployed."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "StETHHyperdriveDeployerCoordinatorHyperdriveIsNotDeployedContractError",
    ) -> None:
        self.selector = "0x952b05cb"
        self.signature = "HyperdriveIsNotDeployed()"

    def decode_error_data(  # type: ignore
        self: "StETHHyperdriveDeployerCoordinatorHyperdriveIsNotDeployedContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in stethhyperdrivedeployercoordinator_abi
                if item.get("name") == "HyperdriveIsNotDeployed" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["StETHHyperdriveDeployerCoordinatorHyperdriveIsNotDeployedContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in stethhyperdrivedeployercoordinator_abi
                if item.get("name") == "HyperdriveIsNotDeployed" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class StETHHyperdriveDeployerCoordinatorIncompleteDeploymentContractError:
    """ContractError for IncompleteDeployment."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "StETHHyperdriveDeployerCoordinatorIncompleteDeploymentContractError",
    ) -> None:
        self.selector = "0xe97cc2bf"
        self.signature = "IncompleteDeployment()"

    def decode_error_data(  # type: ignore
        self: "StETHHyperdriveDeployerCoordinatorIncompleteDeploymentContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in stethhyperdrivedeployercoordinator_abi
                if item.get("name") == "IncompleteDeployment" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["StETHHyperdriveDeployerCoordinatorIncompleteDeploymentContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in stethhyperdrivedeployercoordinator_abi
                if item.get("name") == "IncompleteDeployment" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class StETHHyperdriveDeployerCoordinatorInsufficientValueContractError:
    """ContractError for InsufficientValue."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "StETHHyperdriveDeployerCoordinatorInsufficientValueContractError",
    ) -> None:
        self.selector = "0x11011294"
        self.signature = "InsufficientValue()"

    def decode_error_data(  # type: ignore
        self: "StETHHyperdriveDeployerCoordinatorInsufficientValueContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in stethhyperdrivedeployercoordinator_abi
                if item.get("name") == "InsufficientValue" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["StETHHyperdriveDeployerCoordinatorInsufficientValueContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in stethhyperdrivedeployercoordinator_abi
                if item.get("name") == "InsufficientValue" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class StETHHyperdriveDeployerCoordinatorInvalidBaseTokenContractError:
    """ContractError for InvalidBaseToken."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "StETHHyperdriveDeployerCoordinatorInvalidBaseTokenContractError",
    ) -> None:
        self.selector = "0x0e442a4a"
        self.signature = "InvalidBaseToken()"

    def decode_error_data(  # type: ignore
        self: "StETHHyperdriveDeployerCoordinatorInvalidBaseTokenContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in stethhyperdrivedeployercoordinator_abi
                if item.get("name") == "InvalidBaseToken" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["StETHHyperdriveDeployerCoordinatorInvalidBaseTokenContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in stethhyperdrivedeployercoordinator_abi
                if item.get("name") == "InvalidBaseToken" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class StETHHyperdriveDeployerCoordinatorInvalidCheckpointDurationContractError:
    """ContractError for InvalidCheckpointDuration."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "StETHHyperdriveDeployerCoordinatorInvalidCheckpointDurationContractError",
    ) -> None:
        self.selector = "0x5428734d"
        self.signature = "InvalidCheckpointDuration()"

    def decode_error_data(  # type: ignore
        self: "StETHHyperdriveDeployerCoordinatorInvalidCheckpointDurationContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in stethhyperdrivedeployercoordinator_abi
                if item.get("name") == "InvalidCheckpointDuration" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["StETHHyperdriveDeployerCoordinatorInvalidCheckpointDurationContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in stethhyperdrivedeployercoordinator_abi
                if item.get("name") == "InvalidCheckpointDuration" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class StETHHyperdriveDeployerCoordinatorInvalidFeeAmountsContractError:
    """ContractError for InvalidFeeAmounts."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "StETHHyperdriveDeployerCoordinatorInvalidFeeAmountsContractError",
    ) -> None:
        self.selector = "0x45ee5986"
        self.signature = "InvalidFeeAmounts()"

    def decode_error_data(  # type: ignore
        self: "StETHHyperdriveDeployerCoordinatorInvalidFeeAmountsContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in stethhyperdrivedeployercoordinator_abi
                if item.get("name") == "InvalidFeeAmounts" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["StETHHyperdriveDeployerCoordinatorInvalidFeeAmountsContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in stethhyperdrivedeployercoordinator_abi
                if item.get("name") == "InvalidFeeAmounts" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class StETHHyperdriveDeployerCoordinatorInvalidMinimumShareReservesContractError:
    """ContractError for InvalidMinimumShareReserves."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "StETHHyperdriveDeployerCoordinatorInvalidMinimumShareReservesContractError",
    ) -> None:
        self.selector = "0x49db44f5"
        self.signature = "InvalidMinimumShareReserves()"

    def decode_error_data(  # type: ignore
        self: "StETHHyperdriveDeployerCoordinatorInvalidMinimumShareReservesContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in stethhyperdrivedeployercoordinator_abi
                if item.get("name") == "InvalidMinimumShareReserves" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["StETHHyperdriveDeployerCoordinatorInvalidMinimumShareReservesContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in stethhyperdrivedeployercoordinator_abi
                if item.get("name") == "InvalidMinimumShareReserves" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class StETHHyperdriveDeployerCoordinatorInvalidMinimumTransactionAmountContractError:
    """ContractError for InvalidMinimumTransactionAmount."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "StETHHyperdriveDeployerCoordinatorInvalidMinimumTransactionAmountContractError",
    ) -> None:
        self.selector = "0x3192a446"
        self.signature = "InvalidMinimumTransactionAmount()"

    def decode_error_data(  # type: ignore
        self: "StETHHyperdriveDeployerCoordinatorInvalidMinimumTransactionAmountContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in stethhyperdrivedeployercoordinator_abi
                if item.get("name") == "InvalidMinimumTransactionAmount" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["StETHHyperdriveDeployerCoordinatorInvalidMinimumTransactionAmountContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in stethhyperdrivedeployercoordinator_abi
                if item.get("name") == "InvalidMinimumTransactionAmount" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class StETHHyperdriveDeployerCoordinatorInvalidPositionDurationContractError:
    """ContractError for InvalidPositionDuration."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "StETHHyperdriveDeployerCoordinatorInvalidPositionDurationContractError",
    ) -> None:
        self.selector = "0x4a7fff9e"
        self.signature = "InvalidPositionDuration()"

    def decode_error_data(  # type: ignore
        self: "StETHHyperdriveDeployerCoordinatorInvalidPositionDurationContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in stethhyperdrivedeployercoordinator_abi
                if item.get("name") == "InvalidPositionDuration" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["StETHHyperdriveDeployerCoordinatorInvalidPositionDurationContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in stethhyperdrivedeployercoordinator_abi
                if item.get("name") == "InvalidPositionDuration" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class StETHHyperdriveDeployerCoordinatorInvalidTargetIndexContractError:
    """ContractError for InvalidTargetIndex."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "StETHHyperdriveDeployerCoordinatorInvalidTargetIndexContractError",
    ) -> None:
        self.selector = "0x3b3f02b2"
        self.signature = "InvalidTargetIndex()"

    def decode_error_data(  # type: ignore
        self: "StETHHyperdriveDeployerCoordinatorInvalidTargetIndexContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in stethhyperdrivedeployercoordinator_abi
                if item.get("name") == "InvalidTargetIndex" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["StETHHyperdriveDeployerCoordinatorInvalidTargetIndexContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in stethhyperdrivedeployercoordinator_abi
                if item.get("name") == "InvalidTargetIndex" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class StETHHyperdriveDeployerCoordinatorInvalidVaultSharesTokenContractError:
    """ContractError for InvalidVaultSharesToken."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "StETHHyperdriveDeployerCoordinatorInvalidVaultSharesTokenContractError",
    ) -> None:
        self.selector = "0xe7ee73a0"
        self.signature = "InvalidVaultSharesToken()"

    def decode_error_data(  # type: ignore
        self: "StETHHyperdriveDeployerCoordinatorInvalidVaultSharesTokenContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in stethhyperdrivedeployercoordinator_abi
                if item.get("name") == "InvalidVaultSharesToken" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["StETHHyperdriveDeployerCoordinatorInvalidVaultSharesTokenContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in stethhyperdrivedeployercoordinator_abi
                if item.get("name") == "InvalidVaultSharesToken" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class StETHHyperdriveDeployerCoordinatorMismatchedConfigContractError:
    """ContractError for MismatchedConfig."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "StETHHyperdriveDeployerCoordinatorMismatchedConfigContractError",
    ) -> None:
        self.selector = "0x332ee11f"
        self.signature = "MismatchedConfig()"

    def decode_error_data(  # type: ignore
        self: "StETHHyperdriveDeployerCoordinatorMismatchedConfigContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in stethhyperdrivedeployercoordinator_abi
                if item.get("name") == "MismatchedConfig" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["StETHHyperdriveDeployerCoordinatorMismatchedConfigContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in stethhyperdrivedeployercoordinator_abi
                if item.get("name") == "MismatchedConfig" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class StETHHyperdriveDeployerCoordinatorMismatchedExtraDataContractError:
    """ContractError for MismatchedExtraData."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "StETHHyperdriveDeployerCoordinatorMismatchedExtraDataContractError",
    ) -> None:
        self.selector = "0xd1939688"
        self.signature = "MismatchedExtraData()"

    def decode_error_data(  # type: ignore
        self: "StETHHyperdriveDeployerCoordinatorMismatchedExtraDataContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in stethhyperdrivedeployercoordinator_abi
                if item.get("name") == "MismatchedExtraData" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["StETHHyperdriveDeployerCoordinatorMismatchedExtraDataContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in stethhyperdrivedeployercoordinator_abi
                if item.get("name") == "MismatchedExtraData" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class StETHHyperdriveDeployerCoordinatorNotPayableContractError:
    """ContractError for NotPayable."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "StETHHyperdriveDeployerCoordinatorNotPayableContractError",
    ) -> None:
        self.selector = "0x1574f9f3"
        self.signature = "NotPayable()"

    def decode_error_data(  # type: ignore
        self: "StETHHyperdriveDeployerCoordinatorNotPayableContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in stethhyperdrivedeployercoordinator_abi
                if item.get("name") == "NotPayable" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["StETHHyperdriveDeployerCoordinatorNotPayableContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in stethhyperdrivedeployercoordinator_abi
                if item.get("name") == "NotPayable" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class StETHHyperdriveDeployerCoordinatorSenderIsNotFactoryContractError:
    """ContractError for SenderIsNotFactory."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "StETHHyperdriveDeployerCoordinatorSenderIsNotFactoryContractError",
    ) -> None:
        self.selector = "0x40843511"
        self.signature = "SenderIsNotFactory()"

    def decode_error_data(  # type: ignore
        self: "StETHHyperdriveDeployerCoordinatorSenderIsNotFactoryContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in stethhyperdrivedeployercoordinator_abi
                if item.get("name") == "SenderIsNotFactory" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["StETHHyperdriveDeployerCoordinatorSenderIsNotFactoryContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in stethhyperdrivedeployercoordinator_abi
                if item.get("name") == "SenderIsNotFactory" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class StETHHyperdriveDeployerCoordinatorTargetAlreadyDeployedContractError:
    """ContractError for TargetAlreadyDeployed."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "StETHHyperdriveDeployerCoordinatorTargetAlreadyDeployedContractError",
    ) -> None:
        self.selector = "0x0744b578"
        self.signature = "TargetAlreadyDeployed()"

    def decode_error_data(  # type: ignore
        self: "StETHHyperdriveDeployerCoordinatorTargetAlreadyDeployedContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in stethhyperdrivedeployercoordinator_abi
                if item.get("name") == "TargetAlreadyDeployed" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["StETHHyperdriveDeployerCoordinatorTargetAlreadyDeployedContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in stethhyperdrivedeployercoordinator_abi
                if item.get("name") == "TargetAlreadyDeployed" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class StETHHyperdriveDeployerCoordinatorTransferFailedContractError:
    """ContractError for TransferFailed."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "StETHHyperdriveDeployerCoordinatorTransferFailedContractError",
    ) -> None:
        self.selector = "0x90b8ec18"
        self.signature = "TransferFailed()"

    def decode_error_data(  # type: ignore
        self: "StETHHyperdriveDeployerCoordinatorTransferFailedContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in stethhyperdrivedeployercoordinator_abi
                if item.get("name") == "TransferFailed" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["StETHHyperdriveDeployerCoordinatorTransferFailedContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in stethhyperdrivedeployercoordinator_abi
                if item.get("name") == "TransferFailed" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class StETHHyperdriveDeployerCoordinatorContractErrors:
    """ContractErrors for the StETHHyperdriveDeployerCoordinator contract."""

    DeploymentAlreadyExists: StETHHyperdriveDeployerCoordinatorDeploymentAlreadyExistsContractError

    DeploymentDoesNotExist: StETHHyperdriveDeployerCoordinatorDeploymentDoesNotExistContractError

    HyperdriveAlreadyDeployed: StETHHyperdriveDeployerCoordinatorHyperdriveAlreadyDeployedContractError

    HyperdriveIsNotDeployed: StETHHyperdriveDeployerCoordinatorHyperdriveIsNotDeployedContractError

    IncompleteDeployment: StETHHyperdriveDeployerCoordinatorIncompleteDeploymentContractError

    InsufficientValue: StETHHyperdriveDeployerCoordinatorInsufficientValueContractError

    InvalidBaseToken: StETHHyperdriveDeployerCoordinatorInvalidBaseTokenContractError

    InvalidCheckpointDuration: StETHHyperdriveDeployerCoordinatorInvalidCheckpointDurationContractError

    InvalidFeeAmounts: StETHHyperdriveDeployerCoordinatorInvalidFeeAmountsContractError

    InvalidMinimumShareReserves: StETHHyperdriveDeployerCoordinatorInvalidMinimumShareReservesContractError

    InvalidMinimumTransactionAmount: StETHHyperdriveDeployerCoordinatorInvalidMinimumTransactionAmountContractError

    InvalidPositionDuration: StETHHyperdriveDeployerCoordinatorInvalidPositionDurationContractError

    InvalidTargetIndex: StETHHyperdriveDeployerCoordinatorInvalidTargetIndexContractError

    InvalidVaultSharesToken: StETHHyperdriveDeployerCoordinatorInvalidVaultSharesTokenContractError

    MismatchedConfig: StETHHyperdriveDeployerCoordinatorMismatchedConfigContractError

    MismatchedExtraData: StETHHyperdriveDeployerCoordinatorMismatchedExtraDataContractError

    NotPayable: StETHHyperdriveDeployerCoordinatorNotPayableContractError

    SenderIsNotFactory: StETHHyperdriveDeployerCoordinatorSenderIsNotFactoryContractError

    TargetAlreadyDeployed: StETHHyperdriveDeployerCoordinatorTargetAlreadyDeployedContractError

    TransferFailed: StETHHyperdriveDeployerCoordinatorTransferFailedContractError

    def __init__(
        self,
    ) -> None:
        self.DeploymentAlreadyExists = StETHHyperdriveDeployerCoordinatorDeploymentAlreadyExistsContractError()
        self.DeploymentDoesNotExist = StETHHyperdriveDeployerCoordinatorDeploymentDoesNotExistContractError()
        self.HyperdriveAlreadyDeployed = StETHHyperdriveDeployerCoordinatorHyperdriveAlreadyDeployedContractError()
        self.HyperdriveIsNotDeployed = StETHHyperdriveDeployerCoordinatorHyperdriveIsNotDeployedContractError()
        self.IncompleteDeployment = StETHHyperdriveDeployerCoordinatorIncompleteDeploymentContractError()
        self.InsufficientValue = StETHHyperdriveDeployerCoordinatorInsufficientValueContractError()
        self.InvalidBaseToken = StETHHyperdriveDeployerCoordinatorInvalidBaseTokenContractError()
        self.InvalidCheckpointDuration = StETHHyperdriveDeployerCoordinatorInvalidCheckpointDurationContractError()
        self.InvalidFeeAmounts = StETHHyperdriveDeployerCoordinatorInvalidFeeAmountsContractError()
        self.InvalidMinimumShareReserves = StETHHyperdriveDeployerCoordinatorInvalidMinimumShareReservesContractError()
        self.InvalidMinimumTransactionAmount = (
            StETHHyperdriveDeployerCoordinatorInvalidMinimumTransactionAmountContractError()
        )
        self.InvalidPositionDuration = StETHHyperdriveDeployerCoordinatorInvalidPositionDurationContractError()
        self.InvalidTargetIndex = StETHHyperdriveDeployerCoordinatorInvalidTargetIndexContractError()
        self.InvalidVaultSharesToken = StETHHyperdriveDeployerCoordinatorInvalidVaultSharesTokenContractError()
        self.MismatchedConfig = StETHHyperdriveDeployerCoordinatorMismatchedConfigContractError()
        self.MismatchedExtraData = StETHHyperdriveDeployerCoordinatorMismatchedExtraDataContractError()
        self.NotPayable = StETHHyperdriveDeployerCoordinatorNotPayableContractError()
        self.SenderIsNotFactory = StETHHyperdriveDeployerCoordinatorSenderIsNotFactoryContractError()
        self.TargetAlreadyDeployed = StETHHyperdriveDeployerCoordinatorTargetAlreadyDeployedContractError()
        self.TransferFailed = StETHHyperdriveDeployerCoordinatorTransferFailedContractError()

        self._all = [
            self.DeploymentAlreadyExists,
            self.DeploymentDoesNotExist,
            self.HyperdriveAlreadyDeployed,
            self.HyperdriveIsNotDeployed,
            self.IncompleteDeployment,
            self.InsufficientValue,
            self.InvalidBaseToken,
            self.InvalidCheckpointDuration,
            self.InvalidFeeAmounts,
            self.InvalidMinimumShareReserves,
            self.InvalidMinimumTransactionAmount,
            self.InvalidPositionDuration,
            self.InvalidTargetIndex,
            self.InvalidVaultSharesToken,
            self.MismatchedConfig,
            self.MismatchedExtraData,
            self.NotPayable,
            self.SenderIsNotFactory,
            self.TargetAlreadyDeployed,
            self.TransferFailed,
        ]

    def decode_custom_error(self, data: str) -> tuple[Any, ...]:
        """Decodes a custom contract error."""
        selector = data[:10]
        for err in self._all:
            if err.selector == selector:
                return err.decode_error_data(HexBytes(data[10:]))

        raise ValueError(f"StETHHyperdriveDeployerCoordinator does not have a selector matching {selector}")


stethhyperdrivedeployercoordinator_abi: ABI = cast(
    ABI,
    [
        {
            "type": "constructor",
            "inputs": [
                {"name": "_name", "type": "string", "internalType": "string"},
                {"name": "_factory", "type": "address", "internalType": "address"},
                {"name": "_coreDeployer", "type": "address", "internalType": "address"},
                {"name": "_target0Deployer", "type": "address", "internalType": "address"},
                {"name": "_target1Deployer", "type": "address", "internalType": "address"},
                {"name": "_target2Deployer", "type": "address", "internalType": "address"},
                {"name": "_target3Deployer", "type": "address", "internalType": "address"},
                {"name": "_target4Deployer", "type": "address", "internalType": "address"},
                {"name": "_lido", "type": "address", "internalType": "contract ILido"},
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "convertToBase",
            "inputs": [
                {"name": "_vaultSharesToken", "type": "address", "internalType": "contract IERC20"},
                {"name": "_shareAmount", "type": "uint256", "internalType": "uint256"},
            ],
            "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "convertToShares",
            "inputs": [
                {"name": "_vaultSharesToken", "type": "address", "internalType": "contract IERC20"},
                {"name": "_baseAmount", "type": "uint256", "internalType": "uint256"},
            ],
            "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "coreDeployer",
            "inputs": [],
            "outputs": [{"name": "", "type": "address", "internalType": "address"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "deployHyperdrive",
            "inputs": [
                {"name": "_deploymentId", "type": "bytes32", "internalType": "bytes32"},
                {"name": "__name", "type": "string", "internalType": "string"},
                {
                    "name": "_deployConfig",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.PoolDeployConfig",
                    "components": [
                        {"name": "baseToken", "type": "address", "internalType": "contract IERC20"},
                        {"name": "vaultSharesToken", "type": "address", "internalType": "contract IERC20"},
                        {"name": "linkerFactory", "type": "address", "internalType": "address"},
                        {"name": "linkerCodeHash", "type": "bytes32", "internalType": "bytes32"},
                        {"name": "minimumShareReserves", "type": "uint256", "internalType": "uint256"},
                        {"name": "minimumTransactionAmount", "type": "uint256", "internalType": "uint256"},
                        {"name": "circuitBreakerDelta", "type": "uint256", "internalType": "uint256"},
                        {"name": "positionDuration", "type": "uint256", "internalType": "uint256"},
                        {"name": "checkpointDuration", "type": "uint256", "internalType": "uint256"},
                        {"name": "timeStretch", "type": "uint256", "internalType": "uint256"},
                        {"name": "governance", "type": "address", "internalType": "address"},
                        {"name": "feeCollector", "type": "address", "internalType": "address"},
                        {"name": "sweepCollector", "type": "address", "internalType": "address"},
                        {"name": "checkpointRewarder", "type": "address", "internalType": "address"},
                        {
                            "name": "fees",
                            "type": "tuple",
                            "internalType": "struct IHyperdrive.Fees",
                            "components": [
                                {"name": "curve", "type": "uint256", "internalType": "uint256"},
                                {"name": "flat", "type": "uint256", "internalType": "uint256"},
                                {"name": "governanceLP", "type": "uint256", "internalType": "uint256"},
                                {"name": "governanceZombie", "type": "uint256", "internalType": "uint256"},
                            ],
                        },
                    ],
                },
                {"name": "_extraData", "type": "bytes", "internalType": "bytes"},
                {"name": "_salt", "type": "bytes32", "internalType": "bytes32"},
            ],
            "outputs": [{"name": "", "type": "address", "internalType": "address"}],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "deployTarget",
            "inputs": [
                {"name": "_deploymentId", "type": "bytes32", "internalType": "bytes32"},
                {
                    "name": "_deployConfig",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.PoolDeployConfig",
                    "components": [
                        {"name": "baseToken", "type": "address", "internalType": "contract IERC20"},
                        {"name": "vaultSharesToken", "type": "address", "internalType": "contract IERC20"},
                        {"name": "linkerFactory", "type": "address", "internalType": "address"},
                        {"name": "linkerCodeHash", "type": "bytes32", "internalType": "bytes32"},
                        {"name": "minimumShareReserves", "type": "uint256", "internalType": "uint256"},
                        {"name": "minimumTransactionAmount", "type": "uint256", "internalType": "uint256"},
                        {"name": "circuitBreakerDelta", "type": "uint256", "internalType": "uint256"},
                        {"name": "positionDuration", "type": "uint256", "internalType": "uint256"},
                        {"name": "checkpointDuration", "type": "uint256", "internalType": "uint256"},
                        {"name": "timeStretch", "type": "uint256", "internalType": "uint256"},
                        {"name": "governance", "type": "address", "internalType": "address"},
                        {"name": "feeCollector", "type": "address", "internalType": "address"},
                        {"name": "sweepCollector", "type": "address", "internalType": "address"},
                        {"name": "checkpointRewarder", "type": "address", "internalType": "address"},
                        {
                            "name": "fees",
                            "type": "tuple",
                            "internalType": "struct IHyperdrive.Fees",
                            "components": [
                                {"name": "curve", "type": "uint256", "internalType": "uint256"},
                                {"name": "flat", "type": "uint256", "internalType": "uint256"},
                                {"name": "governanceLP", "type": "uint256", "internalType": "uint256"},
                                {"name": "governanceZombie", "type": "uint256", "internalType": "uint256"},
                            ],
                        },
                    ],
                },
                {"name": "_extraData", "type": "bytes", "internalType": "bytes"},
                {"name": "_targetIndex", "type": "uint256", "internalType": "uint256"},
                {"name": "_salt", "type": "bytes32", "internalType": "bytes32"},
            ],
            "outputs": [{"name": "target", "type": "address", "internalType": "address"}],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "deployments",
            "inputs": [{"name": "_deploymentId", "type": "bytes32", "internalType": "bytes32"}],
            "outputs": [
                {
                    "name": "",
                    "type": "tuple",
                    "internalType": "struct HyperdriveDeployerCoordinator.Deployment",
                    "components": [
                        {"name": "configHash", "type": "bytes32", "internalType": "bytes32"},
                        {"name": "extraDataHash", "type": "bytes32", "internalType": "bytes32"},
                        {"name": "initialSharePrice", "type": "uint256", "internalType": "uint256"},
                        {"name": "hyperdrive", "type": "address", "internalType": "address"},
                        {"name": "target0", "type": "address", "internalType": "address"},
                        {"name": "target1", "type": "address", "internalType": "address"},
                        {"name": "target2", "type": "address", "internalType": "address"},
                        {"name": "target3", "type": "address", "internalType": "address"},
                        {"name": "target4", "type": "address", "internalType": "address"},
                    ],
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "factory",
            "inputs": [],
            "outputs": [{"name": "", "type": "address", "internalType": "address"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getNumberOfTargets",
            "inputs": [],
            "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "initialize",
            "inputs": [
                {"name": "_deploymentId", "type": "bytes32", "internalType": "bytes32"},
                {"name": "_lp", "type": "address", "internalType": "address"},
                {"name": "_contribution", "type": "uint256", "internalType": "uint256"},
                {"name": "_apr", "type": "uint256", "internalType": "uint256"},
                {
                    "name": "_options",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.Options",
                    "components": [
                        {"name": "destination", "type": "address", "internalType": "address"},
                        {"name": "asBase", "type": "bool", "internalType": "bool"},
                        {"name": "extraData", "type": "bytes", "internalType": "bytes"},
                    ],
                },
            ],
            "outputs": [{"name": "lpShares", "type": "uint256", "internalType": "uint256"}],
            "stateMutability": "payable",
        },
        {
            "type": "function",
            "name": "kind",
            "inputs": [],
            "outputs": [{"name": "", "type": "string", "internalType": "string"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "lido",
            "inputs": [],
            "outputs": [{"name": "", "type": "address", "internalType": "contract ILido"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "name",
            "inputs": [],
            "outputs": [{"name": "", "type": "string", "internalType": "string"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "target0Deployer",
            "inputs": [],
            "outputs": [{"name": "", "type": "address", "internalType": "address"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "target1Deployer",
            "inputs": [],
            "outputs": [{"name": "", "type": "address", "internalType": "address"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "target2Deployer",
            "inputs": [],
            "outputs": [{"name": "", "type": "address", "internalType": "address"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "target3Deployer",
            "inputs": [],
            "outputs": [{"name": "", "type": "address", "internalType": "address"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "target4Deployer",
            "inputs": [],
            "outputs": [{"name": "", "type": "address", "internalType": "address"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "version",
            "inputs": [],
            "outputs": [{"name": "", "type": "string", "internalType": "string"}],
            "stateMutability": "pure",
        },
        {"type": "error", "name": "DeploymentAlreadyExists", "inputs": []},
        {"type": "error", "name": "DeploymentDoesNotExist", "inputs": []},
        {"type": "error", "name": "HyperdriveAlreadyDeployed", "inputs": []},
        {"type": "error", "name": "HyperdriveIsNotDeployed", "inputs": []},
        {"type": "error", "name": "IncompleteDeployment", "inputs": []},
        {"type": "error", "name": "InsufficientValue", "inputs": []},
        {"type": "error", "name": "InvalidBaseToken", "inputs": []},
        {"type": "error", "name": "InvalidCheckpointDuration", "inputs": []},
        {"type": "error", "name": "InvalidFeeAmounts", "inputs": []},
        {"type": "error", "name": "InvalidMinimumShareReserves", "inputs": []},
        {"type": "error", "name": "InvalidMinimumTransactionAmount", "inputs": []},
        {"type": "error", "name": "InvalidPositionDuration", "inputs": []},
        {"type": "error", "name": "InvalidTargetIndex", "inputs": []},
        {"type": "error", "name": "InvalidVaultSharesToken", "inputs": []},
        {"type": "error", "name": "MismatchedConfig", "inputs": []},
        {"type": "error", "name": "MismatchedExtraData", "inputs": []},
        {"type": "error", "name": "NotPayable", "inputs": []},
        {"type": "error", "name": "SenderIsNotFactory", "inputs": []},
        {"type": "error", "name": "TargetAlreadyDeployed", "inputs": []},
        {"type": "error", "name": "TransferFailed", "inputs": []},
    ],
)
# pylint: disable=line-too-long
stethhyperdrivedeployercoordinator_bytecode = HexStr(
    ""
)


class StETHHyperdriveDeployerCoordinatorContract(Contract):
    """A web3.py Contract class for the StETHHyperdriveDeployerCoordinator contract."""

    abi: ABI = stethhyperdrivedeployercoordinator_abi
    bytecode: bytes | None = try_bytecode_hexbytes(
        stethhyperdrivedeployercoordinator_bytecode, "stethhyperdrivedeployercoordinator"
    )

    def __init__(self, address: ChecksumAddress | None = None) -> None:
        try:
            # Initialize parent Contract class
            super().__init__(address=address)
            self.functions = StETHHyperdriveDeployerCoordinatorContractFunctions(stethhyperdrivedeployercoordinator_abi, self.w3, address)  # type: ignore

            self.errors = StETHHyperdriveDeployerCoordinatorContractErrors()

        except FallbackNotFound:
            print("Fallback function not found. Continuing...")

    errors: StETHHyperdriveDeployerCoordinatorContractErrors = StETHHyperdriveDeployerCoordinatorContractErrors()

    functions: StETHHyperdriveDeployerCoordinatorContractFunctions

    class ConstructorArgs(NamedTuple):
        """Arguments to pass the contract's constructor function."""

        name: str

        factory: str

        coreDeployer: str

        target0Deployer: str

        target1Deployer: str

        target2Deployer: str

        target3Deployer: str

        target4Deployer: str

        lido: str

    @classmethod
    def constructor(cls, name: str, factory: str, coreDeployer: str, target0Deployer: str, target1Deployer: str, target2Deployer: str, target3Deployer: str, target4Deployer: str, lido: str) -> ContractConstructor:  # type: ignore
        """Creates a transaction with the contract's constructor function.

        Parameters
        ----------

        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.

        """

        return super().constructor(
            dataclass_to_tuple(name),
            dataclass_to_tuple(factory),
            dataclass_to_tuple(coreDeployer),
            dataclass_to_tuple(target0Deployer),
            dataclass_to_tuple(target1Deployer),
            dataclass_to_tuple(target2Deployer),
            dataclass_to_tuple(target3Deployer),
            dataclass_to_tuple(target4Deployer),
            dataclass_to_tuple(lido),
        )

    @classmethod
    def deploy(cls, w3: Web3, account: LocalAccount | ChecksumAddress, constructorArgs: ConstructorArgs) -> Self:
        """Deploys and instance of the contract.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.
        """
        deployer = cls.factory(w3=w3)
        constructor_fn = deployer.constructor(*constructorArgs)

        # if an address is supplied, try to use a web3 default account
        if isinstance(account, str):
            tx_hash = constructor_fn.transact({"from": account})
            tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

            deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
            return deployed_contract

        # otherwise use the account provided.
        deployment_tx = constructor_fn.build_transaction()
        current_nonce = w3.eth.get_transaction_count(account.address, "pending")
        deployment_tx.update({"nonce": current_nonce})

        # Sign the transaction with local account private key
        signed_tx = account.sign_transaction(deployment_tx)

        # Send the signed transaction and wait for receipt
        tx_hash = w3.eth.send_raw_transaction(signed_tx.rawTransaction)
        tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

        deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
        return deployed_contract

    @classmethod
    def factory(cls, w3: Web3, class_name: str | None = None, **kwargs: Any) -> Type[Self]:
        """Deploys and instance of the contract.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        class_name: str | None
            The instance class name.

        Returns
        -------
        Self
            A deployed instance of the contract.
        """
        contract = super().factory(w3, class_name, **kwargs)
        contract.functions = StETHHyperdriveDeployerCoordinatorContractFunctions(
            stethhyperdrivedeployercoordinator_abi, w3, None
        )
        contract.errors = StETHHyperdriveDeployerCoordinatorContractErrors()

        return contract
