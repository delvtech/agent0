"""A web3.py Contract class for the ERC4626Hyperdrive contract.

DO NOT EDIT.  This file was generated by pypechain.  See documentation at
https://github.com/delvtech/pypechain"""

# contracts have PascalCase names
# pylint: disable=invalid-name

# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments

# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return

# This file is bound to get very long depending on contract sizes.
# pylint: disable=too-many-lines

# methods are overriden with specific arguments instead of generic *args, **kwargs
# pylint: disable=arguments-differ

# consumers have too many opinions on line length
# pylint: disable=line-too-long


from __future__ import annotations

from typing import Any, Iterable, NamedTuple, Sequence, Type, cast

from eth_abi.codec import ABICodec
from eth_abi.registry import registry as default_registry
from eth_account.signers.local import LocalAccount
from eth_typing import ChecksumAddress, HexStr
from hexbytes import HexBytes
from typing_extensions import Self
from web3 import Web3
from web3._utils.filters import LogFilter
from web3.contract.contract import (
    Contract,
    ContractConstructor,
    ContractEvent,
    ContractEvents,
    ContractFunction,
    ContractFunctions,
)
from web3.exceptions import FallbackNotFound
from web3.types import ABI, ABIFunction, BlockIdentifier, CallOverride, EventData, TxParams

from .IHyperdriveTypes import Fees, Options, PoolConfig
from .utilities import dataclass_to_tuple, get_abi_input_types, rename_returned_types

structs = {
    "Fees": Fees,
    "PoolConfig": PoolConfig,
    "Options": Options,
}


class ERC4626HyperdrivePERMIT_TYPEHASHContractFunction(ContractFunction):
    """ContractFunction for the PERMIT_TYPEHASH method."""

    def __call__(self) -> ERC4626HyperdrivePERMIT_TYPEHASHContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bytes:
        """returns bytes."""
        # Define the expected return types from the smart contract call

        return_types = bytes

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(bytes, rename_returned_types(structs, return_types, raw_values))


class ERC4626HyperdriveAddLiquidityContractFunction(ContractFunction):
    """ContractFunction for the addLiquidity method."""

    def __call__(self, arg1: int, arg2: int, arg3: int, arg4: int, arg5: Options) -> ERC4626HyperdriveAddLiquidityContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(arg1),
            dataclass_to_tuple(arg2),
            dataclass_to_tuple(arg3),
            dataclass_to_tuple(arg4),
            dataclass_to_tuple(arg5),
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(int, rename_returned_types(structs, return_types, raw_values))


class ERC4626HyperdriveBatchTransferFromContractFunction(ContractFunction):
    """ContractFunction for the batchTransferFrom method."""

    def __call__(self, arg1: str, arg2: str, arg3: list[int], arg4: list[int]) -> ERC4626HyperdriveBatchTransferFromContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(arg1), dataclass_to_tuple(arg2), dataclass_to_tuple(arg3), dataclass_to_tuple(arg4)
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class ERC4626HyperdriveCheckpointContractFunction(ContractFunction):
    """ContractFunction for the checkpoint method."""

    def __call__(self, arg1: int) -> ERC4626HyperdriveCheckpointContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(arg1))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class ERC4626HyperdriveCloseLongContractFunction(ContractFunction):
    """ContractFunction for the closeLong method."""

    def __call__(self, arg1: int, arg2: int, arg3: int, arg4: Options) -> ERC4626HyperdriveCloseLongContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(arg1), dataclass_to_tuple(arg2), dataclass_to_tuple(arg3), dataclass_to_tuple(arg4)
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(int, rename_returned_types(structs, return_types, raw_values))


class ERC4626HyperdriveCloseShortContractFunction(ContractFunction):
    """ContractFunction for the closeShort method."""

    def __call__(self, arg1: int, arg2: int, arg3: int, arg4: Options) -> ERC4626HyperdriveCloseShortContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(arg1), dataclass_to_tuple(arg2), dataclass_to_tuple(arg3), dataclass_to_tuple(arg4)
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(int, rename_returned_types(structs, return_types, raw_values))


class ERC4626HyperdriveCollectGovernanceFeeContractFunction(ContractFunction):
    """ContractFunction for the collectGovernanceFee method."""

    def __call__(self, arg1: Options) -> ERC4626HyperdriveCollectGovernanceFeeContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(arg1))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(int, rename_returned_types(structs, return_types, raw_values))


class ERC4626HyperdriveDomainSeparatorContractFunction(ContractFunction):
    """ContractFunction for the domainSeparator method."""

    def __call__(self) -> ERC4626HyperdriveDomainSeparatorContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bytes:
        """returns bytes."""
        # Define the expected return types from the smart contract call

        return_types = bytes

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(bytes, rename_returned_types(structs, return_types, raw_values))


class ERC4626HyperdriveInitializeContractFunction(ContractFunction):
    """ContractFunction for the initialize method."""

    def __call__(self, arg1: int, arg2: int, arg3: Options) -> ERC4626HyperdriveInitializeContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(arg1), dataclass_to_tuple(arg2), dataclass_to_tuple(arg3))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(int, rename_returned_types(structs, return_types, raw_values))


class ERC4626HyperdriveOpenLongContractFunction(ContractFunction):
    """ContractFunction for the openLong method."""

    class ReturnValues(NamedTuple):
        """The return named tuple for OpenLong."""

        arg1: int
        arg2: int

    def __call__(self, arg1: int, arg2: int, arg3: int, arg4: Options) -> ERC4626HyperdriveOpenLongContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(arg1), dataclass_to_tuple(arg2), dataclass_to_tuple(arg3), dataclass_to_tuple(arg4)
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> ReturnValues:
        """returns ReturnValues."""
        # Define the expected return types from the smart contract call

        return_types = [int, int]

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return self.ReturnValues(*rename_returned_types(structs, return_types, raw_values))


class ERC4626HyperdriveOpenShortContractFunction(ContractFunction):
    """ContractFunction for the openShort method."""

    class ReturnValues(NamedTuple):
        """The return named tuple for OpenShort."""

        arg1: int
        arg2: int

    def __call__(self, arg1: int, arg2: int, arg3: int, arg4: Options) -> ERC4626HyperdriveOpenShortContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(arg1), dataclass_to_tuple(arg2), dataclass_to_tuple(arg3), dataclass_to_tuple(arg4)
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> ReturnValues:
        """returns ReturnValues."""
        # Define the expected return types from the smart contract call

        return_types = [int, int]

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return self.ReturnValues(*rename_returned_types(structs, return_types, raw_values))


class ERC4626HyperdrivePauseContractFunction(ContractFunction):
    """ContractFunction for the pause method."""

    def __call__(self, arg1: bool) -> ERC4626HyperdrivePauseContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(arg1))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class ERC4626HyperdrivePermitForAllContractFunction(ContractFunction):
    """ContractFunction for the permitForAll method."""

    def __call__(self, owner: str, spender: str, approved: bool, deadline: int, v: int, r: bytes, s: bytes) -> ERC4626HyperdrivePermitForAllContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(owner),
            dataclass_to_tuple(spender),
            dataclass_to_tuple(approved),
            dataclass_to_tuple(deadline),
            dataclass_to_tuple(v),
            dataclass_to_tuple(r),
            dataclass_to_tuple(s),
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class ERC4626HyperdriveRedeemWithdrawalSharesContractFunction(ContractFunction):
    """ContractFunction for the redeemWithdrawalShares method."""

    class ReturnValues(NamedTuple):
        """The return named tuple for RedeemWithdrawalShares."""

        arg1: int
        arg2: int

    def __call__(self, arg1: int, arg2: int, arg3: Options) -> ERC4626HyperdriveRedeemWithdrawalSharesContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(arg1), dataclass_to_tuple(arg2), dataclass_to_tuple(arg3))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> ReturnValues:
        """returns ReturnValues."""
        # Define the expected return types from the smart contract call

        return_types = [int, int]

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return self.ReturnValues(*rename_returned_types(structs, return_types, raw_values))


class ERC4626HyperdriveRemoveLiquidityContractFunction(ContractFunction):
    """ContractFunction for the removeLiquidity method."""

    class ReturnValues(NamedTuple):
        """The return named tuple for RemoveLiquidity."""

        arg1: int
        arg2: int

    def __call__(self, arg1: int, arg2: int, arg3: Options) -> ERC4626HyperdriveRemoveLiquidityContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(arg1), dataclass_to_tuple(arg2), dataclass_to_tuple(arg3))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> ReturnValues:
        """returns ReturnValues."""
        # Define the expected return types from the smart contract call

        return_types = [int, int]

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return self.ReturnValues(*rename_returned_types(structs, return_types, raw_values))


class ERC4626HyperdriveSetApprovalContractFunction(ContractFunction):
    """ContractFunction for the setApproval method."""

    def __call__(self, arg1: int, arg2: str, arg3: int) -> ERC4626HyperdriveSetApprovalContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(arg1), dataclass_to_tuple(arg2), dataclass_to_tuple(arg3))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class ERC4626HyperdriveSetApprovalBridgeContractFunction(ContractFunction):
    """ContractFunction for the setApprovalBridge method."""

    def __call__(self, arg1: int, arg2: str, arg3: int, arg4: str) -> ERC4626HyperdriveSetApprovalBridgeContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(arg1), dataclass_to_tuple(arg2), dataclass_to_tuple(arg3), dataclass_to_tuple(arg4)
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class ERC4626HyperdriveSetApprovalForAllContractFunction(ContractFunction):
    """ContractFunction for the setApprovalForAll method."""

    def __call__(self, arg1: str, arg2: bool) -> ERC4626HyperdriveSetApprovalForAllContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(arg1), dataclass_to_tuple(arg2))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class ERC4626HyperdriveSetGovernanceContractFunction(ContractFunction):
    """ContractFunction for the setGovernance method."""

    def __call__(self, arg1: str) -> ERC4626HyperdriveSetGovernanceContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(arg1))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class ERC4626HyperdriveSetPauserContractFunction(ContractFunction):
    """ContractFunction for the setPauser method."""

    def __call__(self, arg1: str, arg2: bool) -> ERC4626HyperdriveSetPauserContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(arg1), dataclass_to_tuple(arg2))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class ERC4626HyperdriveSweepContractFunction(ContractFunction):
    """ContractFunction for the sweep method."""

    def __call__(self, arg1: str) -> ERC4626HyperdriveSweepContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(arg1))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class ERC4626HyperdriveTarget0ContractFunction(ContractFunction):
    """ContractFunction for the target0 method."""

    def __call__(self) -> ERC4626HyperdriveTarget0ContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(str, rename_returned_types(structs, return_types, raw_values))


class ERC4626HyperdriveTarget1ContractFunction(ContractFunction):
    """ContractFunction for the target1 method."""

    def __call__(self) -> ERC4626HyperdriveTarget1ContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(str, rename_returned_types(structs, return_types, raw_values))


class ERC4626HyperdriveTarget2ContractFunction(ContractFunction):
    """ContractFunction for the target2 method."""

    def __call__(self) -> ERC4626HyperdriveTarget2ContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(str, rename_returned_types(structs, return_types, raw_values))


class ERC4626HyperdriveTarget3ContractFunction(ContractFunction):
    """ContractFunction for the target3 method."""

    def __call__(self) -> ERC4626HyperdriveTarget3ContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(str, rename_returned_types(structs, return_types, raw_values))


class ERC4626HyperdriveTarget4ContractFunction(ContractFunction):
    """ContractFunction for the target4 method."""

    def __call__(self) -> ERC4626HyperdriveTarget4ContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(str, rename_returned_types(structs, return_types, raw_values))


class ERC4626HyperdriveTransferFromContractFunction(ContractFunction):
    """ContractFunction for the transferFrom method."""

    def __call__(self, arg1: int, arg2: str, arg3: str, arg4: int) -> ERC4626HyperdriveTransferFromContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(arg1), dataclass_to_tuple(arg2), dataclass_to_tuple(arg3), dataclass_to_tuple(arg4)
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class ERC4626HyperdriveTransferFromBridgeContractFunction(ContractFunction):
    """ContractFunction for the transferFromBridge method."""

    def __call__(self, arg1: int, arg2: str, arg3: str, arg4: int, arg5: str) -> ERC4626HyperdriveTransferFromBridgeContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(arg1),
            dataclass_to_tuple(arg2),
            dataclass_to_tuple(arg3),
            dataclass_to_tuple(arg4),
            dataclass_to_tuple(arg5),
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class ERC4626HyperdriveContractFunctions(ContractFunctions):
    """ContractFunctions for the ERC4626Hyperdrive contract."""

    PERMIT_TYPEHASH: ERC4626HyperdrivePERMIT_TYPEHASHContractFunction

    addLiquidity: ERC4626HyperdriveAddLiquidityContractFunction

    batchTransferFrom: ERC4626HyperdriveBatchTransferFromContractFunction

    checkpoint: ERC4626HyperdriveCheckpointContractFunction

    closeLong: ERC4626HyperdriveCloseLongContractFunction

    closeShort: ERC4626HyperdriveCloseShortContractFunction

    collectGovernanceFee: ERC4626HyperdriveCollectGovernanceFeeContractFunction

    domainSeparator: ERC4626HyperdriveDomainSeparatorContractFunction

    initialize: ERC4626HyperdriveInitializeContractFunction

    openLong: ERC4626HyperdriveOpenLongContractFunction

    openShort: ERC4626HyperdriveOpenShortContractFunction

    pause: ERC4626HyperdrivePauseContractFunction

    permitForAll: ERC4626HyperdrivePermitForAllContractFunction

    redeemWithdrawalShares: ERC4626HyperdriveRedeemWithdrawalSharesContractFunction

    removeLiquidity: ERC4626HyperdriveRemoveLiquidityContractFunction

    setApproval: ERC4626HyperdriveSetApprovalContractFunction

    setApprovalBridge: ERC4626HyperdriveSetApprovalBridgeContractFunction

    setApprovalForAll: ERC4626HyperdriveSetApprovalForAllContractFunction

    setGovernance: ERC4626HyperdriveSetGovernanceContractFunction

    setPauser: ERC4626HyperdriveSetPauserContractFunction

    sweep: ERC4626HyperdriveSweepContractFunction

    target0: ERC4626HyperdriveTarget0ContractFunction

    target1: ERC4626HyperdriveTarget1ContractFunction

    target2: ERC4626HyperdriveTarget2ContractFunction

    target3: ERC4626HyperdriveTarget3ContractFunction

    target4: ERC4626HyperdriveTarget4ContractFunction

    transferFrom: ERC4626HyperdriveTransferFromContractFunction

    transferFromBridge: ERC4626HyperdriveTransferFromBridgeContractFunction

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
        decode_tuples: bool | None = False,
    ) -> None:
        super().__init__(abi, w3, address, decode_tuples)
        self.PERMIT_TYPEHASH = ERC4626HyperdrivePERMIT_TYPEHASHContractFunction.factory(
            "PERMIT_TYPEHASH",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="PERMIT_TYPEHASH",
        )
        self.addLiquidity = ERC4626HyperdriveAddLiquidityContractFunction.factory(
            "addLiquidity",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="addLiquidity",
        )
        self.batchTransferFrom = ERC4626HyperdriveBatchTransferFromContractFunction.factory(
            "batchTransferFrom",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="batchTransferFrom",
        )
        self.checkpoint = ERC4626HyperdriveCheckpointContractFunction.factory(
            "checkpoint",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="checkpoint",
        )
        self.closeLong = ERC4626HyperdriveCloseLongContractFunction.factory(
            "closeLong",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="closeLong",
        )
        self.closeShort = ERC4626HyperdriveCloseShortContractFunction.factory(
            "closeShort",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="closeShort",
        )
        self.collectGovernanceFee = ERC4626HyperdriveCollectGovernanceFeeContractFunction.factory(
            "collectGovernanceFee",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="collectGovernanceFee",
        )
        self.domainSeparator = ERC4626HyperdriveDomainSeparatorContractFunction.factory(
            "domainSeparator",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="domainSeparator",
        )
        self.initialize = ERC4626HyperdriveInitializeContractFunction.factory(
            "initialize",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="initialize",
        )
        self.openLong = ERC4626HyperdriveOpenLongContractFunction.factory(
            "openLong",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="openLong",
        )
        self.openShort = ERC4626HyperdriveOpenShortContractFunction.factory(
            "openShort",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="openShort",
        )
        self.pause = ERC4626HyperdrivePauseContractFunction.factory(
            "pause",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="pause",
        )
        self.permitForAll = ERC4626HyperdrivePermitForAllContractFunction.factory(
            "permitForAll",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="permitForAll",
        )
        self.redeemWithdrawalShares = ERC4626HyperdriveRedeemWithdrawalSharesContractFunction.factory(
            "redeemWithdrawalShares",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="redeemWithdrawalShares",
        )
        self.removeLiquidity = ERC4626HyperdriveRemoveLiquidityContractFunction.factory(
            "removeLiquidity",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="removeLiquidity",
        )
        self.setApproval = ERC4626HyperdriveSetApprovalContractFunction.factory(
            "setApproval",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="setApproval",
        )
        self.setApprovalBridge = ERC4626HyperdriveSetApprovalBridgeContractFunction.factory(
            "setApprovalBridge",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="setApprovalBridge",
        )
        self.setApprovalForAll = ERC4626HyperdriveSetApprovalForAllContractFunction.factory(
            "setApprovalForAll",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="setApprovalForAll",
        )
        self.setGovernance = ERC4626HyperdriveSetGovernanceContractFunction.factory(
            "setGovernance",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="setGovernance",
        )
        self.setPauser = ERC4626HyperdriveSetPauserContractFunction.factory(
            "setPauser",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="setPauser",
        )
        self.sweep = ERC4626HyperdriveSweepContractFunction.factory(
            "sweep",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="sweep",
        )
        self.target0 = ERC4626HyperdriveTarget0ContractFunction.factory(
            "target0",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="target0",
        )
        self.target1 = ERC4626HyperdriveTarget1ContractFunction.factory(
            "target1",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="target1",
        )
        self.target2 = ERC4626HyperdriveTarget2ContractFunction.factory(
            "target2",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="target2",
        )
        self.target3 = ERC4626HyperdriveTarget3ContractFunction.factory(
            "target3",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="target3",
        )
        self.target4 = ERC4626HyperdriveTarget4ContractFunction.factory(
            "target4",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="target4",
        )
        self.transferFrom = ERC4626HyperdriveTransferFromContractFunction.factory(
            "transferFrom",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="transferFrom",
        )
        self.transferFromBridge = ERC4626HyperdriveTransferFromBridgeContractFunction.factory(
            "transferFromBridge",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="transferFromBridge",
        )


class ERC4626HyperdriveAddLiquidityContractEvent(ContractEvent):
    """ContractEvent for AddLiquidity."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "ERC4626HyperdriveAddLiquidityContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["ERC4626HyperdriveAddLiquidityContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "ERC4626HyperdriveAddLiquidityContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["ERC4626HyperdriveAddLiquidityContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class ERC4626HyperdriveApprovalContractEvent(ContractEvent):
    """ContractEvent for Approval."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "ERC4626HyperdriveApprovalContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["ERC4626HyperdriveApprovalContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "ERC4626HyperdriveApprovalContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["ERC4626HyperdriveApprovalContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class ERC4626HyperdriveApprovalForAllContractEvent(ContractEvent):
    """ContractEvent for ApprovalForAll."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "ERC4626HyperdriveApprovalForAllContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["ERC4626HyperdriveApprovalForAllContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "ERC4626HyperdriveApprovalForAllContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["ERC4626HyperdriveApprovalForAllContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class ERC4626HyperdriveCloseLongContractEvent(ContractEvent):
    """ContractEvent for CloseLong."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "ERC4626HyperdriveCloseLongContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["ERC4626HyperdriveCloseLongContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "ERC4626HyperdriveCloseLongContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["ERC4626HyperdriveCloseLongContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class ERC4626HyperdriveCloseShortContractEvent(ContractEvent):
    """ContractEvent for CloseShort."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "ERC4626HyperdriveCloseShortContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["ERC4626HyperdriveCloseShortContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "ERC4626HyperdriveCloseShortContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["ERC4626HyperdriveCloseShortContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class ERC4626HyperdriveCollectGovernanceFeeContractEvent(ContractEvent):
    """ContractEvent for CollectGovernanceFee."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "ERC4626HyperdriveCollectGovernanceFeeContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["ERC4626HyperdriveCollectGovernanceFeeContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "ERC4626HyperdriveCollectGovernanceFeeContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["ERC4626HyperdriveCollectGovernanceFeeContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class ERC4626HyperdriveCreateCheckpointContractEvent(ContractEvent):
    """ContractEvent for CreateCheckpoint."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "ERC4626HyperdriveCreateCheckpointContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["ERC4626HyperdriveCreateCheckpointContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "ERC4626HyperdriveCreateCheckpointContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["ERC4626HyperdriveCreateCheckpointContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class ERC4626HyperdriveGovernanceUpdatedContractEvent(ContractEvent):
    """ContractEvent for GovernanceUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "ERC4626HyperdriveGovernanceUpdatedContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["ERC4626HyperdriveGovernanceUpdatedContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "ERC4626HyperdriveGovernanceUpdatedContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["ERC4626HyperdriveGovernanceUpdatedContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class ERC4626HyperdriveInitializeContractEvent(ContractEvent):
    """ContractEvent for Initialize."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "ERC4626HyperdriveInitializeContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["ERC4626HyperdriveInitializeContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "ERC4626HyperdriveInitializeContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["ERC4626HyperdriveInitializeContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class ERC4626HyperdriveOpenLongContractEvent(ContractEvent):
    """ContractEvent for OpenLong."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "ERC4626HyperdriveOpenLongContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["ERC4626HyperdriveOpenLongContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "ERC4626HyperdriveOpenLongContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["ERC4626HyperdriveOpenLongContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class ERC4626HyperdriveOpenShortContractEvent(ContractEvent):
    """ContractEvent for OpenShort."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "ERC4626HyperdriveOpenShortContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["ERC4626HyperdriveOpenShortContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "ERC4626HyperdriveOpenShortContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["ERC4626HyperdriveOpenShortContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class ERC4626HyperdrivePauseStatusUpdatedContractEvent(ContractEvent):
    """ContractEvent for PauseStatusUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "ERC4626HyperdrivePauseStatusUpdatedContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["ERC4626HyperdrivePauseStatusUpdatedContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "ERC4626HyperdrivePauseStatusUpdatedContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["ERC4626HyperdrivePauseStatusUpdatedContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class ERC4626HyperdrivePauserUpdatedContractEvent(ContractEvent):
    """ContractEvent for PauserUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "ERC4626HyperdrivePauserUpdatedContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["ERC4626HyperdrivePauserUpdatedContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "ERC4626HyperdrivePauserUpdatedContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["ERC4626HyperdrivePauserUpdatedContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class ERC4626HyperdriveRedeemWithdrawalSharesContractEvent(ContractEvent):
    """ContractEvent for RedeemWithdrawalShares."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "ERC4626HyperdriveRedeemWithdrawalSharesContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["ERC4626HyperdriveRedeemWithdrawalSharesContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "ERC4626HyperdriveRedeemWithdrawalSharesContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["ERC4626HyperdriveRedeemWithdrawalSharesContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class ERC4626HyperdriveRemoveLiquidityContractEvent(ContractEvent):
    """ContractEvent for RemoveLiquidity."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "ERC4626HyperdriveRemoveLiquidityContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["ERC4626HyperdriveRemoveLiquidityContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "ERC4626HyperdriveRemoveLiquidityContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["ERC4626HyperdriveRemoveLiquidityContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class ERC4626HyperdriveTransferSingleContractEvent(ContractEvent):
    """ContractEvent for TransferSingle."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "ERC4626HyperdriveTransferSingleContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["ERC4626HyperdriveTransferSingleContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "ERC4626HyperdriveTransferSingleContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["ERC4626HyperdriveTransferSingleContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class ERC4626HyperdriveContractEvents(ContractEvents):
    """ContractEvents for the ERC4626Hyperdrive contract."""

    AddLiquidity: ERC4626HyperdriveAddLiquidityContractEvent

    Approval: ERC4626HyperdriveApprovalContractEvent

    ApprovalForAll: ERC4626HyperdriveApprovalForAllContractEvent

    CloseLong: ERC4626HyperdriveCloseLongContractEvent

    CloseShort: ERC4626HyperdriveCloseShortContractEvent

    CollectGovernanceFee: ERC4626HyperdriveCollectGovernanceFeeContractEvent

    CreateCheckpoint: ERC4626HyperdriveCreateCheckpointContractEvent

    GovernanceUpdated: ERC4626HyperdriveGovernanceUpdatedContractEvent

    Initialize: ERC4626HyperdriveInitializeContractEvent

    OpenLong: ERC4626HyperdriveOpenLongContractEvent

    OpenShort: ERC4626HyperdriveOpenShortContractEvent

    PauseStatusUpdated: ERC4626HyperdrivePauseStatusUpdatedContractEvent

    PauserUpdated: ERC4626HyperdrivePauserUpdatedContractEvent

    RedeemWithdrawalShares: ERC4626HyperdriveRedeemWithdrawalSharesContractEvent

    RemoveLiquidity: ERC4626HyperdriveRemoveLiquidityContractEvent

    TransferSingle: ERC4626HyperdriveTransferSingleContractEvent

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
    ) -> None:
        super().__init__(abi, w3, address)
        self.AddLiquidity = cast(
            ERC4626HyperdriveAddLiquidityContractEvent,
            ERC4626HyperdriveAddLiquidityContractEvent.factory(
                "AddLiquidity", w3=w3, contract_abi=abi, address=address, event_name="AddLiquidity"
            ),
        )
        self.Approval = cast(
            ERC4626HyperdriveApprovalContractEvent,
            ERC4626HyperdriveApprovalContractEvent.factory(
                "Approval", w3=w3, contract_abi=abi, address=address, event_name="Approval"
            ),
        )
        self.ApprovalForAll = cast(
            ERC4626HyperdriveApprovalForAllContractEvent,
            ERC4626HyperdriveApprovalForAllContractEvent.factory(
                "ApprovalForAll", w3=w3, contract_abi=abi, address=address, event_name="ApprovalForAll"
            ),
        )
        self.CloseLong = cast(
            ERC4626HyperdriveCloseLongContractEvent,
            ERC4626HyperdriveCloseLongContractEvent.factory(
                "CloseLong", w3=w3, contract_abi=abi, address=address, event_name="CloseLong"
            ),
        )
        self.CloseShort = cast(
            ERC4626HyperdriveCloseShortContractEvent,
            ERC4626HyperdriveCloseShortContractEvent.factory(
                "CloseShort", w3=w3, contract_abi=abi, address=address, event_name="CloseShort"
            ),
        )
        self.CollectGovernanceFee = cast(
            ERC4626HyperdriveCollectGovernanceFeeContractEvent,
            ERC4626HyperdriveCollectGovernanceFeeContractEvent.factory(
                "CollectGovernanceFee", w3=w3, contract_abi=abi, address=address, event_name="CollectGovernanceFee"
            ),
        )
        self.CreateCheckpoint = cast(
            ERC4626HyperdriveCreateCheckpointContractEvent,
            ERC4626HyperdriveCreateCheckpointContractEvent.factory(
                "CreateCheckpoint", w3=w3, contract_abi=abi, address=address, event_name="CreateCheckpoint"
            ),
        )
        self.GovernanceUpdated = cast(
            ERC4626HyperdriveGovernanceUpdatedContractEvent,
            ERC4626HyperdriveGovernanceUpdatedContractEvent.factory(
                "GovernanceUpdated", w3=w3, contract_abi=abi, address=address, event_name="GovernanceUpdated"
            ),
        )
        self.Initialize = cast(
            ERC4626HyperdriveInitializeContractEvent,
            ERC4626HyperdriveInitializeContractEvent.factory(
                "Initialize", w3=w3, contract_abi=abi, address=address, event_name="Initialize"
            ),
        )
        self.OpenLong = cast(
            ERC4626HyperdriveOpenLongContractEvent,
            ERC4626HyperdriveOpenLongContractEvent.factory(
                "OpenLong", w3=w3, contract_abi=abi, address=address, event_name="OpenLong"
            ),
        )
        self.OpenShort = cast(
            ERC4626HyperdriveOpenShortContractEvent,
            ERC4626HyperdriveOpenShortContractEvent.factory(
                "OpenShort", w3=w3, contract_abi=abi, address=address, event_name="OpenShort"
            ),
        )
        self.PauseStatusUpdated = cast(
            ERC4626HyperdrivePauseStatusUpdatedContractEvent,
            ERC4626HyperdrivePauseStatusUpdatedContractEvent.factory(
                "PauseStatusUpdated", w3=w3, contract_abi=abi, address=address, event_name="PauseStatusUpdated"
            ),
        )
        self.PauserUpdated = cast(
            ERC4626HyperdrivePauserUpdatedContractEvent,
            ERC4626HyperdrivePauserUpdatedContractEvent.factory(
                "PauserUpdated", w3=w3, contract_abi=abi, address=address, event_name="PauserUpdated"
            ),
        )
        self.RedeemWithdrawalShares = cast(
            ERC4626HyperdriveRedeemWithdrawalSharesContractEvent,
            ERC4626HyperdriveRedeemWithdrawalSharesContractEvent.factory(
                "RedeemWithdrawalShares", w3=w3, contract_abi=abi, address=address, event_name="RedeemWithdrawalShares"
            ),
        )
        self.RemoveLiquidity = cast(
            ERC4626HyperdriveRemoveLiquidityContractEvent,
            ERC4626HyperdriveRemoveLiquidityContractEvent.factory(
                "RemoveLiquidity", w3=w3, contract_abi=abi, address=address, event_name="RemoveLiquidity"
            ),
        )
        self.TransferSingle = cast(
            ERC4626HyperdriveTransferSingleContractEvent,
            ERC4626HyperdriveTransferSingleContractEvent.factory(
                "TransferSingle", w3=w3, contract_abi=abi, address=address, event_name="TransferSingle"
            ),
        )


class ERC4626HyperdriveAddressEmptyCodeContractError:
    """ContractError for AddressEmptyCode."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "ERC4626HyperdriveAddressEmptyCodeContractError",
    ) -> None:
        self.selector = "0x9996b315"
        self.signature = "AddressEmptyCode(address)"

    def decode_error_data(  # type: ignore
        self: "ERC4626HyperdriveAddressEmptyCodeContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in erc4626hyperdrive_abi
                if item.get("name") == "AddressEmptyCode" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["ERC4626HyperdriveAddressEmptyCodeContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in erc4626hyperdrive_abi
                if item.get("name") == "AddressEmptyCode" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class ERC4626HyperdriveAddressInsufficientBalanceContractError:
    """ContractError for AddressInsufficientBalance."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "ERC4626HyperdriveAddressInsufficientBalanceContractError",
    ) -> None:
        self.selector = "0xcd786059"
        self.signature = "AddressInsufficientBalance(address)"

    def decode_error_data(  # type: ignore
        self: "ERC4626HyperdriveAddressInsufficientBalanceContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in erc4626hyperdrive_abi
                if item.get("name") == "AddressInsufficientBalance" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["ERC4626HyperdriveAddressInsufficientBalanceContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in erc4626hyperdrive_abi
                if item.get("name") == "AddressInsufficientBalance" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class ERC4626HyperdriveFailedInnerCallContractError:
    """ContractError for FailedInnerCall."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "ERC4626HyperdriveFailedInnerCallContractError",
    ) -> None:
        self.selector = "0x1425ea42"
        self.signature = "FailedInnerCall()"

    def decode_error_data(  # type: ignore
        self: "ERC4626HyperdriveFailedInnerCallContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in erc4626hyperdrive_abi
                if item.get("name") == "FailedInnerCall" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["ERC4626HyperdriveFailedInnerCallContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in erc4626hyperdrive_abi
                if item.get("name") == "FailedInnerCall" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class ERC4626HyperdriveInvalidBaseTokenContractError:
    """ContractError for InvalidBaseToken."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "ERC4626HyperdriveInvalidBaseTokenContractError",
    ) -> None:
        self.selector = "0x0e442a4a"
        self.signature = "InvalidBaseToken()"

    def decode_error_data(  # type: ignore
        self: "ERC4626HyperdriveInvalidBaseTokenContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in erc4626hyperdrive_abi
                if item.get("name") == "InvalidBaseToken" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["ERC4626HyperdriveInvalidBaseTokenContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in erc4626hyperdrive_abi
                if item.get("name") == "InvalidBaseToken" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class ERC4626HyperdriveReentrancyGuardReentrantCallContractError:
    """ContractError for ReentrancyGuardReentrantCall."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "ERC4626HyperdriveReentrancyGuardReentrantCallContractError",
    ) -> None:
        self.selector = "0x3ee5aeb5"
        self.signature = "ReentrancyGuardReentrantCall()"

    def decode_error_data(  # type: ignore
        self: "ERC4626HyperdriveReentrancyGuardReentrantCallContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in erc4626hyperdrive_abi
                if item.get("name") == "ReentrancyGuardReentrantCall" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["ERC4626HyperdriveReentrancyGuardReentrantCallContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in erc4626hyperdrive_abi
                if item.get("name") == "ReentrancyGuardReentrantCall" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class ERC4626HyperdriveSafeERC20FailedOperationContractError:
    """ContractError for SafeERC20FailedOperation."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "ERC4626HyperdriveSafeERC20FailedOperationContractError",
    ) -> None:
        self.selector = "0x5274afe7"
        self.signature = "SafeERC20FailedOperation(address)"

    def decode_error_data(  # type: ignore
        self: "ERC4626HyperdriveSafeERC20FailedOperationContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in erc4626hyperdrive_abi
                if item.get("name") == "SafeERC20FailedOperation" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["ERC4626HyperdriveSafeERC20FailedOperationContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in erc4626hyperdrive_abi
                if item.get("name") == "SafeERC20FailedOperation" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class ERC4626HyperdriveUnexpectedSuccessContractError:
    """ContractError for UnexpectedSuccess."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "ERC4626HyperdriveUnexpectedSuccessContractError",
    ) -> None:
        self.selector = "0x8bb0a34b"
        self.signature = "UnexpectedSuccess()"

    def decode_error_data(  # type: ignore
        self: "ERC4626HyperdriveUnexpectedSuccessContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in erc4626hyperdrive_abi
                if item.get("name") == "UnexpectedSuccess" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["ERC4626HyperdriveUnexpectedSuccessContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in erc4626hyperdrive_abi
                if item.get("name") == "UnexpectedSuccess" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class ERC4626HyperdriveContractErrors:
    """ContractErrors for the ERC4626Hyperdrive contract."""

    AddressEmptyCode: ERC4626HyperdriveAddressEmptyCodeContractError

    AddressInsufficientBalance: ERC4626HyperdriveAddressInsufficientBalanceContractError

    FailedInnerCall: ERC4626HyperdriveFailedInnerCallContractError

    InvalidBaseToken: ERC4626HyperdriveInvalidBaseTokenContractError

    ReentrancyGuardReentrantCall: ERC4626HyperdriveReentrancyGuardReentrantCallContractError

    SafeERC20FailedOperation: ERC4626HyperdriveSafeERC20FailedOperationContractError

    UnexpectedSuccess: ERC4626HyperdriveUnexpectedSuccessContractError

    def __init__(
        self,
    ) -> None:
        self.AddressEmptyCode = ERC4626HyperdriveAddressEmptyCodeContractError()
        self.AddressInsufficientBalance = ERC4626HyperdriveAddressInsufficientBalanceContractError()
        self.FailedInnerCall = ERC4626HyperdriveFailedInnerCallContractError()
        self.InvalidBaseToken = ERC4626HyperdriveInvalidBaseTokenContractError()
        self.ReentrancyGuardReentrantCall = ERC4626HyperdriveReentrancyGuardReentrantCallContractError()
        self.SafeERC20FailedOperation = ERC4626HyperdriveSafeERC20FailedOperationContractError()
        self.UnexpectedSuccess = ERC4626HyperdriveUnexpectedSuccessContractError()

        self._all = [
            self.AddressEmptyCode,
            self.AddressInsufficientBalance,
            self.FailedInnerCall,
            self.InvalidBaseToken,
            self.ReentrancyGuardReentrantCall,
            self.SafeERC20FailedOperation,
            self.UnexpectedSuccess,
        ]

    def decode_custom_error(self, data: str) -> tuple[Any, ...]:
        """Decodes a custom contract error."""
        selector = data[:10]
        for err in self._all:
            if err.selector == selector:
                return err.decode_error_data(HexBytes(data[10:]))

        raise ValueError(f"ERC4626Hyperdrive does not have a selector matching {selector}")


erc4626hyperdrive_abi: ABI = cast(
    ABI,
    [
        {
            "type": "constructor",
            "inputs": [
                {
                    "name": "_config",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.PoolConfig",
                    "components": [
                        {"name": "baseToken", "type": "address", "internalType": "contract IERC20"},
                        {"name": "linkerFactory", "type": "address", "internalType": "address"},
                        {"name": "linkerCodeHash", "type": "bytes32", "internalType": "bytes32"},
                        {"name": "initialVaultSharePrice", "type": "uint256", "internalType": "uint256"},
                        {"name": "minimumShareReserves", "type": "uint256", "internalType": "uint256"},
                        {"name": "minimumTransactionAmount", "type": "uint256", "internalType": "uint256"},
                        {"name": "positionDuration", "type": "uint256", "internalType": "uint256"},
                        {"name": "checkpointDuration", "type": "uint256", "internalType": "uint256"},
                        {"name": "timeStretch", "type": "uint256", "internalType": "uint256"},
                        {"name": "governance", "type": "address", "internalType": "address"},
                        {"name": "feeCollector", "type": "address", "internalType": "address"},
                        {
                            "name": "fees",
                            "type": "tuple",
                            "internalType": "struct IHyperdrive.Fees",
                            "components": [
                                {"name": "curve", "type": "uint256", "internalType": "uint256"},
                                {"name": "flat", "type": "uint256", "internalType": "uint256"},
                                {"name": "governanceLP", "type": "uint256", "internalType": "uint256"},
                                {"name": "governanceZombie", "type": "uint256", "internalType": "uint256"},
                            ],
                        },
                    ],
                },
                {"name": "_target0", "type": "address", "internalType": "address"},
                {"name": "_target1", "type": "address", "internalType": "address"},
                {"name": "_target2", "type": "address", "internalType": "address"},
                {"name": "_target3", "type": "address", "internalType": "address"},
                {"name": "_target4", "type": "address", "internalType": "address"},
                {"name": "__vault", "type": "address", "internalType": "contract IERC4626"},
            ],
            "stateMutability": "nonpayable",
        },
        {"type": "fallback", "stateMutability": "nonpayable"},
        {
            "type": "function",
            "name": "PERMIT_TYPEHASH",
            "inputs": [],
            "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "addLiquidity",
            "inputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"},
                {"name": "", "type": "uint256", "internalType": "uint256"},
                {"name": "", "type": "uint256", "internalType": "uint256"},
                {"name": "", "type": "uint256", "internalType": "uint256"},
                {
                    "name": "",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.Options",
                    "components": [
                        {"name": "destination", "type": "address", "internalType": "address"},
                        {"name": "asBase", "type": "bool", "internalType": "bool"},
                        {"name": "extraData", "type": "bytes", "internalType": "bytes"},
                    ],
                },
            ],
            "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}],
            "stateMutability": "payable",
        },
        {
            "type": "function",
            "name": "batchTransferFrom",
            "inputs": [
                {"name": "", "type": "address", "internalType": "address"},
                {"name": "", "type": "address", "internalType": "address"},
                {"name": "", "type": "uint256[]", "internalType": "uint256[]"},
                {"name": "", "type": "uint256[]", "internalType": "uint256[]"},
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "checkpoint",
            "inputs": [{"name": "", "type": "uint256", "internalType": "uint256"}],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "closeLong",
            "inputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"},
                {"name": "", "type": "uint256", "internalType": "uint256"},
                {"name": "", "type": "uint256", "internalType": "uint256"},
                {
                    "name": "",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.Options",
                    "components": [
                        {"name": "destination", "type": "address", "internalType": "address"},
                        {"name": "asBase", "type": "bool", "internalType": "bool"},
                        {"name": "extraData", "type": "bytes", "internalType": "bytes"},
                    ],
                },
            ],
            "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "closeShort",
            "inputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"},
                {"name": "", "type": "uint256", "internalType": "uint256"},
                {"name": "", "type": "uint256", "internalType": "uint256"},
                {
                    "name": "",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.Options",
                    "components": [
                        {"name": "destination", "type": "address", "internalType": "address"},
                        {"name": "asBase", "type": "bool", "internalType": "bool"},
                        {"name": "extraData", "type": "bytes", "internalType": "bytes"},
                    ],
                },
            ],
            "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "collectGovernanceFee",
            "inputs": [
                {
                    "name": "",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.Options",
                    "components": [
                        {"name": "destination", "type": "address", "internalType": "address"},
                        {"name": "asBase", "type": "bool", "internalType": "bool"},
                        {"name": "extraData", "type": "bytes", "internalType": "bytes"},
                    ],
                }
            ],
            "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "domainSeparator",
            "inputs": [],
            "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "initialize",
            "inputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"},
                {"name": "", "type": "uint256", "internalType": "uint256"},
                {
                    "name": "",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.Options",
                    "components": [
                        {"name": "destination", "type": "address", "internalType": "address"},
                        {"name": "asBase", "type": "bool", "internalType": "bool"},
                        {"name": "extraData", "type": "bytes", "internalType": "bytes"},
                    ],
                },
            ],
            "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}],
            "stateMutability": "payable",
        },
        {
            "type": "function",
            "name": "openLong",
            "inputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"},
                {"name": "", "type": "uint256", "internalType": "uint256"},
                {"name": "", "type": "uint256", "internalType": "uint256"},
                {
                    "name": "",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.Options",
                    "components": [
                        {"name": "destination", "type": "address", "internalType": "address"},
                        {"name": "asBase", "type": "bool", "internalType": "bool"},
                        {"name": "extraData", "type": "bytes", "internalType": "bytes"},
                    ],
                },
            ],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"},
                {"name": "", "type": "uint256", "internalType": "uint256"},
            ],
            "stateMutability": "payable",
        },
        {
            "type": "function",
            "name": "openShort",
            "inputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"},
                {"name": "", "type": "uint256", "internalType": "uint256"},
                {"name": "", "type": "uint256", "internalType": "uint256"},
                {
                    "name": "",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.Options",
                    "components": [
                        {"name": "destination", "type": "address", "internalType": "address"},
                        {"name": "asBase", "type": "bool", "internalType": "bool"},
                        {"name": "extraData", "type": "bytes", "internalType": "bytes"},
                    ],
                },
            ],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"},
                {"name": "", "type": "uint256", "internalType": "uint256"},
            ],
            "stateMutability": "payable",
        },
        {
            "type": "function",
            "name": "pause",
            "inputs": [{"name": "", "type": "bool", "internalType": "bool"}],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "permitForAll",
            "inputs": [
                {"name": "owner", "type": "address", "internalType": "address"},
                {"name": "spender", "type": "address", "internalType": "address"},
                {"name": "_approved", "type": "bool", "internalType": "bool"},
                {"name": "deadline", "type": "uint256", "internalType": "uint256"},
                {"name": "v", "type": "uint8", "internalType": "uint8"},
                {"name": "r", "type": "bytes32", "internalType": "bytes32"},
                {"name": "s", "type": "bytes32", "internalType": "bytes32"},
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "redeemWithdrawalShares",
            "inputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"},
                {"name": "", "type": "uint256", "internalType": "uint256"},
                {
                    "name": "",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.Options",
                    "components": [
                        {"name": "destination", "type": "address", "internalType": "address"},
                        {"name": "asBase", "type": "bool", "internalType": "bool"},
                        {"name": "extraData", "type": "bytes", "internalType": "bytes"},
                    ],
                },
            ],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"},
                {"name": "", "type": "uint256", "internalType": "uint256"},
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "removeLiquidity",
            "inputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"},
                {"name": "", "type": "uint256", "internalType": "uint256"},
                {
                    "name": "",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.Options",
                    "components": [
                        {"name": "destination", "type": "address", "internalType": "address"},
                        {"name": "asBase", "type": "bool", "internalType": "bool"},
                        {"name": "extraData", "type": "bytes", "internalType": "bytes"},
                    ],
                },
            ],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"},
                {"name": "", "type": "uint256", "internalType": "uint256"},
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "setApproval",
            "inputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"},
                {"name": "", "type": "address", "internalType": "address"},
                {"name": "", "type": "uint256", "internalType": "uint256"},
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "setApprovalBridge",
            "inputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"},
                {"name": "", "type": "address", "internalType": "address"},
                {"name": "", "type": "uint256", "internalType": "uint256"},
                {"name": "", "type": "address", "internalType": "address"},
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "setApprovalForAll",
            "inputs": [
                {"name": "", "type": "address", "internalType": "address"},
                {"name": "", "type": "bool", "internalType": "bool"},
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "setGovernance",
            "inputs": [{"name": "", "type": "address", "internalType": "address"}],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "setPauser",
            "inputs": [
                {"name": "", "type": "address", "internalType": "address"},
                {"name": "", "type": "bool", "internalType": "bool"},
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "sweep",
            "inputs": [{"name": "", "type": "address", "internalType": "contract IERC20"}],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "target0",
            "inputs": [],
            "outputs": [{"name": "", "type": "address", "internalType": "address"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "target1",
            "inputs": [],
            "outputs": [{"name": "", "type": "address", "internalType": "address"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "target2",
            "inputs": [],
            "outputs": [{"name": "", "type": "address", "internalType": "address"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "target3",
            "inputs": [],
            "outputs": [{"name": "", "type": "address", "internalType": "address"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "target4",
            "inputs": [],
            "outputs": [{"name": "", "type": "address", "internalType": "address"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "transferFrom",
            "inputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"},
                {"name": "", "type": "address", "internalType": "address"},
                {"name": "", "type": "address", "internalType": "address"},
                {"name": "", "type": "uint256", "internalType": "uint256"},
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "transferFromBridge",
            "inputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"},
                {"name": "", "type": "address", "internalType": "address"},
                {"name": "", "type": "address", "internalType": "address"},
                {"name": "", "type": "uint256", "internalType": "uint256"},
                {"name": "", "type": "address", "internalType": "address"},
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "event",
            "name": "AddLiquidity",
            "inputs": [
                {"name": "provider", "type": "address", "indexed": True, "internalType": "address"},
                {"name": "lpAmount", "type": "uint256", "indexed": False, "internalType": "uint256"},
                {"name": "baseAmount", "type": "uint256", "indexed": False, "internalType": "uint256"},
                {"name": "vaultShareAmount", "type": "uint256", "indexed": False, "internalType": "uint256"},
                {"name": "asBase", "type": "bool", "indexed": False, "internalType": "bool"},
                {"name": "lpSharePrice", "type": "uint256", "indexed": False, "internalType": "uint256"},
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "Approval",
            "inputs": [
                {"name": "owner", "type": "address", "indexed": True, "internalType": "address"},
                {"name": "spender", "type": "address", "indexed": True, "internalType": "address"},
                {"name": "value", "type": "uint256", "indexed": False, "internalType": "uint256"},
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "ApprovalForAll",
            "inputs": [
                {"name": "account", "type": "address", "indexed": True, "internalType": "address"},
                {"name": "operator", "type": "address", "indexed": True, "internalType": "address"},
                {"name": "approved", "type": "bool", "indexed": False, "internalType": "bool"},
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "CloseLong",
            "inputs": [
                {"name": "trader", "type": "address", "indexed": True, "internalType": "address"},
                {"name": "assetId", "type": "uint256", "indexed": True, "internalType": "uint256"},
                {"name": "maturityTime", "type": "uint256", "indexed": False, "internalType": "uint256"},
                {"name": "baseAmount", "type": "uint256", "indexed": False, "internalType": "uint256"},
                {"name": "vaultShareAmount", "type": "uint256", "indexed": False, "internalType": "uint256"},
                {"name": "asBase", "type": "bool", "indexed": False, "internalType": "bool"},
                {"name": "bondAmount", "type": "uint256", "indexed": False, "internalType": "uint256"},
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "CloseShort",
            "inputs": [
                {"name": "trader", "type": "address", "indexed": True, "internalType": "address"},
                {"name": "assetId", "type": "uint256", "indexed": True, "internalType": "uint256"},
                {"name": "maturityTime", "type": "uint256", "indexed": False, "internalType": "uint256"},
                {"name": "baseAmount", "type": "uint256", "indexed": False, "internalType": "uint256"},
                {"name": "vaultShareAmount", "type": "uint256", "indexed": False, "internalType": "uint256"},
                {"name": "asBase", "type": "bool", "indexed": False, "internalType": "bool"},
                {"name": "bondAmount", "type": "uint256", "indexed": False, "internalType": "uint256"},
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "CollectGovernanceFee",
            "inputs": [
                {"name": "collector", "type": "address", "indexed": True, "internalType": "address"},
                {"name": "fees", "type": "uint256", "indexed": False, "internalType": "uint256"},
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "CreateCheckpoint",
            "inputs": [
                {"name": "checkpointTime", "type": "uint256", "indexed": True, "internalType": "uint256"},
                {"name": "vaultSharePrice", "type": "uint256", "indexed": False, "internalType": "uint256"},
                {"name": "maturedShorts", "type": "uint256", "indexed": False, "internalType": "uint256"},
                {"name": "maturedLongs", "type": "uint256", "indexed": False, "internalType": "uint256"},
                {"name": "lpSharePrice", "type": "uint256", "indexed": False, "internalType": "uint256"},
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "GovernanceUpdated",
            "inputs": [{"name": "newGovernance", "type": "address", "indexed": True, "internalType": "address"}],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "Initialize",
            "inputs": [
                {"name": "provider", "type": "address", "indexed": True, "internalType": "address"},
                {"name": "lpAmount", "type": "uint256", "indexed": False, "internalType": "uint256"},
                {"name": "baseAmount", "type": "uint256", "indexed": False, "internalType": "uint256"},
                {"name": "vaultShareAmount", "type": "uint256", "indexed": False, "internalType": "uint256"},
                {"name": "asBase", "type": "bool", "indexed": False, "internalType": "bool"},
                {"name": "apr", "type": "uint256", "indexed": False, "internalType": "uint256"},
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "OpenLong",
            "inputs": [
                {"name": "trader", "type": "address", "indexed": True, "internalType": "address"},
                {"name": "assetId", "type": "uint256", "indexed": True, "internalType": "uint256"},
                {"name": "maturityTime", "type": "uint256", "indexed": False, "internalType": "uint256"},
                {"name": "baseAmount", "type": "uint256", "indexed": False, "internalType": "uint256"},
                {"name": "vaultShareAmount", "type": "uint256", "indexed": False, "internalType": "uint256"},
                {"name": "asBase", "type": "bool", "indexed": False, "internalType": "bool"},
                {"name": "bondAmount", "type": "uint256", "indexed": False, "internalType": "uint256"},
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "OpenShort",
            "inputs": [
                {"name": "trader", "type": "address", "indexed": True, "internalType": "address"},
                {"name": "assetId", "type": "uint256", "indexed": True, "internalType": "uint256"},
                {"name": "maturityTime", "type": "uint256", "indexed": False, "internalType": "uint256"},
                {"name": "baseAmount", "type": "uint256", "indexed": False, "internalType": "uint256"},
                {"name": "vaultShareAmount", "type": "uint256", "indexed": False, "internalType": "uint256"},
                {"name": "asBase", "type": "bool", "indexed": False, "internalType": "bool"},
                {"name": "baseProceeds", "type": "uint256", "indexed": False, "internalType": "uint256"},
                {"name": "bondAmount", "type": "uint256", "indexed": False, "internalType": "uint256"},
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "PauseStatusUpdated",
            "inputs": [{"name": "isPaused", "type": "bool", "indexed": False, "internalType": "bool"}],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "PauserUpdated",
            "inputs": [
                {"name": "newPauser", "type": "address", "indexed": True, "internalType": "address"},
                {"name": "status", "type": "bool", "indexed": False, "internalType": "bool"},
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "RedeemWithdrawalShares",
            "inputs": [
                {"name": "provider", "type": "address", "indexed": True, "internalType": "address"},
                {"name": "withdrawalShareAmount", "type": "uint256", "indexed": False, "internalType": "uint256"},
                {"name": "baseAmount", "type": "uint256", "indexed": False, "internalType": "uint256"},
                {"name": "vaultShareAmount", "type": "uint256", "indexed": False, "internalType": "uint256"},
                {"name": "asBase", "type": "bool", "indexed": False, "internalType": "bool"},
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "RemoveLiquidity",
            "inputs": [
                {"name": "provider", "type": "address", "indexed": True, "internalType": "address"},
                {"name": "lpAmount", "type": "uint256", "indexed": False, "internalType": "uint256"},
                {"name": "baseAmount", "type": "uint256", "indexed": False, "internalType": "uint256"},
                {"name": "vaultShareAmount", "type": "uint256", "indexed": False, "internalType": "uint256"},
                {"name": "asBase", "type": "bool", "indexed": False, "internalType": "bool"},
                {"name": "withdrawalShareAmount", "type": "uint256", "indexed": False, "internalType": "uint256"},
                {"name": "lpSharePrice", "type": "uint256", "indexed": False, "internalType": "uint256"},
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "TransferSingle",
            "inputs": [
                {"name": "operator", "type": "address", "indexed": True, "internalType": "address"},
                {"name": "from", "type": "address", "indexed": True, "internalType": "address"},
                {"name": "to", "type": "address", "indexed": True, "internalType": "address"},
                {"name": "id", "type": "uint256", "indexed": False, "internalType": "uint256"},
                {"name": "value", "type": "uint256", "indexed": False, "internalType": "uint256"},
            ],
            "anonymous": False,
        },
        {
            "type": "error",
            "name": "AddressEmptyCode",
            "inputs": [{"name": "target", "type": "address", "internalType": "address"}],
        },
        {
            "type": "error",
            "name": "AddressInsufficientBalance",
            "inputs": [{"name": "account", "type": "address", "internalType": "address"}],
        },
        {"type": "error", "name": "FailedInnerCall", "inputs": []},
        {"type": "error", "name": "InvalidBaseToken", "inputs": []},
        {"type": "error", "name": "ReentrancyGuardReentrantCall", "inputs": []},
        {
            "type": "error",
            "name": "SafeERC20FailedOperation",
            "inputs": [{"name": "token", "type": "address", "internalType": "address"}],
        },
        {"type": "error", "name": "UnexpectedSuccess", "inputs": []},
    ],
)
# pylint: disable=line-too-long
erc4626hyperdrive_bytecode = HexStr(
    ""
)


class ERC4626HyperdriveContract(Contract):
    """A web3.py Contract class for the ERC4626Hyperdrive contract."""

    abi: ABI = erc4626hyperdrive_abi
    bytecode: bytes = HexBytes(erc4626hyperdrive_bytecode)

    def __init__(self, address: ChecksumAddress | None = None) -> None:
        try:
            # Initialize parent Contract class
            super().__init__(address=address)
            self.functions = ERC4626HyperdriveContractFunctions(erc4626hyperdrive_abi, self.w3, address)  # type: ignore
            self.events = ERC4626HyperdriveContractEvents(erc4626hyperdrive_abi, self.w3, address)  # type: ignore
            self.errors = ERC4626HyperdriveContractErrors()

        except FallbackNotFound:
            print("Fallback function not found. Continuing...")

    events: ERC4626HyperdriveContractEvents

    errors: ERC4626HyperdriveContractErrors = ERC4626HyperdriveContractErrors()

    functions: ERC4626HyperdriveContractFunctions

    class ConstructorArgs(NamedTuple):
        """Arguments to pass the contract's constructor function."""

        config: PoolConfig

        target0: str

        target1: str

        target2: str

        target3: str

        target4: str

        vault: str

    @classmethod
    def constructor(cls, config: PoolConfig, target0: str, target1: str, target2: str, target3: str, target4: str, vault: str) -> ContractConstructor:  # type: ignore
        """Creates a transaction with the contract's constructor function.

        Parameters
        ----------

        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.

        """

        return super().constructor(
            dataclass_to_tuple(config),
            dataclass_to_tuple(target0),
            dataclass_to_tuple(target1),
            dataclass_to_tuple(target2),
            dataclass_to_tuple(target3),
            dataclass_to_tuple(target4),
            dataclass_to_tuple(vault),
        )

    @classmethod
    def deploy(cls, w3: Web3, account: LocalAccount | ChecksumAddress, constructorArgs: ConstructorArgs) -> Self:
        """Deploys and instance of the contract.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.
        """
        deployer = cls.factory(w3=w3)
        constructor_fn = deployer.constructor(*constructorArgs)

        # if an address is supplied, try to use a web3 default account
        if isinstance(account, str):
            tx_hash = constructor_fn.transact({"from": account})
            tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

            deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
            return deployed_contract

        # otherwise use the account provided.
        deployment_tx = constructor_fn.build_transaction()
        current_nonce = w3.eth.get_transaction_count(account.address)
        deployment_tx.update({"nonce": current_nonce})

        # Sign the transaction with local account private key
        signed_tx = account.sign_transaction(deployment_tx)

        # Send the signed transaction and wait for receipt
        tx_hash = w3.eth.send_raw_transaction(signed_tx.rawTransaction)
        tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

        deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
        return deployed_contract

    @classmethod
    def factory(cls, w3: Web3, class_name: str | None = None, **kwargs: Any) -> Type[Self]:
        """Deploys and instance of the contract.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        class_name: str | None
            The instance class name.

        Returns
        -------
        Self
            A deployed instance of the contract.
        """
        contract = super().factory(w3, class_name, **kwargs)
        contract.functions = ERC4626HyperdriveContractFunctions(erc4626hyperdrive_abi, w3, None)
        contract.errors = ERC4626HyperdriveContractErrors()

        return contract
