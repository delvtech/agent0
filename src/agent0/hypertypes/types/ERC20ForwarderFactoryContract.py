"""A web3.py Contract class for the ERC20ForwarderFactory contract.

DO NOT EDIT.  This file was generated by pypechain.  See documentation at
https://github.com/delvtech/pypechain"""

# contracts have PascalCase names
# pylint: disable=invalid-name

# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments

# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return

# This file is bound to get very long depending on contract sizes.
# pylint: disable=too-many-lines

# methods are overriden with specific arguments instead of generic *args, **kwargs
# pylint: disable=arguments-differ

# consumers have too many opinions on line length
# pylint: disable=line-too-long


from __future__ import annotations

from typing import Any, NamedTuple, Type, cast

from eth_abi.codec import ABICodec
from eth_abi.registry import registry as default_registry
from eth_account.signers.local import LocalAccount
from eth_typing import ChecksumAddress, HexStr
from hexbytes import HexBytes
from typing_extensions import Self
from web3 import Web3
from web3.contract.contract import Contract, ContractConstructor, ContractFunction, ContractFunctions
from web3.exceptions import FallbackNotFound
from web3.types import ABI, ABIFunction, BlockIdentifier, CallOverride, TxParams

from .utilities import dataclass_to_tuple, get_abi_input_types, rename_returned_types

structs = {}


class ERC20ForwarderFactoryERC20LINK_HASHContractFunction(ContractFunction):
    """ContractFunction for the ERC20LINK_HASH method."""

    def __call__(self) -> ERC20ForwarderFactoryERC20LINK_HASHContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bytes:
        """returns bytes."""
        # Define the expected return types from the smart contract call

        return_types = bytes

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(bytes, rename_returned_types(structs, return_types, raw_values))


class ERC20ForwarderFactoryCreateContractFunction(ContractFunction):
    """ContractFunction for the create method."""

    def __call__(self, token: str, tokenId: int) -> ERC20ForwarderFactoryCreateContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(token), dataclass_to_tuple(tokenId))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(str, rename_returned_types(structs, return_types, raw_values))


class ERC20ForwarderFactoryGetDeployDetailsContractFunction(ContractFunction):
    """ContractFunction for the getDeployDetails method."""

    class ReturnValues(NamedTuple):
        """The return named tuple for GetDeployDetails."""

        arg1: str
        arg2: int

    def __call__(self) -> ERC20ForwarderFactoryGetDeployDetailsContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> ReturnValues:
        """returns ReturnValues."""
        # Define the expected return types from the smart contract call

        return_types = [str, int]

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return self.ReturnValues(*rename_returned_types(structs, return_types, raw_values))


class ERC20ForwarderFactoryGetForwarderContractFunction(ContractFunction):
    """ContractFunction for the getForwarder method."""

    def __call__(self, token: str, tokenId: int) -> ERC20ForwarderFactoryGetForwarderContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(token), dataclass_to_tuple(tokenId))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(str, rename_returned_types(structs, return_types, raw_values))


class ERC20ForwarderFactoryContractFunctions(ContractFunctions):
    """ContractFunctions for the ERC20ForwarderFactory contract."""

    ERC20LINK_HASH: ERC20ForwarderFactoryERC20LINK_HASHContractFunction

    create: ERC20ForwarderFactoryCreateContractFunction

    getDeployDetails: ERC20ForwarderFactoryGetDeployDetailsContractFunction

    getForwarder: ERC20ForwarderFactoryGetForwarderContractFunction

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
        decode_tuples: bool | None = False,
    ) -> None:
        super().__init__(abi, w3, address, decode_tuples)
        self.ERC20LINK_HASH = ERC20ForwarderFactoryERC20LINK_HASHContractFunction.factory(
            "ERC20LINK_HASH",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="ERC20LINK_HASH",
        )
        self.create = ERC20ForwarderFactoryCreateContractFunction.factory(
            "create",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="create",
        )
        self.getDeployDetails = ERC20ForwarderFactoryGetDeployDetailsContractFunction.factory(
            "getDeployDetails",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="getDeployDetails",
        )
        self.getForwarder = ERC20ForwarderFactoryGetForwarderContractFunction.factory(
            "getForwarder",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="getForwarder",
        )


class ERC20ForwarderFactoryInvalidForwarderAddressContractError:
    """ContractError for InvalidForwarderAddress."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "ERC20ForwarderFactoryInvalidForwarderAddressContractError",
    ) -> None:
        self.selector = "0x381dd540"
        self.signature = "InvalidForwarderAddress()"

    def decode_error_data(  # type: ignore
        self: "ERC20ForwarderFactoryInvalidForwarderAddressContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in erc20forwarderfactory_abi
                if item.get("name") == "InvalidForwarderAddress" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["ERC20ForwarderFactoryInvalidForwarderAddressContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in erc20forwarderfactory_abi
                if item.get("name") == "InvalidForwarderAddress" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class ERC20ForwarderFactoryContractErrors:
    """ContractErrors for the ERC20ForwarderFactory contract."""

    InvalidForwarderAddress: ERC20ForwarderFactoryInvalidForwarderAddressContractError

    def __init__(
        self,
    ) -> None:
        self.InvalidForwarderAddress = ERC20ForwarderFactoryInvalidForwarderAddressContractError()

        self._all = [
            self.InvalidForwarderAddress,
        ]

    def decode_custom_error(self, data: str) -> tuple[Any, ...]:
        """Decodes a custom contract error."""
        selector = data[:10]
        for err in self._all:
            if err.selector == selector:
                return err.decode_error_data(HexBytes(data[10:]))

        raise ValueError(f"ERC20ForwarderFactory does not have a selector matching {selector}")


erc20forwarderfactory_abi: ABI = cast(
    ABI,
    [
        {
            "type": "function",
            "name": "ERC20LINK_HASH",
            "inputs": [],
            "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "create",
            "inputs": [
                {"name": "__token", "type": "address", "internalType": "contract IMultiToken"},
                {"name": "__tokenId", "type": "uint256", "internalType": "uint256"},
            ],
            "outputs": [{"name": "", "type": "address", "internalType": "contract IERC20Forwarder"}],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "getDeployDetails",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "address", "internalType": "contract IMultiToken"},
                {"name": "", "type": "uint256", "internalType": "uint256"},
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getForwarder",
            "inputs": [
                {"name": "__token", "type": "address", "internalType": "contract IMultiToken"},
                {"name": "__tokenId", "type": "uint256", "internalType": "uint256"},
            ],
            "outputs": [{"name": "", "type": "address", "internalType": "address"}],
            "stateMutability": "view",
        },
        {"type": "error", "name": "InvalidForwarderAddress", "inputs": []},
    ],
)
# pylint: disable=line-too-long
erc20forwarderfactory_bytecode = HexStr(
    ""
)


class ERC20ForwarderFactoryContract(Contract):
    """A web3.py Contract class for the ERC20ForwarderFactory contract."""

    abi: ABI = erc20forwarderfactory_abi
    bytecode: bytes = HexBytes(erc20forwarderfactory_bytecode)

    def __init__(self, address: ChecksumAddress | None = None) -> None:
        try:
            # Initialize parent Contract class
            super().__init__(address=address)
            self.functions = ERC20ForwarderFactoryContractFunctions(erc20forwarderfactory_abi, self.w3, address)  # type: ignore

            self.errors = ERC20ForwarderFactoryContractErrors()

        except FallbackNotFound:
            print("Fallback function not found. Continuing...")

    errors: ERC20ForwarderFactoryContractErrors = ERC20ForwarderFactoryContractErrors()

    functions: ERC20ForwarderFactoryContractFunctions

    @classmethod
    def constructor(cls) -> ContractConstructor:  # type: ignore
        """Creates a transaction with the contract's constructor function.

        Parameters
        ----------

        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.

        """

        return super().constructor()

    @classmethod
    def deploy(cls, w3: Web3, account: LocalAccount | ChecksumAddress) -> Self:
        """Deploys and instance of the contract.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.
        """
        deployer = cls.factory(w3=w3)
        constructor_fn = deployer.constructor()

        # if an address is supplied, try to use a web3 default account
        if isinstance(account, str):
            tx_hash = constructor_fn.transact({"from": account})
            tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

            deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
            return deployed_contract

        # otherwise use the account provided.
        deployment_tx = constructor_fn.build_transaction()
        current_nonce = w3.eth.get_transaction_count(account.address)
        deployment_tx.update({"nonce": current_nonce})

        # Sign the transaction with local account private key
        signed_tx = account.sign_transaction(deployment_tx)

        # Send the signed transaction and wait for receipt
        tx_hash = w3.eth.send_raw_transaction(signed_tx.rawTransaction)
        tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

        deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
        return deployed_contract

    @classmethod
    def factory(cls, w3: Web3, class_name: str | None = None, **kwargs: Any) -> Type[Self]:
        """Deploys and instance of the contract.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        class_name: str | None
            The instance class name.

        Returns
        -------
        Self
            A deployed instance of the contract.
        """
        contract = super().factory(w3, class_name, **kwargs)
        contract.functions = ERC20ForwarderFactoryContractFunctions(erc20forwarderfactory_abi, w3, None)
        contract.errors = ERC20ForwarderFactoryContractErrors()

        return contract
