"""A web3.py Contract class for the LPMath contract.

DO NOT EDIT.  This file was generated by pypechain.  See documentation at
https://github.com/delvtech/pypechain"""

# contracts have PascalCase names
# pylint: disable=invalid-name

# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments

# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return

# This file is bound to get very long depending on contract sizes.
# pylint: disable=too-many-lines

# methods are overriden with specific arguments instead of generic *args, **kwargs
# pylint: disable=arguments-differ

# consumers have too many opinions on line length
# pylint: disable=line-too-long


from __future__ import annotations

from typing import Any, NamedTuple, Type, cast

from eth_abi.codec import ABICodec
from eth_abi.registry import registry as default_registry
from eth_account.signers.local import LocalAccount
from eth_typing import ChecksumAddress, HexStr
from hexbytes import HexBytes
from typing_extensions import Self
from web3 import Web3
from web3.contract.contract import Contract, ContractConstructor, ContractFunction, ContractFunctions
from web3.exceptions import FallbackNotFound
from web3.types import ABI, ABIFunction, BlockIdentifier, CallOverride, TxParams

from .LPMathTypes import DistributeExcessIdleParams, PresentValueParams
from .utilities import dataclass_to_tuple, get_abi_input_types, rename_returned_types, try_bytecode_hexbytes

structs = {
    "PresentValueParams": PresentValueParams,
    "DistributeExcessIdleParams": DistributeExcessIdleParams,
}


class LPMathCalculateDistributeExcessIdleContractFunction(ContractFunction):
    """ContractFunction for the calculateDistributeExcessIdle method."""

    class ReturnValues(NamedTuple):
        """The return named tuple for CalculateDistributeExcessIdle."""

        arg1: int
        arg2: int

    def __call__(self, params: DistributeExcessIdleParams, maxIterations: int) -> LPMathCalculateDistributeExcessIdleContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(params), dataclass_to_tuple(maxIterations))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> ReturnValues:
        """returns ReturnValues."""
        # Define the expected return types from the smart contract call

        return_types = [int, int]

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return self.ReturnValues(*rename_returned_types(structs, return_types, raw_values))


class LPMathCalculateInitialReservesContractFunction(ContractFunction):
    """ContractFunction for the calculateInitialReserves method."""

    class ReturnValues(NamedTuple):
        """The return named tuple for CalculateInitialReserves."""

        shareReserves: int
        shareAdjustment: int
        bondReserves: int

    def __call__(self, shareAmount: int, vaultSharePrice: int, initialVaultSharePrice: int, targetApr: int, positionDuration: int, timeStretch: int) -> LPMathCalculateInitialReservesContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(shareAmount),
            dataclass_to_tuple(vaultSharePrice),
            dataclass_to_tuple(initialVaultSharePrice),
            dataclass_to_tuple(targetApr),
            dataclass_to_tuple(positionDuration),
            dataclass_to_tuple(timeStretch),
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> ReturnValues:
        """returns ReturnValues."""
        # Define the expected return types from the smart contract call

        return_types = [int, int, int]

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return self.ReturnValues(*rename_returned_types(structs, return_types, raw_values))


class LPMathCalculatePresentValueContractFunction(ContractFunction):
    """ContractFunction for the calculatePresentValue method."""

    def __call__(self, params: PresentValueParams) -> LPMathCalculatePresentValueContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(params))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(int, rename_returned_types(structs, return_types, raw_values))


class LPMathCalculatePresentValueSafeContractFunction(ContractFunction):
    """ContractFunction for the calculatePresentValueSafe method."""

    class ReturnValues(NamedTuple):
        """The return named tuple for CalculatePresentValueSafe."""

        arg1: int
        arg2: bool

    def __call__(self, params: PresentValueParams) -> LPMathCalculatePresentValueSafeContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(params))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> ReturnValues:
        """returns ReturnValues."""
        # Define the expected return types from the smart contract call

        return_types = [int, bool]

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return self.ReturnValues(*rename_returned_types(structs, return_types, raw_values))


class LPMathCalculateUpdateLiquiditySafeContractFunction(ContractFunction):
    """ContractFunction for the calculateUpdateLiquiditySafe method."""

    class ReturnValues(NamedTuple):
        """The return named tuple for CalculateUpdateLiquiditySafe."""

        shareReserves: int
        shareAdjustment: int
        bondReserves: int
        arg4: bool

    def __call__(self, shareReserves: int, shareAdjustment: int, bondReserves: int, minimumShareReserves: int, shareReservesDelta: int) -> LPMathCalculateUpdateLiquiditySafeContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(shareReserves),
            dataclass_to_tuple(shareAdjustment),
            dataclass_to_tuple(bondReserves),
            dataclass_to_tuple(minimumShareReserves),
            dataclass_to_tuple(shareReservesDelta),
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> ReturnValues:
        """returns ReturnValues."""
        # Define the expected return types from the smart contract call

        return_types = [int, int, int, bool]

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return self.ReturnValues(*rename_returned_types(structs, return_types, raw_values))


class LPMathContractFunctions(ContractFunctions):
    """ContractFunctions for the LPMath contract."""

    calculateDistributeExcessIdle: LPMathCalculateDistributeExcessIdleContractFunction

    calculateInitialReserves: LPMathCalculateInitialReservesContractFunction

    calculatePresentValue: LPMathCalculatePresentValueContractFunction

    calculatePresentValueSafe: LPMathCalculatePresentValueSafeContractFunction

    calculateUpdateLiquiditySafe: LPMathCalculateUpdateLiquiditySafeContractFunction

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
        decode_tuples: bool | None = False,
    ) -> None:
        super().__init__(abi, w3, address, decode_tuples)
        self.calculateDistributeExcessIdle = LPMathCalculateDistributeExcessIdleContractFunction.factory(
            "calculateDistributeExcessIdle",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="calculateDistributeExcessIdle",
        )
        self.calculateInitialReserves = LPMathCalculateInitialReservesContractFunction.factory(
            "calculateInitialReserves",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="calculateInitialReserves",
        )
        self.calculatePresentValue = LPMathCalculatePresentValueContractFunction.factory(
            "calculatePresentValue",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="calculatePresentValue",
        )
        self.calculatePresentValueSafe = LPMathCalculatePresentValueSafeContractFunction.factory(
            "calculatePresentValueSafe",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="calculatePresentValueSafe",
        )
        self.calculateUpdateLiquiditySafe = LPMathCalculateUpdateLiquiditySafeContractFunction.factory(
            "calculateUpdateLiquiditySafe",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="calculateUpdateLiquiditySafe",
        )


class LPMathExpInvalidExponentContractError:
    """ContractError for ExpInvalidExponent."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "LPMathExpInvalidExponentContractError",
    ) -> None:
        self.selector = "0x73a2d6b1"
        self.signature = "ExpInvalidExponent()"

    def decode_error_data(  # type: ignore
        self: "LPMathExpInvalidExponentContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [item for item in lpmath_abi if item.get("name") == "ExpInvalidExponent" and item.get("type") == "error"][
                0
            ],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["LPMathExpInvalidExponentContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [item for item in lpmath_abi if item.get("name") == "ExpInvalidExponent" and item.get("type") == "error"][
                0
            ],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class LPMathInvalidPresentValueContractError:
    """ContractError for InvalidPresentValue."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "LPMathInvalidPresentValueContractError",
    ) -> None:
        self.selector = "0xaa2c6516"
        self.signature = "InvalidPresentValue()"

    def decode_error_data(  # type: ignore
        self: "LPMathInvalidPresentValueContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [item for item in lpmath_abi if item.get("name") == "InvalidPresentValue" and item.get("type") == "error"][
                0
            ],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["LPMathInvalidPresentValueContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [item for item in lpmath_abi if item.get("name") == "InvalidPresentValue" and item.get("type") == "error"][
                0
            ],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class LPMathLnInvalidInputContractError:
    """ContractError for LnInvalidInput."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "LPMathLnInvalidInputContractError",
    ) -> None:
        self.selector = "0xe61b4975"
        self.signature = "LnInvalidInput()"

    def decode_error_data(  # type: ignore
        self: "LPMathLnInvalidInputContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [item for item in lpmath_abi if item.get("name") == "LnInvalidInput" and item.get("type") == "error"][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["LPMathLnInvalidInputContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [item for item in lpmath_abi if item.get("name") == "LnInvalidInput" and item.get("type") == "error"][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class LPMathUnsafeCastToInt256ContractError:
    """ContractError for UnsafeCastToInt256."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "LPMathUnsafeCastToInt256ContractError",
    ) -> None:
        self.selector = "0x72dd4e02"
        self.signature = "UnsafeCastToInt256()"

    def decode_error_data(  # type: ignore
        self: "LPMathUnsafeCastToInt256ContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [item for item in lpmath_abi if item.get("name") == "UnsafeCastToInt256" and item.get("type") == "error"][
                0
            ],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["LPMathUnsafeCastToInt256ContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [item for item in lpmath_abi if item.get("name") == "UnsafeCastToInt256" and item.get("type") == "error"][
                0
            ],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class LPMathContractErrors:
    """ContractErrors for the LPMath contract."""

    ExpInvalidExponent: LPMathExpInvalidExponentContractError

    InvalidPresentValue: LPMathInvalidPresentValueContractError

    LnInvalidInput: LPMathLnInvalidInputContractError

    UnsafeCastToInt256: LPMathUnsafeCastToInt256ContractError

    def __init__(
        self,
    ) -> None:
        self.ExpInvalidExponent = LPMathExpInvalidExponentContractError()
        self.InvalidPresentValue = LPMathInvalidPresentValueContractError()
        self.LnInvalidInput = LPMathLnInvalidInputContractError()
        self.UnsafeCastToInt256 = LPMathUnsafeCastToInt256ContractError()

        self._all = [
            self.ExpInvalidExponent,
            self.InvalidPresentValue,
            self.LnInvalidInput,
            self.UnsafeCastToInt256,
        ]

    def decode_custom_error(self, data: str) -> tuple[Any, ...]:
        """Decodes a custom contract error."""
        selector = data[:10]
        for err in self._all:
            if err.selector == selector:
                return err.decode_error_data(HexBytes(data[10:]))

        raise ValueError(f"LPMath does not have a selector matching {selector}")


lpmath_abi: ABI = cast(
    ABI,
    [
        {
            "type": "function",
            "name": "calculateDistributeExcessIdle",
            "inputs": [
                {
                    "name": "_params",
                    "type": "tuple",
                    "internalType": "struct LPMath.DistributeExcessIdleParams",
                    "components": [
                        {
                            "name": "presentValueParams",
                            "type": "tuple",
                            "internalType": "struct LPMath.PresentValueParams",
                            "components": [
                                {"name": "shareReserves", "type": "uint256", "internalType": "uint256"},
                                {"name": "shareAdjustment", "type": "int256", "internalType": "int256"},
                                {"name": "bondReserves", "type": "uint256", "internalType": "uint256"},
                                {"name": "vaultSharePrice", "type": "uint256", "internalType": "uint256"},
                                {"name": "initialVaultSharePrice", "type": "uint256", "internalType": "uint256"},
                                {"name": "minimumShareReserves", "type": "uint256", "internalType": "uint256"},
                                {"name": "minimumTransactionAmount", "type": "uint256", "internalType": "uint256"},
                                {"name": "timeStretch", "type": "uint256", "internalType": "uint256"},
                                {"name": "longsOutstanding", "type": "uint256", "internalType": "uint256"},
                                {"name": "longAverageTimeRemaining", "type": "uint256", "internalType": "uint256"},
                                {"name": "shortsOutstanding", "type": "uint256", "internalType": "uint256"},
                                {"name": "shortAverageTimeRemaining", "type": "uint256", "internalType": "uint256"},
                            ],
                        },
                        {"name": "startingPresentValue", "type": "uint256", "internalType": "uint256"},
                        {"name": "activeLpTotalSupply", "type": "uint256", "internalType": "uint256"},
                        {"name": "withdrawalSharesTotalSupply", "type": "uint256", "internalType": "uint256"},
                        {"name": "idle", "type": "uint256", "internalType": "uint256"},
                        {"name": "netCurveTrade", "type": "int256", "internalType": "int256"},
                        {"name": "originalShareReserves", "type": "uint256", "internalType": "uint256"},
                        {"name": "originalShareAdjustment", "type": "int256", "internalType": "int256"},
                        {"name": "originalBondReserves", "type": "uint256", "internalType": "uint256"},
                    ],
                },
                {"name": "_maxIterations", "type": "uint256", "internalType": "uint256"},
            ],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"},
                {"name": "", "type": "uint256", "internalType": "uint256"},
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "calculateInitialReserves",
            "inputs": [
                {"name": "_shareAmount", "type": "uint256", "internalType": "uint256"},
                {"name": "_vaultSharePrice", "type": "uint256", "internalType": "uint256"},
                {"name": "_initialVaultSharePrice", "type": "uint256", "internalType": "uint256"},
                {"name": "_targetApr", "type": "uint256", "internalType": "uint256"},
                {"name": "_positionDuration", "type": "uint256", "internalType": "uint256"},
                {"name": "_timeStretch", "type": "uint256", "internalType": "uint256"},
            ],
            "outputs": [
                {"name": "shareReserves", "type": "uint256", "internalType": "uint256"},
                {"name": "shareAdjustment", "type": "int256", "internalType": "int256"},
                {"name": "bondReserves", "type": "uint256", "internalType": "uint256"},
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "calculatePresentValue",
            "inputs": [
                {
                    "name": "_params",
                    "type": "tuple",
                    "internalType": "struct LPMath.PresentValueParams",
                    "components": [
                        {"name": "shareReserves", "type": "uint256", "internalType": "uint256"},
                        {"name": "shareAdjustment", "type": "int256", "internalType": "int256"},
                        {"name": "bondReserves", "type": "uint256", "internalType": "uint256"},
                        {"name": "vaultSharePrice", "type": "uint256", "internalType": "uint256"},
                        {"name": "initialVaultSharePrice", "type": "uint256", "internalType": "uint256"},
                        {"name": "minimumShareReserves", "type": "uint256", "internalType": "uint256"},
                        {"name": "minimumTransactionAmount", "type": "uint256", "internalType": "uint256"},
                        {"name": "timeStretch", "type": "uint256", "internalType": "uint256"},
                        {"name": "longsOutstanding", "type": "uint256", "internalType": "uint256"},
                        {"name": "longAverageTimeRemaining", "type": "uint256", "internalType": "uint256"},
                        {"name": "shortsOutstanding", "type": "uint256", "internalType": "uint256"},
                        {"name": "shortAverageTimeRemaining", "type": "uint256", "internalType": "uint256"},
                    ],
                }
            ],
            "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "calculatePresentValueSafe",
            "inputs": [
                {
                    "name": "_params",
                    "type": "tuple",
                    "internalType": "struct LPMath.PresentValueParams",
                    "components": [
                        {"name": "shareReserves", "type": "uint256", "internalType": "uint256"},
                        {"name": "shareAdjustment", "type": "int256", "internalType": "int256"},
                        {"name": "bondReserves", "type": "uint256", "internalType": "uint256"},
                        {"name": "vaultSharePrice", "type": "uint256", "internalType": "uint256"},
                        {"name": "initialVaultSharePrice", "type": "uint256", "internalType": "uint256"},
                        {"name": "minimumShareReserves", "type": "uint256", "internalType": "uint256"},
                        {"name": "minimumTransactionAmount", "type": "uint256", "internalType": "uint256"},
                        {"name": "timeStretch", "type": "uint256", "internalType": "uint256"},
                        {"name": "longsOutstanding", "type": "uint256", "internalType": "uint256"},
                        {"name": "longAverageTimeRemaining", "type": "uint256", "internalType": "uint256"},
                        {"name": "shortsOutstanding", "type": "uint256", "internalType": "uint256"},
                        {"name": "shortAverageTimeRemaining", "type": "uint256", "internalType": "uint256"},
                    ],
                }
            ],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"},
                {"name": "", "type": "bool", "internalType": "bool"},
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "calculateUpdateLiquiditySafe",
            "inputs": [
                {"name": "_shareReserves", "type": "uint256", "internalType": "uint256"},
                {"name": "_shareAdjustment", "type": "int256", "internalType": "int256"},
                {"name": "_bondReserves", "type": "uint256", "internalType": "uint256"},
                {"name": "_minimumShareReserves", "type": "uint256", "internalType": "uint256"},
                {"name": "_shareReservesDelta", "type": "int256", "internalType": "int256"},
            ],
            "outputs": [
                {"name": "shareReserves", "type": "uint256", "internalType": "uint256"},
                {"name": "shareAdjustment", "type": "int256", "internalType": "int256"},
                {"name": "bondReserves", "type": "uint256", "internalType": "uint256"},
                {"name": "", "type": "bool", "internalType": "bool"},
            ],
            "stateMutability": "pure",
        },
        {"type": "error", "name": "ExpInvalidExponent", "inputs": []},
        {"type": "error", "name": "InvalidPresentValue", "inputs": []},
        {"type": "error", "name": "LnInvalidInput", "inputs": []},
        {"type": "error", "name": "UnsafeCastToInt256", "inputs": []},
    ],
)
# pylint: disable=line-too-long
lpmath_bytecode = HexStr(
    "0x61212861003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100615760003560e01c80632c03ef68146100665780635a1b419e14610093578063b29e1d1e146100bb578063bf3aa156146100e9578063d0b457ce1461010a575b600080fd5b610079610074366004611edc565b61013f565b604080519283526020830191909152015b60405180910390f35b6100a66100a1366004611f7b565b610231565b6040805192835290151560208301520161008a565b6100ce6100c9366004611f98565b6102be565b6040805193845260208401929092529082015260600161008a565b6100fc6100f7366004611f7b565b610374565b60405190815260200161008a565b61011d610118366004611fdb565b6103ab565b604080519485526020850193909352918301521515606082015260800161008a565b6000806000806101578660c001518760e001516104c8565b915091508061016e5760008093509350505061022a565b600061017a8784610504565b92509050811580610189575080155b1561019d576000809450945050505061022a565b60006101a98883610613565b9050806000036101c357600080955095505050505061022a565b876060015181116101da579450925061022a915050565b50606087015160006101ee8986858b6106eb565b9050806000036102095760008096509650505050505061022a565b8281106102215760008096509650505050505061022a565b90955093505050505b9250929050565b600080600080600061024286610c08565b915091508061025957506000958695509350505050565b6102668660a00151610f37565b61026f87610f65565b8361027d8960000151610f37565b610287919061202c565b610291919061202c565b61029b9190612054565b9250505060008112156102b45750600093849350915050565b9360019350915050565b60008080806102d1866301e13380610fd3565b905060006103036102e28984610fef565b6102f490670de0b6b3a7640000612074565b670de0b6b3a764000090611004565b8b955090506103576103158b87610fef565b61031f8b84611019565b61034561033e610337670de0b6b3a76400008c610fd3565b869061102e565b8e90611019565b61034f9190612074565b8b9190611099565b925061036483828c611099565b9350505096509650969350505050565b600080600061038284610231565b91509150806103a457604051635516328b60e11b815260040160405180910390fd5b5092915050565b600080600080846000036103ca575087925086915085905060016104bc565b6000856103d68b610f37565b6103e0919061202c565b90506103eb87610f37565b811215610406576000806000809450945094509450506104bc565b8094506000891261042b5761042461041f868b8d611099565b610f37565b935061044e565b61044261041f61043a8b612087565b87908d6110b7565b61044b90612087565b93505b60008061045b8c8c6104c8565b915091508061047a5760008060008096509650965096505050506104bc565b600061048688886104c8565b92509050816104a6576000806000809750975097509750505050506104bc565b6104b18b8285611099565b955060019450505050505b95509550955095915050565b6000806000836104d786610f37565b6104e19190612054565b905060008112156104f957600080925092505061022a565b946001945092505050565b60008060008460a00151126105215750506080820151600161022a565b60008460a0015161053190612087565b9050600061056d85876101000151886000015160e00151670de0b6b3a764000061055b91906120a3565b895160608101516080909101516110dd565b9350905082158061057c575080155b1561058f5760008093509350505061022a565b600061059b8383611004565b9050670de0b6b3a764000081116105d75780670de0b6b3a76400000394506105d08760c0015186610fef90919063ffffffff16565b94506105e6565b6000809450945050505061022a565b866080015185111561060557866080015160019450945050505061022a565b506001925050509250929050565b6000806106448460c001518560e00151866101000151876000015160a0015161063b88610f37565b61011890612087565b8751604081019290925260208201929092529190915290508061066b5760009150506106e5565b600061067a8560000151610231565b925090508161068e576000925050506106e5565b846020015181106106a4576000925050506106e5565b6000856060015186604001516106ba9190612074565b90506106d5828760200151836110999092919063ffffffff16565b6106df90826120a3565b93505050505b92915050565b600080856060015186604001516107029190612074565b6020870151606088015191925060009161071c9184611099565b90508660a00151600003610733579150610c009050565b6000808089600488101561074657600497505b60005b88811015610aa85761075b868b611190565b955060006107848360c001518460e00151856101000151866000015160a0015161063b8c610f37565b865160408101929092526020820192909252919091529050806107b257600098505050505050505050610c00565b60006107c18e60000151610231565b92509050816107dc5760009950505050505050505050610c00565b6107e784828b6111a5565b156107fd57879950505050505050505050610c00565b60008460a00151131561096657835180516020820151604083015160a084015160e0909401516000946108519493929161083f90670de0b6b3a76400006120a3565b8a516060810151608090910151611211565b935090508261086d5760009a5050505050505050505050610c00565b808560a0015110610964576108818561131c565b90995092508261089e5760009a5050505050505050505050610c00565b6108c38560c001518660e00151876101000151886000015160a0015161063b8e610f37565b885160408101929092526020820192909252919091529250826108f35760009a5050505050505050505050610c00565b845180516020820151604083015160a084015160e090940151610923949061083f90670de0b6b3a76400006120a3565b935090508261093f5760009a5050505050505050505050610c00565b8e60a00151811161095c57889a5050505050505050505050610c00565b505050610749565b505b6000610977858f8760a001516113f2565b935090508215806109905750670de0b6b3a76400008110155b156109a85760009a5050505050505050505050610c00565b80670de0b6b3a764000003905060006109d561041f8760400151886020015161101990919063ffffffff16565b6109e261041f858e610fef565b6109ec9190612054565b9050881580610a0a57506109ff89611750565b610a0882611750565b105b15610a19578098508997508296505b6000811315610a4757610a368b610a308385610fd3565b90610fd3565b610a40908b612074565b9950610a99565b6000811215610a90576000610a618c610a30858186612087565b90508a811015610a7557808b039a50610a8a565b60009c50505050505050505050505050610c00565b50610a99565b50505050610aa8565b84600101945050505050610749565b506000610ad08260c001518360e00151846101000151856000015160a0015161063b8b610f37565b85516040810192909252602082019290925291909152905080610afd576000975050505050505050610c00565b6000610b0c8360000151610374565b90506000610b2e61041f8560400151866020015161101990919063ffffffff16565b610b3b61041f848c610fef565b610b459190612054565b9050610b5087611750565b610b5982611750565b1015610b66578795508194505b610b8d610b81655af3107a4000670de0b6b3a76400006120a3565b6020860151908b6110b7565b6040850151610b9d908790610fd3565b1080610bdd5750610bcb610bbf655af3107a4000670de0b6b3a7640000612074565b6020860151908b611099565b6040850151610bdb908790611004565b115b15610bf45760009950505050505050505050610c00565b50939750505050505050505b949350505050565b6000806000610c2d61041f856101600151866101400151610fef90919063ffffffff16565b610c4d61041f86610120015187610100015161101990919063ffffffff16565b610c579190612054565b9050600080610c6e866000015187602001516104c8565b9150915080610c8557506000958695509350505050565b6000831315610dd55760008390506000610cd3886000015189602001518a604001518b60a001518c60e00151670de0b6b3a7640000610cc491906120a3565b8d606001518e60800151611211565b9350905082610cec575060009788975095505050505050565b818110610d8a576000610d26858a60400151858c60e00151670de0b6b3a7640000610d1791906120a3565b8d606001518e60800151611763565b9450905083158015610d3b57508860c0015183105b15610d525750600098600198509650505050505050565b83610d6857506000988998509650505050505050565b610d7181610f37565b610d7a90612087565b9960019950975050505050505050565b6000886020015112610dc157610da98860a001518561041f91906120a3565b610db290612087565b98600198509650505050505050565b60a08801518851610da99161041f916120a3565b6000831215610f28576000610de984612087565b90506000610e1d8489604001518a60e00151670de0b6b3a7640000610e0e91906120a3565b8b606001518c608001516110dd565b9350905082610e36575060009788975095505050505050565b818110610ebb576000610e70858a60400151858c60e00151670de0b6b3a7640000610e6191906120a3565b8d606001518e60800151611826565b9450905083158015610e8557508860c0015183105b15610e9c5750600098600198509650505050505050565b83610eb257506000988998509650505050505050565b610d7a81610f37565b6000610eed858a604001518b60e00151670de0b6b3a7640000610ede91906120a3565b8c606001518d608001516118fd565b9450905083610f0757506000988998509650505050505050565b610d7a610f1e8a606001518486610a3091906120a3565b61041f9083612074565b50600095600195509350505050565b60006001600160ff1b03821115610f615760405163396ea70160e11b815260040160405180910390fd5b5090565b6000610f9861041f836101200151670de0b6b3a7640000610f8691906120a3565b606085015161010086015191906110b7565b610fc961041f846101600151670de0b6b3a7640000610fb791906120a3565b60608601516101408701519190611099565b6106e59190612054565b6000610fe883670de0b6b3a764000084611099565b9392505050565b6000610fe88383670de0b6b3a7640000611099565b6000610fe883670de0b6b3a7640000846110b7565b6000610fe88383670de0b6b3a76400006110b7565b6000816000036110475750670de0b6b3a76400006106e5565b82600003611057575060006106e5565b600061106283610f37565b9050600061107761107286610f37565b6119b3565b905081810261108e670de0b6b3a7640000826120b6565b90506106df81611be2565b60008260001904841183021582026110b057600080fd5b5091020490565b60008260001904841183021582026110ce57600080fd5b50910281810615159190040190565b60008060006110ef8888888888611d81565b9050600061111a670de0b6b3a76400006111098888610fd3565b6111139190612074565b8390611004565b9050670de0b6b3a7640000811061114e57611147611140670de0b6b3a764000089611004565b829061102e565b9050611166565b611163611140670de0b6b3a764000089610fd3565b90505b8088101561117c57600080935093505050611186565b8703925060019150505b9550959350505050565b600081831161119f5782610fe8565b50919050565b60208301516000906111b79084611004565b60408501516111c7908490610fd3565b10158015610c00575060208401516111f790846111f0633b9aca00670de0b6b3a7640000612074565b9190611099565b6040850151611207908490611004565b1115949350505050565b60008060008812156112335761122688612087565b6112309087612074565b95505b6000806112408b8b6104c8565b915091508061125757600080935093505050611310565b6000611266838b8a8a8a611db0565b905060006112896112818a61127b8a8e611019565b9061102e565b8990896110b7565b9050808210156112a3576000809550955050505050611310565b808203670de0b6b3a764000081106112d1576112ca611140670de0b6b3a76400008c610fd3565b90506112e9565b6112e6611140670de0b6b3a76400008c611004565b90505b8b81101561130257600080965096505050505050611310565b8b9003955060019450505050505b97509795505050505050565b60008060008360e001511361133657506000928392509050565b60006113458460000151610f65565b905060006113718560400151866060015187604001516113659190612074565b602088015191906110b7565b905060008212611398578082101561138b578190036113ae565b5060009485945092505050565b6113a182612087565b6113ab9082612074565b90505b60e085015160c08601516113c39183906110b7565b9050808560c0015110156113de575060009485945092505050565b808560c00151036001935093505050915091565b60008060008084126114165785516040015161140f908590612074565b9050611451565b600061142185612087565b87516040015190915081101561144157865160400151819003915061144f565b600080935093505050611748565b505b85518051602090910151600091829161146a91906104c8565b91509150806114825760008094509450505050611748565b875160e08101516040909101516000916114b7916114ab916114a4919061102e565b8a90610fef565b6101008b015190611004565b895160e08101516080909101516114e2916114d69161127b9088610fef565b8b516060015190611004565b6114ec9190612074565b905060006115246115186115118c6000015160e001518861102e90919063ffffffff16565b8b90611019565b6101008c015190610fd3565b90508082101561153f57600080965096505050505050611748565b80820391506000611581858c60000151604001518d6000015160e00151670de0b6b3a764000061156f91906120a3565b8e516060810151608090910151611d81565b905060006115ab8c6000015160e00151670de0b6b3a76400006115a491906120a3565b889061102e565b9050808210156115c8576000809850985050505050505050611748565b8b516080810151606090910151918303916115e49183916110b7565b9050670de0b6b3a76400008110611628578b5160e00151611621906111409061161590670de0b6b3a76400006120a3565b8e5160e0015190611004565b9050611657565b8b5160e00151611654906111409061164890670de0b6b3a76400006120a3565b8e5160e0015190610fd3565b90505b8b516060015161166a90859083906110b7565b935083670de0b6b3a7640000111561168e5783670de0b6b3a76400000393506116a2565b600060019850985050505050505050611748565b60008c60e00151126117055760c08c015160e08d01516116c191611004565b9250670de0b6b3a76400008311156116e6576000809850985050505050505050611748565b670de0b6b3a764000092909203916116fe8484610fef565b935061173a565b61173761171e8d60c001518e60e00151610a3090612087565b61173090670de0b6b3a7640000612074565b8590610fef565b93505b509196506001955050505050505b935093915050565b600080821215610f6157816000036106e5565b60008060006117758989888888611d81565b90506117858661127b898b612074565b97508781101561179c57600080925092505061181b565b8781036117aa8186886110b7565b9050670de0b6b3a764000081106117d7576117d0611140670de0b6b3a764000089611004565b90506117ef565b6117ec611140670de0b6b3a764000089610fd3565b90505b6117f98186611004565b9050808a10156118115760008093509350505061181b565b8903925060019150505b965096945050505050565b60008060006118388989888888611d81565b90508688101561184f57600080925092505061181b565b968690039661185e888761102e565b97508781101561187557600080925092505061181b565b8781036118838186886110b7565b9050670de0b6b3a764000081106118b0576118a9611140670de0b6b3a764000089611004565b90506118c8565b6118c5611140670de0b6b3a764000089610fd3565b90505b6118d28186611004565b9050898110156118ea5760008093509350505061181b565b9890980398600198509650505050505050565b600080600061190f8888888888611db0565b9050600061193a670de0b6b3a76400006119298888611004565b6119339190612074565b8390610fd3565b9050670de0b6b3a7640000811061196757611960611140670de0b6b3a764000089610fd3565b905061197f565b61197c611140670de0b6b3a764000089611004565b90505b6119898186610fd3565b9050888110156119a157600080935093505050611186565b97909703976001975095505050505050565b60008082136119d55760405163e61b497560e01b815260040160405180910390fd5b506fffffffffffffffffffffffffffffffff811160071b81811c67ffffffffffffffff1060061b1781811c63ffffffff1060051b1781811c61ffff1060041b1781811c60ff10600390811b90911782811c600f1060021b1782811c909110600190811b90911782811c90911017609f8181036060019290921b91605f19820190611a619084901c610f37565b6c465772b2bbbb5f824b15207a3081018102606090811d6d0388eaa27412d5aca026815d636e018202811d6d0df99ac502031bf953eff472fdcc018202811d6d13cdffb29d51d99322bdff5f2211018202811d6d0a0f742023def783a307a986912e018202811d6d01920d8043ca89b5239253284e42018202811d6c0b7a86d7375468fac667a0a527016c29508e458543d8aa4df2abee7883018302821d6d0139601a2efabe717e604cbb4894018302821d6d02247f7a7b6594320649aa03aba1018302821d6c8c3f38e95a6b1ff2ab1c3b343619018302821d6d02384773bdf1ac5676facced60901901830290911d6cb9a025d814b29c212b8b1a07cd1901909102780a09507084cc699bb0e71ea869ffffffffffffffffffffffff190105711340daa0d5f769dba1915cef59f0815a5506027d0267a36c0c95b3975ab3ee5b203a7614a3f75373f047d803ae7b6687f2b391909102017d57115e47018c7177eebf7cd370a3356a1b7863008a5ae8028c72b88642840160ae1d92915050565b6000680248ce36a70cb26b3e198213611bfd57506000919050565b680755bf798b4a1bf1e58212611c26576040516373a2d6b160e01b815260040160405180910390fd5b6503782dace9d9604e83901b059150600060606bb17217f7d1cf79abc9e3b39884821b056001605f1b01901d6bb17217f7d1cf79abc9e3b3988102909303926c240c330e9fb2d9cbaf0fd5aafb1984018402606090811d6d0277594991cfc85f6e2461837cd9018502811d6d1a521255e34f6a5061b25ef1c9c319018502811d6db1bbb201f443cf962f1a1d3db4a5018502811d6e02c72388d9f74f51a9331fed693f1419018502811d6e05180bb14799ab47a8a8cb2a527d57016d02d16720577bd19bf614176fe9ea6c10fe68e7fd37d0007b713f765087018702831d9081019087016d01d3967ed30fc4f89c02bab570811901810290921d6e0587f503bb6ea29d25fcb7401964500186026d360d7aeea093263ecc6e0ecb291760621b018181059550929350909190611d7774029d9dc38563c32e5c2f6dc192ee70ef65f9978af3860260c38690031c610f37565b9695505050505050565b6000611d8d858561102e565b611da6611d9e8661127b868b611019565b8590856110b7565b611d779190612074565b6000611dbc858561102e565b611da6611dcd8661127b868b610fef565b859085611099565b604051610180810167ffffffffffffffff81118282101715611e0757634e487b7160e01b600052604160045260246000fd5b60405290565b604051610120810167ffffffffffffffff81118282101715611e0757634e487b7160e01b600052604160045260246000fd5b60006101808284031215611e5257600080fd5b611e5a611dd5565b9050813581526020820135602082015260408201356040820152606082013560608201526080820135608082015260a082013560a082015260c082013560c082015260e082013560e082015261010080830135818301525061012080830135818301525061014080830135818301525061016080830135818301525092915050565b6000808284036102a0811215611ef157600080fd5b61028080821215611f0157600080fd5b611f09611e0d565b9150611f158686611e3f565b825261018085013560208301526101a085013560408301526101c085013560608301526101e0850135608083015261020085013560a083015261022085013560c083015261024085013560e0830152610260850135610100830152909593013593505050565b60006101808284031215611f8e57600080fd5b610fe88383611e3f565b60008060008060008060c08789031215611fb157600080fd5b505084359660208601359650604086013595606081013595506080810135945060a0013592509050565b600080600080600060a08688031215611ff357600080fd5b505083359560208501359550604085013594606081013594506080013592509050565b634e487b7160e01b600052601160045260246000fd5b808201828112600083128015821682158216171561204c5761204c612016565b505092915050565b81810360008312801583831316838312821617156103a4576103a4612016565b808201808211156106e5576106e5612016565b6000600160ff1b820161209c5761209c612016565b5060000390565b818103818111156106e5576106e5612016565b6000826120d357634e487b7160e01b600052601260045260246000fd5b600160ff1b8214600019841416156120ed576120ed612016565b50059056fea2646970667358221220b6eb80fecde5fbd1a3361afceb9426684b3aecc076ca6f5fb9519a789dcc837164736f6c63430008140033"
)


class LPMathContract(Contract):
    """A web3.py Contract class for the LPMath contract."""

    abi: ABI = lpmath_abi
    bytecode: bytes | None = try_bytecode_hexbytes(lpmath_bytecode, "lpmath")

    def __init__(self, address: ChecksumAddress | None = None) -> None:
        try:
            # Initialize parent Contract class
            super().__init__(address=address)
            self.functions = LPMathContractFunctions(lpmath_abi, self.w3, address)  # type: ignore

            self.errors = LPMathContractErrors()

        except FallbackNotFound:
            print("Fallback function not found. Continuing...")

    errors: LPMathContractErrors = LPMathContractErrors()

    functions: LPMathContractFunctions

    @classmethod
    def constructor(cls) -> ContractConstructor:  # type: ignore
        """Creates a transaction with the contract's constructor function.

        Parameters
        ----------

        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.

        """

        return super().constructor()

    @classmethod
    def deploy(cls, w3: Web3, account: LocalAccount | ChecksumAddress) -> Self:
        """Deploys and instance of the contract.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.
        """
        deployer = cls.factory(w3=w3)
        constructor_fn = deployer.constructor()

        # if an address is supplied, try to use a web3 default account
        if isinstance(account, str):
            tx_hash = constructor_fn.transact({"from": account})
            tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

            deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
            return deployed_contract

        # otherwise use the account provided.
        deployment_tx = constructor_fn.build_transaction()
        current_nonce = w3.eth.get_transaction_count(account.address, "pending")
        deployment_tx.update({"nonce": current_nonce})

        # Sign the transaction with local account private key
        signed_tx = account.sign_transaction(deployment_tx)

        # Send the signed transaction and wait for receipt
        tx_hash = w3.eth.send_raw_transaction(signed_tx.raw_transaction)
        tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

        deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
        return deployed_contract

    @classmethod
    def factory(cls, w3: Web3, class_name: str | None = None, **kwargs: Any) -> Type[Self]:
        """Deploys and instance of the contract.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        class_name: str | None
            The instance class name.

        Returns
        -------
        Self
            A deployed instance of the contract.
        """
        contract = super().factory(w3, class_name, **kwargs)
        contract.functions = LPMathContractFunctions(lpmath_abi, w3, None)
        contract.errors = LPMathContractErrors()

        return contract
