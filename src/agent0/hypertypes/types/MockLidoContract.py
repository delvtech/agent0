"""A web3.py Contract class for the MockLido contract.

DO NOT EDIT.  This file was generated by pypechain.  See documentation at
https://github.com/delvtech/pypechain"""

# contracts have PascalCase names
# pylint: disable=invalid-name

# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments

# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return

# This file is bound to get very long depending on contract sizes.
# pylint: disable=too-many-lines

# methods are overriden with specific arguments instead of generic *args, **kwargs
# pylint: disable=arguments-differ

# consumers have too many opinions on line length
# pylint: disable=line-too-long


from __future__ import annotations

from typing import Any, Iterable, NamedTuple, Sequence, Type, cast, overload

from eth_account.signers.local import LocalAccount
from eth_typing import ChecksumAddress, HexStr
from hexbytes import HexBytes
from typing_extensions import Self
from web3 import Web3
from web3._utils.filters import LogFilter
from web3.contract.contract import (
    Contract,
    ContractConstructor,
    ContractEvent,
    ContractEvents,
    ContractFunction,
    ContractFunctions,
)
from web3.exceptions import FallbackNotFound
from web3.types import ABI, BlockIdentifier, CallOverride, EventData, TxParams

from .utilities import dataclass_to_tuple, rename_returned_types, try_bytecode_hexbytes

structs = {}


class MockLidoDOMAIN_SEPARATORContractFunction(ContractFunction):
    """ContractFunction for the DOMAIN_SEPARATOR method."""

    def __call__(self) -> MockLidoDOMAIN_SEPARATORContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bytes:
        """returns bytes."""
        # Define the expected return types from the smart contract call

        return_types = bytes

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(bytes, rename_returned_types(structs, return_types, raw_values))


class MockLidoAllowanceContractFunction(ContractFunction):
    """ContractFunction for the allowance method."""

    def __call__(self, arg1: str, arg2: str) -> MockLidoAllowanceContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(arg1), dataclass_to_tuple(arg2))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(int, rename_returned_types(structs, return_types, raw_values))


class MockLidoApproveContractFunction(ContractFunction):
    """ContractFunction for the approve method."""

    def __call__(self, spender: str, amount: int) -> MockLidoApproveContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(spender), dataclass_to_tuple(amount))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bool:
        """returns bool."""
        # Define the expected return types from the smart contract call

        return_types = bool

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(bool, rename_returned_types(structs, return_types, raw_values))


class MockLidoAuthorityContractFunction(ContractFunction):
    """ContractFunction for the authority method."""

    def __call__(self) -> MockLidoAuthorityContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(str, rename_returned_types(structs, return_types, raw_values))


class MockLidoBalanceOfContractFunction(ContractFunction):
    """ContractFunction for the balanceOf method."""

    def __call__(self, arg1: str) -> MockLidoBalanceOfContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(arg1))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(int, rename_returned_types(structs, return_types, raw_values))


class MockLidoBurnContractFunction0(ContractFunction):
    """ContractFunction for the burn method."""

    def __call__(self, amount: int) -> MockLidoBurnContractFunction:  # type: ignore
        super().__call__()  # type: ignore
        return cast(MockLidoBurnContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)


class MockLidoBurnContractFunction1(ContractFunction):
    """ContractFunction for the burn method."""

    def __call__(self, destination: str, amount: int) -> MockLidoBurnContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(destination), dataclass_to_tuple(amount))  # type: ignore
        return cast(MockLidoBurnContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)


class MockLidoBurnContractFunction(ContractFunction):
    """ContractFunction for the burn method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    @overload
    def __call__(self, amount: int) -> MockLidoBurnContractFunction0:  # type: ignore
        ...

    @overload
    def __call__(self, destination: str, amount: int) -> MockLidoBurnContractFunction1:  # type: ignore
        ...

    def __call__(self, *args) -> MockLidoBurnContractFunction:  # type: ignore
        clone = super().__call__(*(dataclass_to_tuple(arg) for arg in args))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self  # type: ignore


class MockLidoCanCallContractFunction(ContractFunction):
    """ContractFunction for the canCall method."""

    def __call__(self, user: str, target: str, functionSig: bytes) -> MockLidoCanCallContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(user), dataclass_to_tuple(target), dataclass_to_tuple(functionSig))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bool:
        """returns bool."""
        # Define the expected return types from the smart contract call

        return_types = bool

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(bool, rename_returned_types(structs, return_types, raw_values))


class MockLidoDecimalsContractFunction(ContractFunction):
    """ContractFunction for the decimals method."""

    def __call__(self) -> MockLidoDecimalsContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(int, rename_returned_types(structs, return_types, raw_values))


class MockLidoDoesRoleHaveCapabilityContractFunction(ContractFunction):
    """ContractFunction for the doesRoleHaveCapability method."""

    def __call__(self, role: int, functionSig: bytes) -> MockLidoDoesRoleHaveCapabilityContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(role), dataclass_to_tuple(functionSig))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bool:
        """returns bool."""
        # Define the expected return types from the smart contract call

        return_types = bool

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(bool, rename_returned_types(structs, return_types, raw_values))


class MockLidoDoesUserHaveRoleContractFunction(ContractFunction):
    """ContractFunction for the doesUserHaveRole method."""

    def __call__(self, user: str, role: int) -> MockLidoDoesUserHaveRoleContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(user), dataclass_to_tuple(role))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bool:
        """returns bool."""
        # Define the expected return types from the smart contract call

        return_types = bool

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(bool, rename_returned_types(structs, return_types, raw_values))


class MockLidoGetBufferedEtherContractFunction(ContractFunction):
    """ContractFunction for the getBufferedEther method."""

    def __call__(self) -> MockLidoGetBufferedEtherContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(int, rename_returned_types(structs, return_types, raw_values))


class MockLidoGetPooledEthBySharesContractFunction(ContractFunction):
    """ContractFunction for the getPooledEthByShares method."""

    def __call__(self, sharesAmount: int) -> MockLidoGetPooledEthBySharesContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(sharesAmount))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(int, rename_returned_types(structs, return_types, raw_values))


class MockLidoGetRateContractFunction(ContractFunction):
    """ContractFunction for the getRate method."""

    def __call__(self) -> MockLidoGetRateContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(int, rename_returned_types(structs, return_types, raw_values))


class MockLidoGetRolesWithCapabilityContractFunction(ContractFunction):
    """ContractFunction for the getRolesWithCapability method."""

    def __call__(self, arg1: bytes) -> MockLidoGetRolesWithCapabilityContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(arg1))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bytes:
        """returns bytes."""
        # Define the expected return types from the smart contract call

        return_types = bytes

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(bytes, rename_returned_types(structs, return_types, raw_values))


class MockLidoGetSharesByPooledEthContractFunction(ContractFunction):
    """ContractFunction for the getSharesByPooledEth method."""

    def __call__(self, ethAmount: int) -> MockLidoGetSharesByPooledEthContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(ethAmount))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(int, rename_returned_types(structs, return_types, raw_values))


class MockLidoGetTargetCustomAuthorityContractFunction(ContractFunction):
    """ContractFunction for the getTargetCustomAuthority method."""

    def __call__(self, arg1: str) -> MockLidoGetTargetCustomAuthorityContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(arg1))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(str, rename_returned_types(structs, return_types, raw_values))


class MockLidoGetTotalPooledEtherContractFunction(ContractFunction):
    """ContractFunction for the getTotalPooledEther method."""

    def __call__(self) -> MockLidoGetTotalPooledEtherContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(int, rename_returned_types(structs, return_types, raw_values))


class MockLidoGetTotalSharesContractFunction(ContractFunction):
    """ContractFunction for the getTotalShares method."""

    def __call__(self) -> MockLidoGetTotalSharesContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(int, rename_returned_types(structs, return_types, raw_values))


class MockLidoGetUserRolesContractFunction(ContractFunction):
    """ContractFunction for the getUserRoles method."""

    def __call__(self, arg1: str) -> MockLidoGetUserRolesContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(arg1))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bytes:
        """returns bytes."""
        # Define the expected return types from the smart contract call

        return_types = bytes

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(bytes, rename_returned_types(structs, return_types, raw_values))


class MockLidoIsCapabilityPublicContractFunction(ContractFunction):
    """ContractFunction for the isCapabilityPublic method."""

    def __call__(self, arg1: bytes) -> MockLidoIsCapabilityPublicContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(arg1))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bool:
        """returns bool."""
        # Define the expected return types from the smart contract call

        return_types = bool

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(bool, rename_returned_types(structs, return_types, raw_values))


class MockLidoIsCompetitionModeContractFunction(ContractFunction):
    """ContractFunction for the isCompetitionMode method."""

    def __call__(self) -> MockLidoIsCompetitionModeContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bool:
        """returns bool."""
        # Define the expected return types from the smart contract call

        return_types = bool

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(bool, rename_returned_types(structs, return_types, raw_values))


class MockLidoIsUnrestrictedContractFunction(ContractFunction):
    """ContractFunction for the isUnrestricted method."""

    def __call__(self, arg1: str) -> MockLidoIsUnrestrictedContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(arg1))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bool:
        """returns bool."""
        # Define the expected return types from the smart contract call

        return_types = bool

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(bool, rename_returned_types(structs, return_types, raw_values))


class MockLidoMaxMintAmountContractFunction(ContractFunction):
    """ContractFunction for the maxMintAmount method."""

    def __call__(self) -> MockLidoMaxMintAmountContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(int, rename_returned_types(structs, return_types, raw_values))


class MockLidoMintContractFunction0(ContractFunction):
    """ContractFunction for the mint method."""

    def __call__(self, destination: str, amount: int) -> MockLidoMintContractFunction:  # type: ignore
        super().__call__(dataclass_to_tuple(destination), dataclass_to_tuple(amount))  # type: ignore
        return cast(MockLidoMintContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)


class MockLidoMintContractFunction1(ContractFunction):
    """ContractFunction for the mint method."""

    def __call__(self, amount: int) -> MockLidoMintContractFunction:  # type: ignore
        super().__call__()  # type: ignore
        return cast(MockLidoMintContractFunction, self)

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function
        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)


class MockLidoMintContractFunction(ContractFunction):
    """ContractFunction for the mint method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    @overload
    def __call__(self, destination: str, amount: int) -> MockLidoMintContractFunction0:  # type: ignore
        ...

    @overload
    def __call__(self, amount: int) -> MockLidoMintContractFunction1:  # type: ignore
        ...

    def __call__(self, *args) -> MockLidoMintContractFunction:  # type: ignore
        clone = super().__call__(*(dataclass_to_tuple(arg) for arg in args))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self  # type: ignore


class MockLidoNameContractFunction(ContractFunction):
    """ContractFunction for the name method."""

    def __call__(self) -> MockLidoNameContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(str, rename_returned_types(structs, return_types, raw_values))


class MockLidoNoncesContractFunction(ContractFunction):
    """ContractFunction for the nonces method."""

    def __call__(self, arg1: str) -> MockLidoNoncesContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(arg1))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(int, rename_returned_types(structs, return_types, raw_values))


class MockLidoOwnerContractFunction(ContractFunction):
    """ContractFunction for the owner method."""

    def __call__(self) -> MockLidoOwnerContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(str, rename_returned_types(structs, return_types, raw_values))


class MockLidoPermitContractFunction(ContractFunction):
    """ContractFunction for the permit method."""

    def __call__(self, owner: str, spender: str, value: int, deadline: int, v: int, r: bytes, s: bytes) -> MockLidoPermitContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(owner),
            dataclass_to_tuple(spender),
            dataclass_to_tuple(value),
            dataclass_to_tuple(deadline),
            dataclass_to_tuple(v),
            dataclass_to_tuple(r),
            dataclass_to_tuple(s),
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class MockLidoSetAuthorityContractFunction(ContractFunction):
    """ContractFunction for the setAuthority method."""

    def __call__(self, newAuthority: str) -> MockLidoSetAuthorityContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(newAuthority))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class MockLidoSetMaxMintAmountContractFunction(ContractFunction):
    """ContractFunction for the setMaxMintAmount method."""

    def __call__(self, maxMintAmount: int) -> MockLidoSetMaxMintAmountContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(maxMintAmount))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class MockLidoSetPublicCapabilityContractFunction(ContractFunction):
    """ContractFunction for the setPublicCapability method."""

    def __call__(self, functionSig: bytes, enabled: bool) -> MockLidoSetPublicCapabilityContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(functionSig), dataclass_to_tuple(enabled))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class MockLidoSetRateContractFunction(ContractFunction):
    """ContractFunction for the setRate method."""

    def __call__(self, rate_: int) -> MockLidoSetRateContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(rate_))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class MockLidoSetRoleCapabilityContractFunction(ContractFunction):
    """ContractFunction for the setRoleCapability method."""

    def __call__(self, role: int, functionSig: bytes, enabled: bool) -> MockLidoSetRoleCapabilityContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(role), dataclass_to_tuple(functionSig), dataclass_to_tuple(enabled))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class MockLidoSetTargetCustomAuthorityContractFunction(ContractFunction):
    """ContractFunction for the setTargetCustomAuthority method."""

    def __call__(self, target: str, customAuthority: str) -> MockLidoSetTargetCustomAuthorityContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(target), dataclass_to_tuple(customAuthority))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class MockLidoSetUnrestrictedMintStatusContractFunction(ContractFunction):
    """ContractFunction for the setUnrestrictedMintStatus method."""

    def __call__(self, target: str, status: bool) -> MockLidoSetUnrestrictedMintStatusContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(target), dataclass_to_tuple(status))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class MockLidoSetUserRoleContractFunction(ContractFunction):
    """ContractFunction for the setUserRole method."""

    def __call__(self, user: str, role: int, enabled: bool) -> MockLidoSetUserRoleContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(user), dataclass_to_tuple(role), dataclass_to_tuple(enabled))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class MockLidoSharesOfContractFunction(ContractFunction):
    """ContractFunction for the sharesOf method."""

    def __call__(self, account: str) -> MockLidoSharesOfContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(account))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(int, rename_returned_types(structs, return_types, raw_values))


class MockLidoSubmitContractFunction(ContractFunction):
    """ContractFunction for the submit method."""

    def __call__(self, arg1: str) -> MockLidoSubmitContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(arg1))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(int, rename_returned_types(structs, return_types, raw_values))


class MockLidoSymbolContractFunction(ContractFunction):
    """ContractFunction for the symbol method."""

    def __call__(self) -> MockLidoSymbolContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(str, rename_returned_types(structs, return_types, raw_values))


class MockLidoTotalSupplyContractFunction(ContractFunction):
    """ContractFunction for the totalSupply method."""

    def __call__(self) -> MockLidoTotalSupplyContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(int, rename_returned_types(structs, return_types, raw_values))


class MockLidoTransferContractFunction(ContractFunction):
    """ContractFunction for the transfer method."""

    def __call__(self, to: str, amount: int) -> MockLidoTransferContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(to), dataclass_to_tuple(amount))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bool:
        """returns bool."""
        # Define the expected return types from the smart contract call

        return_types = bool

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(bool, rename_returned_types(structs, return_types, raw_values))


class MockLidoTransferFromContractFunction(ContractFunction):
    """ContractFunction for the transferFrom method."""

    def __call__(self, _from: str, to: str, amount: int) -> MockLidoTransferFromContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(_from), dataclass_to_tuple(to), dataclass_to_tuple(amount))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bool:
        """returns bool."""
        # Define the expected return types from the smart contract call

        return_types = bool

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(bool, rename_returned_types(structs, return_types, raw_values))


class MockLidoTransferOwnershipContractFunction(ContractFunction):
    """ContractFunction for the transferOwnership method."""

    def __call__(self, newOwner: str) -> MockLidoTransferOwnershipContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(newOwner))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class MockLidoTransferSharesContractFunction(ContractFunction):
    """ContractFunction for the transferShares method."""

    def __call__(self, recipient: str, sharesAmount: int) -> MockLidoTransferSharesContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(recipient), dataclass_to_tuple(sharesAmount))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(int, rename_returned_types(structs, return_types, raw_values))


class MockLidoTransferSharesFromContractFunction(ContractFunction):
    """ContractFunction for the transferSharesFrom method."""

    def __call__(self, sender: str, recipient: str, sharesAmount: int) -> MockLidoTransferSharesFromContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(sender), dataclass_to_tuple(recipient), dataclass_to_tuple(sharesAmount)
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(int, rename_returned_types(structs, return_types, raw_values))


class MockLidoContractFunctions(ContractFunctions):
    """ContractFunctions for the MockLido contract."""

    DOMAIN_SEPARATOR: MockLidoDOMAIN_SEPARATORContractFunction

    allowance: MockLidoAllowanceContractFunction

    approve: MockLidoApproveContractFunction

    authority: MockLidoAuthorityContractFunction

    balanceOf: MockLidoBalanceOfContractFunction

    burn: MockLidoBurnContractFunction

    canCall: MockLidoCanCallContractFunction

    decimals: MockLidoDecimalsContractFunction

    doesRoleHaveCapability: MockLidoDoesRoleHaveCapabilityContractFunction

    doesUserHaveRole: MockLidoDoesUserHaveRoleContractFunction

    getBufferedEther: MockLidoGetBufferedEtherContractFunction

    getPooledEthByShares: MockLidoGetPooledEthBySharesContractFunction

    getRate: MockLidoGetRateContractFunction

    getRolesWithCapability: MockLidoGetRolesWithCapabilityContractFunction

    getSharesByPooledEth: MockLidoGetSharesByPooledEthContractFunction

    getTargetCustomAuthority: MockLidoGetTargetCustomAuthorityContractFunction

    getTotalPooledEther: MockLidoGetTotalPooledEtherContractFunction

    getTotalShares: MockLidoGetTotalSharesContractFunction

    getUserRoles: MockLidoGetUserRolesContractFunction

    isCapabilityPublic: MockLidoIsCapabilityPublicContractFunction

    isCompetitionMode: MockLidoIsCompetitionModeContractFunction

    isUnrestricted: MockLidoIsUnrestrictedContractFunction

    maxMintAmount: MockLidoMaxMintAmountContractFunction

    mint: MockLidoMintContractFunction

    name: MockLidoNameContractFunction

    nonces: MockLidoNoncesContractFunction

    owner: MockLidoOwnerContractFunction

    permit: MockLidoPermitContractFunction

    setAuthority: MockLidoSetAuthorityContractFunction

    setMaxMintAmount: MockLidoSetMaxMintAmountContractFunction

    setPublicCapability: MockLidoSetPublicCapabilityContractFunction

    setRate: MockLidoSetRateContractFunction

    setRoleCapability: MockLidoSetRoleCapabilityContractFunction

    setTargetCustomAuthority: MockLidoSetTargetCustomAuthorityContractFunction

    setUnrestrictedMintStatus: MockLidoSetUnrestrictedMintStatusContractFunction

    setUserRole: MockLidoSetUserRoleContractFunction

    sharesOf: MockLidoSharesOfContractFunction

    submit: MockLidoSubmitContractFunction

    symbol: MockLidoSymbolContractFunction

    totalSupply: MockLidoTotalSupplyContractFunction

    transfer: MockLidoTransferContractFunction

    transferFrom: MockLidoTransferFromContractFunction

    transferOwnership: MockLidoTransferOwnershipContractFunction

    transferShares: MockLidoTransferSharesContractFunction

    transferSharesFrom: MockLidoTransferSharesFromContractFunction

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
        decode_tuples: bool | None = False,
    ) -> None:
        super().__init__(abi, w3, address, decode_tuples)
        self.DOMAIN_SEPARATOR = MockLidoDOMAIN_SEPARATORContractFunction.factory(
            "DOMAIN_SEPARATOR",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="DOMAIN_SEPARATOR",
        )
        self.allowance = MockLidoAllowanceContractFunction.factory(
            "allowance",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="allowance",
        )
        self.approve = MockLidoApproveContractFunction.factory(
            "approve",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="approve",
        )
        self.authority = MockLidoAuthorityContractFunction.factory(
            "authority",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="authority",
        )
        self.balanceOf = MockLidoBalanceOfContractFunction.factory(
            "balanceOf",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="balanceOf",
        )
        self.burn = MockLidoBurnContractFunction.factory(
            "burn",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="burn",
        )
        self.canCall = MockLidoCanCallContractFunction.factory(
            "canCall",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="canCall",
        )
        self.decimals = MockLidoDecimalsContractFunction.factory(
            "decimals",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="decimals",
        )
        self.doesRoleHaveCapability = MockLidoDoesRoleHaveCapabilityContractFunction.factory(
            "doesRoleHaveCapability",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="doesRoleHaveCapability",
        )
        self.doesUserHaveRole = MockLidoDoesUserHaveRoleContractFunction.factory(
            "doesUserHaveRole",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="doesUserHaveRole",
        )
        self.getBufferedEther = MockLidoGetBufferedEtherContractFunction.factory(
            "getBufferedEther",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="getBufferedEther",
        )
        self.getPooledEthByShares = MockLidoGetPooledEthBySharesContractFunction.factory(
            "getPooledEthByShares",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="getPooledEthByShares",
        )
        self.getRate = MockLidoGetRateContractFunction.factory(
            "getRate",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="getRate",
        )
        self.getRolesWithCapability = MockLidoGetRolesWithCapabilityContractFunction.factory(
            "getRolesWithCapability",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="getRolesWithCapability",
        )
        self.getSharesByPooledEth = MockLidoGetSharesByPooledEthContractFunction.factory(
            "getSharesByPooledEth",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="getSharesByPooledEth",
        )
        self.getTargetCustomAuthority = MockLidoGetTargetCustomAuthorityContractFunction.factory(
            "getTargetCustomAuthority",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="getTargetCustomAuthority",
        )
        self.getTotalPooledEther = MockLidoGetTotalPooledEtherContractFunction.factory(
            "getTotalPooledEther",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="getTotalPooledEther",
        )
        self.getTotalShares = MockLidoGetTotalSharesContractFunction.factory(
            "getTotalShares",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="getTotalShares",
        )
        self.getUserRoles = MockLidoGetUserRolesContractFunction.factory(
            "getUserRoles",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="getUserRoles",
        )
        self.isCapabilityPublic = MockLidoIsCapabilityPublicContractFunction.factory(
            "isCapabilityPublic",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="isCapabilityPublic",
        )
        self.isCompetitionMode = MockLidoIsCompetitionModeContractFunction.factory(
            "isCompetitionMode",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="isCompetitionMode",
        )
        self.isUnrestricted = MockLidoIsUnrestrictedContractFunction.factory(
            "isUnrestricted",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="isUnrestricted",
        )
        self.maxMintAmount = MockLidoMaxMintAmountContractFunction.factory(
            "maxMintAmount",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="maxMintAmount",
        )
        self.mint = MockLidoMintContractFunction.factory(
            "mint",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="mint",
        )
        self.name = MockLidoNameContractFunction.factory(
            "name",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="name",
        )
        self.nonces = MockLidoNoncesContractFunction.factory(
            "nonces",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="nonces",
        )
        self.owner = MockLidoOwnerContractFunction.factory(
            "owner",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="owner",
        )
        self.permit = MockLidoPermitContractFunction.factory(
            "permit",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="permit",
        )
        self.setAuthority = MockLidoSetAuthorityContractFunction.factory(
            "setAuthority",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="setAuthority",
        )
        self.setMaxMintAmount = MockLidoSetMaxMintAmountContractFunction.factory(
            "setMaxMintAmount",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="setMaxMintAmount",
        )
        self.setPublicCapability = MockLidoSetPublicCapabilityContractFunction.factory(
            "setPublicCapability",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="setPublicCapability",
        )
        self.setRate = MockLidoSetRateContractFunction.factory(
            "setRate",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="setRate",
        )
        self.setRoleCapability = MockLidoSetRoleCapabilityContractFunction.factory(
            "setRoleCapability",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="setRoleCapability",
        )
        self.setTargetCustomAuthority = MockLidoSetTargetCustomAuthorityContractFunction.factory(
            "setTargetCustomAuthority",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="setTargetCustomAuthority",
        )
        self.setUnrestrictedMintStatus = MockLidoSetUnrestrictedMintStatusContractFunction.factory(
            "setUnrestrictedMintStatus",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="setUnrestrictedMintStatus",
        )
        self.setUserRole = MockLidoSetUserRoleContractFunction.factory(
            "setUserRole",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="setUserRole",
        )
        self.sharesOf = MockLidoSharesOfContractFunction.factory(
            "sharesOf",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="sharesOf",
        )
        self.submit = MockLidoSubmitContractFunction.factory(
            "submit",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="submit",
        )
        self.symbol = MockLidoSymbolContractFunction.factory(
            "symbol",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="symbol",
        )
        self.totalSupply = MockLidoTotalSupplyContractFunction.factory(
            "totalSupply",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="totalSupply",
        )
        self.transfer = MockLidoTransferContractFunction.factory(
            "transfer",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="transfer",
        )
        self.transferFrom = MockLidoTransferFromContractFunction.factory(
            "transferFrom",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="transferFrom",
        )
        self.transferOwnership = MockLidoTransferOwnershipContractFunction.factory(
            "transferOwnership",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="transferOwnership",
        )
        self.transferShares = MockLidoTransferSharesContractFunction.factory(
            "transferShares",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="transferShares",
        )
        self.transferSharesFrom = MockLidoTransferSharesFromContractFunction.factory(
            "transferSharesFrom",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="transferSharesFrom",
        )


class MockLidoApprovalContractEvent(ContractEvent):
    """ContractEvent for Approval."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "MockLidoApprovalContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["MockLidoApprovalContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "MockLidoApprovalContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["MockLidoApprovalContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class MockLidoAuthorityUpdatedContractEvent(ContractEvent):
    """ContractEvent for AuthorityUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "MockLidoAuthorityUpdatedContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["MockLidoAuthorityUpdatedContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "MockLidoAuthorityUpdatedContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["MockLidoAuthorityUpdatedContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class MockLidoOwnershipTransferredContractEvent(ContractEvent):
    """ContractEvent for OwnershipTransferred."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "MockLidoOwnershipTransferredContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["MockLidoOwnershipTransferredContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "MockLidoOwnershipTransferredContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["MockLidoOwnershipTransferredContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class MockLidoPublicCapabilityUpdatedContractEvent(ContractEvent):
    """ContractEvent for PublicCapabilityUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "MockLidoPublicCapabilityUpdatedContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["MockLidoPublicCapabilityUpdatedContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "MockLidoPublicCapabilityUpdatedContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["MockLidoPublicCapabilityUpdatedContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class MockLidoRoleCapabilityUpdatedContractEvent(ContractEvent):
    """ContractEvent for RoleCapabilityUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "MockLidoRoleCapabilityUpdatedContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["MockLidoRoleCapabilityUpdatedContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "MockLidoRoleCapabilityUpdatedContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["MockLidoRoleCapabilityUpdatedContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class MockLidoTargetCustomAuthorityUpdatedContractEvent(ContractEvent):
    """ContractEvent for TargetCustomAuthorityUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "MockLidoTargetCustomAuthorityUpdatedContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["MockLidoTargetCustomAuthorityUpdatedContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "MockLidoTargetCustomAuthorityUpdatedContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["MockLidoTargetCustomAuthorityUpdatedContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class MockLidoTransferContractEvent(ContractEvent):
    """ContractEvent for Transfer."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "MockLidoTransferContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["MockLidoTransferContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "MockLidoTransferContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["MockLidoTransferContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class MockLidoUserRoleUpdatedContractEvent(ContractEvent):
    """ContractEvent for UserRoleUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "MockLidoUserRoleUpdatedContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["MockLidoUserRoleUpdatedContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "MockLidoUserRoleUpdatedContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["MockLidoUserRoleUpdatedContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class MockLidoContractEvents(ContractEvents):
    """ContractEvents for the MockLido contract."""

    Approval: MockLidoApprovalContractEvent

    AuthorityUpdated: MockLidoAuthorityUpdatedContractEvent

    OwnershipTransferred: MockLidoOwnershipTransferredContractEvent

    PublicCapabilityUpdated: MockLidoPublicCapabilityUpdatedContractEvent

    RoleCapabilityUpdated: MockLidoRoleCapabilityUpdatedContractEvent

    TargetCustomAuthorityUpdated: MockLidoTargetCustomAuthorityUpdatedContractEvent

    Transfer: MockLidoTransferContractEvent

    UserRoleUpdated: MockLidoUserRoleUpdatedContractEvent

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
    ) -> None:
        super().__init__(abi, w3, address)
        self.Approval = cast(
            MockLidoApprovalContractEvent,
            MockLidoApprovalContractEvent.factory(
                "Approval", w3=w3, contract_abi=abi, address=address, event_name="Approval"
            ),
        )
        self.AuthorityUpdated = cast(
            MockLidoAuthorityUpdatedContractEvent,
            MockLidoAuthorityUpdatedContractEvent.factory(
                "AuthorityUpdated", w3=w3, contract_abi=abi, address=address, event_name="AuthorityUpdated"
            ),
        )
        self.OwnershipTransferred = cast(
            MockLidoOwnershipTransferredContractEvent,
            MockLidoOwnershipTransferredContractEvent.factory(
                "OwnershipTransferred", w3=w3, contract_abi=abi, address=address, event_name="OwnershipTransferred"
            ),
        )
        self.PublicCapabilityUpdated = cast(
            MockLidoPublicCapabilityUpdatedContractEvent,
            MockLidoPublicCapabilityUpdatedContractEvent.factory(
                "PublicCapabilityUpdated",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="PublicCapabilityUpdated",
            ),
        )
        self.RoleCapabilityUpdated = cast(
            MockLidoRoleCapabilityUpdatedContractEvent,
            MockLidoRoleCapabilityUpdatedContractEvent.factory(
                "RoleCapabilityUpdated", w3=w3, contract_abi=abi, address=address, event_name="RoleCapabilityUpdated"
            ),
        )
        self.TargetCustomAuthorityUpdated = cast(
            MockLidoTargetCustomAuthorityUpdatedContractEvent,
            MockLidoTargetCustomAuthorityUpdatedContractEvent.factory(
                "TargetCustomAuthorityUpdated",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="TargetCustomAuthorityUpdated",
            ),
        )
        self.Transfer = cast(
            MockLidoTransferContractEvent,
            MockLidoTransferContractEvent.factory(
                "Transfer", w3=w3, contract_abi=abi, address=address, event_name="Transfer"
            ),
        )
        self.UserRoleUpdated = cast(
            MockLidoUserRoleUpdatedContractEvent,
            MockLidoUserRoleUpdatedContractEvent.factory(
                "UserRoleUpdated", w3=w3, contract_abi=abi, address=address, event_name="UserRoleUpdated"
            ),
        )


mocklido_abi: ABI = cast(
    ABI,
    [
        {
            "type": "constructor",
            "inputs": [
                {"name": "_initialRate", "type": "uint256", "internalType": "uint256"},
                {"name": "_admin", "type": "address", "internalType": "address"},
                {"name": "_isCompetitionMode", "type": "bool", "internalType": "bool"},
                {"name": "_maxMintAmount", "type": "uint256", "internalType": "uint256"},
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "DOMAIN_SEPARATOR",
            "inputs": [],
            "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "allowance",
            "inputs": [
                {"name": "", "type": "address", "internalType": "address"},
                {"name": "", "type": "address", "internalType": "address"},
            ],
            "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "approve",
            "inputs": [
                {"name": "spender", "type": "address", "internalType": "address"},
                {"name": "amount", "type": "uint256", "internalType": "uint256"},
            ],
            "outputs": [{"name": "", "type": "bool", "internalType": "bool"}],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "authority",
            "inputs": [],
            "outputs": [{"name": "", "type": "address", "internalType": "contract Authority"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "balanceOf",
            "inputs": [{"name": "", "type": "address", "internalType": "address"}],
            "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "burn",
            "inputs": [{"name": "amount", "type": "uint256", "internalType": "uint256"}],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "burn",
            "inputs": [
                {"name": "destination", "type": "address", "internalType": "address"},
                {"name": "amount", "type": "uint256", "internalType": "uint256"},
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "canCall",
            "inputs": [
                {"name": "user", "type": "address", "internalType": "address"},
                {"name": "target", "type": "address", "internalType": "address"},
                {"name": "functionSig", "type": "bytes4", "internalType": "bytes4"},
            ],
            "outputs": [{"name": "", "type": "bool", "internalType": "bool"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "decimals",
            "inputs": [],
            "outputs": [{"name": "", "type": "uint8", "internalType": "uint8"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "doesRoleHaveCapability",
            "inputs": [
                {"name": "role", "type": "uint8", "internalType": "uint8"},
                {"name": "functionSig", "type": "bytes4", "internalType": "bytes4"},
            ],
            "outputs": [{"name": "", "type": "bool", "internalType": "bool"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "doesUserHaveRole",
            "inputs": [
                {"name": "user", "type": "address", "internalType": "address"},
                {"name": "role", "type": "uint8", "internalType": "uint8"},
            ],
            "outputs": [{"name": "", "type": "bool", "internalType": "bool"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getBufferedEther",
            "inputs": [],
            "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "getPooledEthByShares",
            "inputs": [{"name": "_sharesAmount", "type": "uint256", "internalType": "uint256"}],
            "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getRate",
            "inputs": [],
            "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getRolesWithCapability",
            "inputs": [{"name": "", "type": "bytes4", "internalType": "bytes4"}],
            "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getSharesByPooledEth",
            "inputs": [{"name": "_ethAmount", "type": "uint256", "internalType": "uint256"}],
            "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getTargetCustomAuthority",
            "inputs": [{"name": "", "type": "address", "internalType": "address"}],
            "outputs": [{"name": "", "type": "address", "internalType": "contract Authority"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getTotalPooledEther",
            "inputs": [],
            "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getTotalShares",
            "inputs": [],
            "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getUserRoles",
            "inputs": [{"name": "", "type": "address", "internalType": "address"}],
            "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "isCapabilityPublic",
            "inputs": [{"name": "", "type": "bytes4", "internalType": "bytes4"}],
            "outputs": [{"name": "", "type": "bool", "internalType": "bool"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "isCompetitionMode",
            "inputs": [],
            "outputs": [{"name": "", "type": "bool", "internalType": "bool"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "isUnrestricted",
            "inputs": [{"name": "", "type": "address", "internalType": "address"}],
            "outputs": [{"name": "", "type": "bool", "internalType": "bool"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "maxMintAmount",
            "inputs": [],
            "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "mint",
            "inputs": [
                {"name": "destination", "type": "address", "internalType": "address"},
                {"name": "amount", "type": "uint256", "internalType": "uint256"},
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "mint",
            "inputs": [{"name": "amount", "type": "uint256", "internalType": "uint256"}],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "name",
            "inputs": [],
            "outputs": [{"name": "", "type": "string", "internalType": "string"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "nonces",
            "inputs": [{"name": "", "type": "address", "internalType": "address"}],
            "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "owner",
            "inputs": [],
            "outputs": [{"name": "", "type": "address", "internalType": "address"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "permit",
            "inputs": [
                {"name": "owner", "type": "address", "internalType": "address"},
                {"name": "spender", "type": "address", "internalType": "address"},
                {"name": "value", "type": "uint256", "internalType": "uint256"},
                {"name": "deadline", "type": "uint256", "internalType": "uint256"},
                {"name": "v", "type": "uint8", "internalType": "uint8"},
                {"name": "r", "type": "bytes32", "internalType": "bytes32"},
                {"name": "s", "type": "bytes32", "internalType": "bytes32"},
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "setAuthority",
            "inputs": [{"name": "newAuthority", "type": "address", "internalType": "contract Authority"}],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "setMaxMintAmount",
            "inputs": [{"name": "_maxMintAmount", "type": "uint256", "internalType": "uint256"}],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "setPublicCapability",
            "inputs": [
                {"name": "functionSig", "type": "bytes4", "internalType": "bytes4"},
                {"name": "enabled", "type": "bool", "internalType": "bool"},
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "setRate",
            "inputs": [{"name": "_rate_", "type": "uint256", "internalType": "uint256"}],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "setRoleCapability",
            "inputs": [
                {"name": "role", "type": "uint8", "internalType": "uint8"},
                {"name": "functionSig", "type": "bytes4", "internalType": "bytes4"},
                {"name": "enabled", "type": "bool", "internalType": "bool"},
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "setTargetCustomAuthority",
            "inputs": [
                {"name": "target", "type": "address", "internalType": "address"},
                {"name": "customAuthority", "type": "address", "internalType": "contract Authority"},
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "setUnrestrictedMintStatus",
            "inputs": [
                {"name": "_target", "type": "address", "internalType": "address"},
                {"name": "_status", "type": "bool", "internalType": "bool"},
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "setUserRole",
            "inputs": [
                {"name": "user", "type": "address", "internalType": "address"},
                {"name": "role", "type": "uint8", "internalType": "uint8"},
                {"name": "enabled", "type": "bool", "internalType": "bool"},
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "sharesOf",
            "inputs": [{"name": "_account", "type": "address", "internalType": "address"}],
            "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "submit",
            "inputs": [{"name": "", "type": "address", "internalType": "address"}],
            "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}],
            "stateMutability": "payable",
        },
        {
            "type": "function",
            "name": "symbol",
            "inputs": [],
            "outputs": [{"name": "", "type": "string", "internalType": "string"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "totalSupply",
            "inputs": [],
            "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "transfer",
            "inputs": [
                {"name": "to", "type": "address", "internalType": "address"},
                {"name": "amount", "type": "uint256", "internalType": "uint256"},
            ],
            "outputs": [{"name": "", "type": "bool", "internalType": "bool"}],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "transferFrom",
            "inputs": [
                {"name": "from", "type": "address", "internalType": "address"},
                {"name": "to", "type": "address", "internalType": "address"},
                {"name": "amount", "type": "uint256", "internalType": "uint256"},
            ],
            "outputs": [{"name": "", "type": "bool", "internalType": "bool"}],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "transferOwnership",
            "inputs": [{"name": "newOwner", "type": "address", "internalType": "address"}],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "transferShares",
            "inputs": [
                {"name": "_recipient", "type": "address", "internalType": "address"},
                {"name": "_sharesAmount", "type": "uint256", "internalType": "uint256"},
            ],
            "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "transferSharesFrom",
            "inputs": [
                {"name": "_sender", "type": "address", "internalType": "address"},
                {"name": "_recipient", "type": "address", "internalType": "address"},
                {"name": "_sharesAmount", "type": "uint256", "internalType": "uint256"},
            ],
            "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}],
            "stateMutability": "nonpayable",
        },
        {
            "type": "event",
            "name": "Approval",
            "inputs": [
                {"name": "owner", "type": "address", "indexed": True, "internalType": "address"},
                {"name": "spender", "type": "address", "indexed": True, "internalType": "address"},
                {"name": "amount", "type": "uint256", "indexed": False, "internalType": "uint256"},
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "AuthorityUpdated",
            "inputs": [
                {"name": "user", "type": "address", "indexed": True, "internalType": "address"},
                {"name": "newAuthority", "type": "address", "indexed": True, "internalType": "contract Authority"},
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "OwnershipTransferred",
            "inputs": [
                {"name": "user", "type": "address", "indexed": True, "internalType": "address"},
                {"name": "newOwner", "type": "address", "indexed": True, "internalType": "address"},
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "PublicCapabilityUpdated",
            "inputs": [
                {"name": "functionSig", "type": "bytes4", "indexed": True, "internalType": "bytes4"},
                {"name": "enabled", "type": "bool", "indexed": False, "internalType": "bool"},
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "RoleCapabilityUpdated",
            "inputs": [
                {"name": "role", "type": "uint8", "indexed": True, "internalType": "uint8"},
                {"name": "functionSig", "type": "bytes4", "indexed": True, "internalType": "bytes4"},
                {"name": "enabled", "type": "bool", "indexed": False, "internalType": "bool"},
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "TargetCustomAuthorityUpdated",
            "inputs": [
                {"name": "target", "type": "address", "indexed": True, "internalType": "address"},
                {"name": "authority", "type": "address", "indexed": True, "internalType": "contract Authority"},
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "Transfer",
            "inputs": [
                {"name": "from", "type": "address", "indexed": True, "internalType": "address"},
                {"name": "to", "type": "address", "indexed": True, "internalType": "address"},
                {"name": "amount", "type": "uint256", "indexed": False, "internalType": "uint256"},
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "UserRoleUpdated",
            "inputs": [
                {"name": "user", "type": "address", "indexed": True, "internalType": "address"},
                {"name": "role", "type": "uint8", "indexed": True, "internalType": "uint8"},
                {"name": "enabled", "type": "bool", "indexed": False, "internalType": "bool"},
            ],
            "anonymous": False,
        },
    ],
)
# pylint: disable=line-too-long
mocklido_bytecode = HexStr(
    "0x6101006040523480156200001257600080fd5b506040516200258e3803806200258e833981016040819052620000359162000223565b6040518060400160405280601781526020017f4c6971756964207374616b656420457468657220322e30000000000000000000815250604051806040016040528060058152602001640e6e88aa8960db1b8152506012858585823081818989898260009081620000a6919062000326565b506001620000b5838262000326565b5060ff81166080524660a052620000cb62000187565b60c0525050600680546001600160a01b038086166001600160a01b03199283168117909355600780549186169190921617905560405190915033907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36040516001600160a01b0382169033907fa3396fd7f6e0a21b50e5089d2da70d5ac0a3bbbd1f617a93f134b7638998019890600090a35050505090151560e052600c55505050600e94909455505042600f5550620004709050565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6000604051620001bb9190620003f2565b6040805191829003822060208301939093528101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b600080600080608085870312156200023a57600080fd5b845160208601519094506001600160a01b03811681146200025a57600080fd5b604086015190935080151581146200027157600080fd5b6060959095015193969295505050565b634e487b7160e01b600052604160045260246000fd5b600181811c90821680620002ac57607f821691505b602082108103620002cd57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200032157600081815260208120601f850160051c81016020861015620002fc5750805b601f850160051c820191505b818110156200031d5782815560010162000308565b5050505b505050565b81516001600160401b0381111562000342576200034262000281565b6200035a8162000353845462000297565b84620002d3565b602080601f831160018114620003925760008415620003795750858301515b600019600386901b1c1916600185901b1785556200031d565b600085815260208120601f198616915b82811015620003c357888601518255948401946001909101908401620003a2565b5085821015620003e25787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6000808354620004028162000297565b600182811680156200041d5760018114620004335762000464565b60ff198416875282151583028701945062000464565b8760005260208060002060005b858110156200045b5781548a82015290840190820162000440565b50505082870194505b50929695505050505050565b60805160a05160c05160e0516120b3620004db600039600081816105f50152818161094d01528181610a6701528181610d0901528181610de001528181610e7f01528181611236015261129801526000610da501526000610d700152600061042f01526120b36000f3fe6080604052600436106102885760003560e01c8063728b952b1161015a578063aed30777116100c1578063dd62ed3e1161007a578063dd62ed3e1461081f578063e688747b14610857578063ea7ca2761461089a578063ed0d0efb146108de578063f2fde38b1461090b578063f5eb42dc1461092b57600080fd5b8063aed3077714610744578063b700961314610774578063bf7e214f14610794578063c53a3985146107b4578063d5002f2e146107ea578063d505accf146107ff57600080fd5b80638fcb4e5b116101135780638fcb4e5b1461069c57806395d89b41146106bc5780639dc29fac146106d1578063a0712d68146106f1578063a1903eab14610711578063a9059cbb1461072457600080fd5b8063728b952b146105a35780637a28fb88146105c35780637a8c63b5146105e35780637a9e5e4b146106175780637ecebe00146106375780638da5cb5b1461066457600080fd5b8063313ce567116101fe57806347b714e0116101b757806347b714e0146104ed5780634b5159da14610501578063679aefce1461052157806367aff484146105365780636d7804591461055657806370a082311461057657600080fd5b8063313ce5671461041d57806334fcf437146104635780633644e5151461048357806337cfdaca1461049857806340c10f19146104ad57806342966c68146104cd57600080fd5b80630bade8a4116102505780630bade8a4146103615780630ea9b75b1461039157806318160ddd146103b157806319208451146103c7578063239c70ae146103e757806323b872dd146103fd57600080fd5b806305f05a941461028d57806306a36aee146102af57806306fdde03146102ef578063088a4ed014610311578063095ea7b314610331575b600080fd5b34801561029957600080fd5b506102ad6102a8366004611b19565b61094b565b005b3480156102bb57600080fd5b506102dc6102ca366004611b52565b60096020526000908152604090205481565b6040519081526020015b60405180910390f35b3480156102fb57600080fd5b506103046109d7565b6040516102e69190611b6f565b34801561031d57600080fd5b506102ad61032c366004611bbd565b610a65565b34801561033d57600080fd5b5061035161034c366004611bd6565b610ac2565b60405190151581526020016102e6565b34801561036d57600080fd5b5061035161037c366004611c1f565b600a6020526000908152604090205460ff1681565b34801561039d57600080fd5b506102ad6103ac366004611c4b565b610b2f565b3480156103bd57600080fd5b506102dc60025481565b3480156103d357600080fd5b506102dc6103e2366004611bbd565b610c07565b3480156103f357600080fd5b506102dc600c5481565b34801561040957600080fd5b50610351610418366004611c92565b610c25565b34801561042957600080fd5b506104517f000000000000000000000000000000000000000000000000000000000000000081565b60405160ff90911681526020016102e6565b34801561046f57600080fd5b506102ad61047e366004611bbd565b610d07565b34801561048f57600080fd5b506102dc610d6c565b3480156104a457600080fd5b506102dc610dc7565b3480156104b957600080fd5b506102ad6104c8366004611bd6565b610dde565b3480156104d957600080fd5b506102ad6104e8366004611bbd565b610e7d565b3480156104f957600080fd5b5060006102dc565b34801561050d57600080fd5b506102ad61051c366004611cd3565b610ee2565b34801561052d57600080fd5b50600e546102dc565b34801561054257600080fd5b506102ad610551366004611cef565b610f74565b34801561056257600080fd5b506102dc610571366004611c92565b61103c565b34801561058257600080fd5b506102dc610591366004611b52565b60036020526000908152604090205481565b3480156105af57600080fd5b506102ad6105be366004611d1d565b611074565b3480156105cf57600080fd5b506102dc6105de366004611bbd565b6110fd565b3480156105ef57600080fd5b506103517f000000000000000000000000000000000000000000000000000000000000000081565b34801561062357600080fd5b506102ad610632366004611b52565b611112565b34801561064357600080fd5b506102dc610652366004611b52565b60056020526000908152604090205481565b34801561067057600080fd5b50600654610684906001600160a01b031681565b6040516001600160a01b0390911681526020016102e6565b3480156106a857600080fd5b506102dc6106b7366004611bd6565b6111fc565b3480156106c857600080fd5b50610304611227565b3480156106dd57600080fd5b506102ad6106ec366004611bd6565b611234565b3480156106fd57600080fd5b506102ad61070c366004611bbd565b611296565b6102dc61071f366004611b52565b611331565b34801561073057600080fd5b5061035161073f366004611bd6565b6113bd565b34801561075057600080fd5b5061035161075f366004611b52565b600d6020526000908152604090205460ff1681565b34801561078057600080fd5b5061035161078f366004611d4b565b611423565b3480156107a057600080fd5b50600754610684906001600160a01b031681565b3480156107c057600080fd5b506106846107cf366004611b52565b6008602052600090815260409020546001600160a01b031681565b3480156107f657600080fd5b506011546102dc565b34801561080b57600080fd5b506102ad61081a366004611d92565b611521565b34801561082b57600080fd5b506102dc61083a366004611d1d565b600460209081526000928352604080842090915290825290205481565b34801561086357600080fd5b50610351610872366004611e00565b6001600160e01b0319166000908152600b602052604090205460ff919091161c600116151590565b3480156108a657600080fd5b506103516108b5366004611e33565b6001600160a01b0391909116600090815260096020526040902054600160ff9092161c16151590565b3480156108ea57600080fd5b506102dc6108f9366004611c1f565b600b6020526000908152604090205481565b34801561091757600080fd5b506102ad610926366004611b52565b611765565b34801561093757600080fd5b506102dc610946366004611b52565b6117e3565b7f0000000000000000000000000000000000000000000000000000000000000000156109ac57610987336000356001600160e01b031916611818565b6109ac5760405162461bcd60e51b81526004016109a390611e5f565b60405180910390fd5b6001600160a01b03919091166000908152600d60205260409020805460ff1916911515919091179055565b600080546109e490611e96565b80601f0160208091040260200160405190810160405280929190818152602001828054610a1090611e96565b8015610a5d5780601f10610a3257610100808354040283529160200191610a5d565b820191906000526020600020905b815481529060010190602001808311610a4057829003601f168201915b505050505081565b7f000000000000000000000000000000000000000000000000000000000000000015610abd57610aa1336000356001600160e01b031916611818565b610abd5760405162461bcd60e51b81526004016109a390611e5f565b600c55565b3360008181526004602090815260408083206001600160a01b038716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590610b1d9086815260200190565b60405180910390a35060015b92915050565b610b45336000356001600160e01b031916611818565b610b615760405162461bcd60e51b81526004016109a390611ed0565b8015610b91576001600160e01b031982166000908152600b602052604090208054600160ff86161b179055610bb8565b6001600160e01b031982166000908152600b602052604090208054600160ff86161b191690555b816001600160e01b0319168360ff167fbfe16b2c35ce23dfd1ab0e7b5d086a10060c9b52d1574e1680c881b3b3a2b15183604051610bfa911515815260200190565b60405180910390a3505050565b6000610b29610c1560115490565b610c1d610dc7565b8491906118c2565b6001600160a01b03831660009081526004602090815260408083203384529091528120546000198114610c8157610c5c8382611f0c565b6001600160a01b03861660009081526004602090815260408083203384529091529020555b6001600160a01b03851660009081526003602052604081208054859290610ca9908490611f0c565b90915550506001600160a01b038085166000818152600360205260409081902080548701905551909187169060008051602061205e83398151915290610cf29087815260200190565b60405180910390a360019150505b9392505050565b7f000000000000000000000000000000000000000000000000000000000000000015610d5f57610d43336000356001600160e01b031916611818565b610d5f5760405162461bcd60e51b81526004016109a390611e5f565b610d676118e0565b600e55565b60007f00000000000000000000000000000000000000000000000000000000000000004614610da257610d9d611911565b905090565b507f000000000000000000000000000000000000000000000000000000000000000090565b6000610dd16119ab565b601054610d9d9190611f1f565b7f000000000000000000000000000000000000000000000000000000000000000015610e3657610e1a336000356001600160e01b031916611818565b610e365760405162461bcd60e51b81526004016109a390611e5f565b336000908152600d602052604090205460ff16610e6f57600c54811115610e6f5760405162461bcd60e51b81526004016109a390611f32565b610e798282611a10565b5050565b7f000000000000000000000000000000000000000000000000000000000000000015610ed557610eb9336000356001600160e01b031916611818565b610ed55760405162461bcd60e51b81526004016109a390611e5f565b610edf3382611a6a565b50565b610ef8336000356001600160e01b031916611818565b610f145760405162461bcd60e51b81526004016109a390611ed0565b6001600160e01b031982166000818152600a6020908152604091829020805460ff191685151590811790915591519182527f36d28126bef21a4f3765d7fcb7c45cead463ae4c41094ef3b771ede598544103910160405180910390a25050565b610f8a336000356001600160e01b031916611818565b610fa65760405162461bcd60e51b81526004016109a390611ed0565b8015610fd5576001600160a01b03831660009081526009602052604090208054600160ff85161b179055610ffb565b6001600160a01b03831660009081526009602052604090208054600160ff85161b191690555b8160ff16836001600160a01b03167f4c9bdd0c8e073eb5eda2250b18d8e5121ff27b62064fbeeeed4869bb99bc5bf283604051610bfa911515815260200190565b60006110466118e0565b600061105e611053610dc7565b6011548591906118c2565b905061106b858583610c25565b50949350505050565b61108a336000356001600160e01b031916611818565b6110a65760405162461bcd60e51b81526004016109a390611ed0565b6001600160a01b0382811660008181526008602052604080822080546001600160a01b0319169486169485179055517fa4908e11a5f895b13d51526c331ac93cdd30e59772361c5d07874eb36bff20659190a35050565b6000610b2961110a610dc7565b601154610c1d565b6006546001600160a01b03163314806111a7575060075460405163b700961360e01b81526001600160a01b039091169063b70096139061116690339030906001600160e01b03196000351690600401611f74565b602060405180830381865afa158015611183573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111a79190611fa1565b6111b057600080fd5b600780546001600160a01b0319166001600160a01b03831690811790915560405133907fa3396fd7f6e0a21b50e5089d2da70d5ac0a3bbbd1f617a93f134b7638998019890600090a350565b60006112066118e0565b6000611213611053610dc7565b905061121f84826113bd565b509392505050565b600180546109e490611e96565b7f00000000000000000000000000000000000000000000000000000000000000001561128c57611270336000356001600160e01b031916611818565b61128c5760405162461bcd60e51b81526004016109a390611e5f565b610e798282611a6a565b7f0000000000000000000000000000000000000000000000000000000000000000156112ee576112d2336000356001600160e01b031916611818565b6112ee5760405162461bcd60e51b81526004016109a390611e5f565b336000908152600d602052604090205460ff1661132757600c548111156113275760405162461bcd60e51b81526004016109a390611f32565b610edf3382611a10565b600061133b6118e0565b60115460000361136257346011819055601081905561135b903390611a10565b5034919050565b600061138061137060115490565b611378610dc7565b3491906118c2565b905034601060008282546113949190611f1f565b9250508190555080601160008282546113ad9190611f1f565b90915550610b2990503334611a10565b336000908152600360205260408120805483919083906113de908490611f0c565b90915550506001600160a01b0383166000818152600360205260409081902080548501905551339060008051602061205e83398151915290610b1d9086815260200190565b6001600160a01b0380831660009081526008602052604081205490911680156114bf5760405163b700961360e01b81526001600160a01b0382169063b70096139061147690889088908890600401611f74565b602060405180830381865afa158015611493573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114b79190611fa1565b915050610d00565b6001600160e01b031983166000908152600a602052604090205460ff168061151857506001600160e01b031983166000908152600b60209081526040808320546001600160a01b03891684526009909252909120541615155b95945050505050565b428410156115715760405162461bcd60e51b815260206004820152601760248201527f5045524d49545f444541444c494e455f4558504952454400000000000000000060448201526064016109a3565b6000600161157d610d6c565b6001600160a01b038a811660008181526005602090815260409182902080546001810190915582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98184015280840194909452938d166060840152608083018c905260a083019390935260c08083018b90528151808403909101815260e08301909152805192019190912061190160f01b6101008301526101028201929092526101228101919091526101420160408051601f198184030181528282528051602091820120600084529083018083525260ff871690820152606081018590526080810184905260a0016020604051602081039080840390855afa158015611689573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116158015906116bf5750876001600160a01b0316816001600160a01b0316145b6116fc5760405162461bcd60e51b815260206004820152600e60248201526d24a72b20a624a22fa9a4a3a722a960911b60448201526064016109a3565b6001600160a01b0390811660009081526004602090815260408083208a8516808552908352928190208990555188815291928a16917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a350505050505050565b61177b336000356001600160e01b031916611818565b6117975760405162461bcd60e51b81526004016109a390611ed0565b600680546001600160a01b0319166001600160a01b03831690811790915560405133907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a350565b6001600160a01b038116600090815260036020526040812054610d0061180860115490565b611810610dc7565b8391906118c2565b6007546000906001600160a01b031680158015906118a2575060405163b700961360e01b81526001600160a01b0382169063b70096139061186190879030908890600401611f74565b602060405180830381865afa15801561187e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118a29190611fa1565b806118ba57506006546001600160a01b038581169116145b949350505050565b60008260001904841183021582026118d957600080fd5b5091020490565b60006118ea6119ab565b9050801561190a5780601060008282546119049190611f1f565b90915550505b5042600f55565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60006040516119439190611fbe565b6040805191829003822060208301939093528101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b6000600e546000036119bd5750600090565b600f544210156119cd5750600090565b60006119eb6301e13380600f54426119e59190611f0c565b90611acc565b90506000610d00611a0783600e54611ae190919063ffffffff16565b60105490611ae1565b8060026000828254611a229190611f1f565b90915550506001600160a01b03821660008181526003602090815260408083208054860190555184815260008051602061205e83398151915291015b60405180910390a35050565b6001600160a01b03821660009081526003602052604081208054839290611a92908490611f0c565b90915550506002805482900390556040518181526000906001600160a01b0384169060008051602061205e83398151915290602001611a5e565b6000610d0083670de0b6b3a7640000846118c2565b6000610d008383670de0b6b3a76400006118c2565b6001600160a01b0381168114610edf57600080fd5b8015158114610edf57600080fd5b60008060408385031215611b2c57600080fd5b8235611b3781611af6565b91506020830135611b4781611b0b565b809150509250929050565b600060208284031215611b6457600080fd5b8135610d0081611af6565b600060208083528351808285015260005b81811015611b9c57858101830151858201604001528201611b80565b506000604082860101526040601f19601f8301168501019250505092915050565b600060208284031215611bcf57600080fd5b5035919050565b60008060408385031215611be957600080fd5b8235611bf481611af6565b946020939093013593505050565b80356001600160e01b031981168114611c1a57600080fd5b919050565b600060208284031215611c3157600080fd5b610d0082611c02565b803560ff81168114611c1a57600080fd5b600080600060608486031215611c6057600080fd5b611c6984611c3a565b9250611c7760208501611c02565b91506040840135611c8781611b0b565b809150509250925092565b600080600060608486031215611ca757600080fd5b8335611cb281611af6565b92506020840135611cc281611af6565b929592945050506040919091013590565b60008060408385031215611ce657600080fd5b611b3783611c02565b600080600060608486031215611d0457600080fd5b8335611d0f81611af6565b9250611c7760208501611c3a565b60008060408385031215611d3057600080fd5b8235611d3b81611af6565b91506020830135611b4781611af6565b600080600060608486031215611d6057600080fd5b8335611d6b81611af6565b92506020840135611d7b81611af6565b9150611d8960408501611c02565b90509250925092565b600080600080600080600060e0888a031215611dad57600080fd5b8735611db881611af6565b96506020880135611dc881611af6565b95506040880135945060608801359350611de460808901611c3a565b925060a0880135915060c0880135905092959891949750929550565b60008060408385031215611e1357600080fd5b611e1c83611c3a565b9150611e2a60208401611c02565b90509250929050565b60008060408385031215611e4657600080fd5b8235611e5181611af6565b9150611e2a60208401611c3a565b6020808252601d908201527f45524332304d696e7461626c653a206e6f7420617574686f72697a6564000000604082015260600190565b600181811c90821680611eaa57607f821691505b602082108103611eca57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252600c908201526b15539055551213d49256915160a21b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b81810381811115610b2957610b29611ef6565b80820180821115610b2957610b29611ef6565b60208082526022908201527f45524332304d696e7461626c653a20496e76616c6964206d696e7420616d6f756040820152611b9d60f21b606082015260800190565b6001600160a01b0393841681529190921660208201526001600160e01b0319909116604082015260600190565b600060208284031215611fb357600080fd5b8151610d0081611b0b565b600080835481600182811c915080831680611fda57607f831692505b60208084108203611ff957634e487b7160e01b86526022600452602486fd5b81801561200d57600181146120225761204f565b60ff198616895284151585028901965061204f565b60008a81526020902060005b868110156120475781548b82015290850190830161202e565b505084890196505b50949897505050505050505056feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220fc3c712ddd13fc9c5ff0c6f29f11a6d5d8e16c4d24399d7fb995be24ab2601c264736f6c63430008140033"
)


class MockLidoContract(Contract):
    """A web3.py Contract class for the MockLido contract."""

    abi: ABI = mocklido_abi
    bytecode: bytes | None = try_bytecode_hexbytes(mocklido_bytecode, "mocklido")

    def __init__(self, address: ChecksumAddress | None = None) -> None:
        try:
            # Initialize parent Contract class
            super().__init__(address=address)
            self.functions = MockLidoContractFunctions(mocklido_abi, self.w3, address)  # type: ignore
            self.events = MockLidoContractEvents(mocklido_abi, self.w3, address)  # type: ignore

        except FallbackNotFound:
            print("Fallback function not found. Continuing...")

    events: MockLidoContractEvents

    functions: MockLidoContractFunctions

    class ConstructorArgs(NamedTuple):
        """Arguments to pass the contract's constructor function."""

        initialRate: int

        admin: str

        isCompetitionMode: bool

        maxMintAmount: int

    @classmethod
    def constructor(cls, initialRate: int, admin: str, isCompetitionMode: bool, maxMintAmount: int) -> ContractConstructor:  # type: ignore
        """Creates a transaction with the contract's constructor function.

        Parameters
        ----------

        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.

        """

        return super().constructor(
            dataclass_to_tuple(initialRate),
            dataclass_to_tuple(admin),
            dataclass_to_tuple(isCompetitionMode),
            dataclass_to_tuple(maxMintAmount),
        )

    @classmethod
    def deploy(cls, w3: Web3, account: LocalAccount | ChecksumAddress, constructorArgs: ConstructorArgs) -> Self:
        """Deploys and instance of the contract.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.
        """
        deployer = cls.factory(w3=w3)
        constructor_fn = deployer.constructor(*constructorArgs)

        # if an address is supplied, try to use a web3 default account
        if isinstance(account, str):
            tx_hash = constructor_fn.transact({"from": account})
            tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

            deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
            return deployed_contract

        # otherwise use the account provided.
        deployment_tx = constructor_fn.build_transaction()
        current_nonce = w3.eth.get_transaction_count(account.address, "pending")
        deployment_tx.update({"nonce": current_nonce})

        # Sign the transaction with local account private key
        signed_tx = account.sign_transaction(deployment_tx)

        # Send the signed transaction and wait for receipt
        tx_hash = w3.eth.send_raw_transaction(signed_tx.raw_transaction)
        tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

        deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
        return deployed_contract

    @classmethod
    def factory(cls, w3: Web3, class_name: str | None = None, **kwargs: Any) -> Type[Self]:
        """Deploys and instance of the contract.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        class_name: str | None
            The instance class name.

        Returns
        -------
        Self
            A deployed instance of the contract.
        """
        contract = super().factory(w3, class_name, **kwargs)
        contract.functions = MockLidoContractFunctions(mocklido_abi, w3, None)

        return contract
