"""A web3.py Contract class for the ERC4626HyperdriveDeployerCoordinator contract.

DO NOT EDIT.  This file was generated by pypechain.  See documentation at
https://github.com/delvtech/pypechain"""

# contracts have PascalCase names
# pylint: disable=invalid-name

# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments

# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return

# This file is bound to get very long depending on contract sizes.
# pylint: disable=too-many-lines

# methods are overriden with specific arguments instead of generic *args, **kwargs
# pylint: disable=arguments-differ

# consumers have too many opinions on line length
# pylint: disable=line-too-long


from __future__ import annotations

from typing import Any, NamedTuple, Type, cast

from eth_abi.codec import ABICodec
from eth_abi.registry import registry as default_registry
from eth_account.signers.local import LocalAccount
from eth_typing import ChecksumAddress, HexStr
from hexbytes import HexBytes
from typing_extensions import Self
from web3 import Web3
from web3.contract.contract import Contract, ContractConstructor, ContractFunction, ContractFunctions
from web3.exceptions import FallbackNotFound
from web3.types import ABI, ABIFunction, BlockIdentifier, CallOverride, TxParams

from .HyperdriveDeployerCoordinatorTypes import Deployment
from .IHyperdriveTypes import Fees, Options, PoolDeployConfig
from .utilities import dataclass_to_tuple, get_abi_input_types, rename_returned_types, try_bytecode_hexbytes

structs = {
    "Fees": Fees,
    "PoolDeployConfig": PoolDeployConfig,
    "Deployment": Deployment,
    "Options": Options,
}


class ERC4626HyperdriveDeployerCoordinatorCoreDeployerContractFunction(ContractFunction):
    """ContractFunction for the coreDeployer method."""

    def __call__(self) -> ERC4626HyperdriveDeployerCoordinatorCoreDeployerContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(str, rename_returned_types(structs, return_types, raw_values))


class ERC4626HyperdriveDeployerCoordinatorDeployHyperdriveContractFunction(ContractFunction):
    """ContractFunction for the deployHyperdrive method."""

    def __call__(self, deploymentId: bytes, name: str, deployConfig: PoolDeployConfig, extraData: bytes, salt: bytes) -> ERC4626HyperdriveDeployerCoordinatorDeployHyperdriveContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(deploymentId),
            dataclass_to_tuple(name),
            dataclass_to_tuple(deployConfig),
            dataclass_to_tuple(extraData),
            dataclass_to_tuple(salt),
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(str, rename_returned_types(structs, return_types, raw_values))


class ERC4626HyperdriveDeployerCoordinatorDeployTargetContractFunction(ContractFunction):
    """ContractFunction for the deployTarget method."""

    def __call__(self, deploymentId: bytes, deployConfig: PoolDeployConfig, extraData: bytes, targetIndex: int, salt: bytes) -> ERC4626HyperdriveDeployerCoordinatorDeployTargetContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(deploymentId),
            dataclass_to_tuple(deployConfig),
            dataclass_to_tuple(extraData),
            dataclass_to_tuple(targetIndex),
            dataclass_to_tuple(salt),
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(str, rename_returned_types(structs, return_types, raw_values))


class ERC4626HyperdriveDeployerCoordinatorDeploymentsContractFunction(ContractFunction):
    """ContractFunction for the deployments method."""

    def __call__(self, deploymentId: bytes) -> ERC4626HyperdriveDeployerCoordinatorDeploymentsContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(deploymentId))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> Deployment:
        """returns Deployment."""
        # Define the expected return types from the smart contract call

        return_types = Deployment

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(Deployment, rename_returned_types(structs, return_types, raw_values))


class ERC4626HyperdriveDeployerCoordinatorFactoryContractFunction(ContractFunction):
    """ContractFunction for the factory method."""

    def __call__(self) -> ERC4626HyperdriveDeployerCoordinatorFactoryContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(str, rename_returned_types(structs, return_types, raw_values))


class ERC4626HyperdriveDeployerCoordinatorGetNumberOfTargetsContractFunction(ContractFunction):
    """ContractFunction for the getNumberOfTargets method."""

    def __call__(self) -> ERC4626HyperdriveDeployerCoordinatorGetNumberOfTargetsContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(int, rename_returned_types(structs, return_types, raw_values))


class ERC4626HyperdriveDeployerCoordinatorInitializeContractFunction(ContractFunction):
    """ContractFunction for the initialize method."""

    def __call__(self, deploymentId: bytes, lp: str, contribution: int, apr: int, options: Options) -> ERC4626HyperdriveDeployerCoordinatorInitializeContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(deploymentId),
            dataclass_to_tuple(lp),
            dataclass_to_tuple(contribution),
            dataclass_to_tuple(apr),
            dataclass_to_tuple(options),
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(int, rename_returned_types(structs, return_types, raw_values))


class ERC4626HyperdriveDeployerCoordinatorKindContractFunction(ContractFunction):
    """ContractFunction for the kind method."""

    def __call__(self) -> ERC4626HyperdriveDeployerCoordinatorKindContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(str, rename_returned_types(structs, return_types, raw_values))


class ERC4626HyperdriveDeployerCoordinatorNameContractFunction(ContractFunction):
    """ContractFunction for the name method."""

    def __call__(self) -> ERC4626HyperdriveDeployerCoordinatorNameContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(str, rename_returned_types(structs, return_types, raw_values))


class ERC4626HyperdriveDeployerCoordinatorTarget0DeployerContractFunction(ContractFunction):
    """ContractFunction for the target0Deployer method."""

    def __call__(self) -> ERC4626HyperdriveDeployerCoordinatorTarget0DeployerContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(str, rename_returned_types(structs, return_types, raw_values))


class ERC4626HyperdriveDeployerCoordinatorTarget1DeployerContractFunction(ContractFunction):
    """ContractFunction for the target1Deployer method."""

    def __call__(self) -> ERC4626HyperdriveDeployerCoordinatorTarget1DeployerContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(str, rename_returned_types(structs, return_types, raw_values))


class ERC4626HyperdriveDeployerCoordinatorTarget2DeployerContractFunction(ContractFunction):
    """ContractFunction for the target2Deployer method."""

    def __call__(self) -> ERC4626HyperdriveDeployerCoordinatorTarget2DeployerContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(str, rename_returned_types(structs, return_types, raw_values))


class ERC4626HyperdriveDeployerCoordinatorTarget3DeployerContractFunction(ContractFunction):
    """ContractFunction for the target3Deployer method."""

    def __call__(self) -> ERC4626HyperdriveDeployerCoordinatorTarget3DeployerContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(str, rename_returned_types(structs, return_types, raw_values))


class ERC4626HyperdriveDeployerCoordinatorVersionContractFunction(ContractFunction):
    """ContractFunction for the version method."""

    def __call__(self) -> ERC4626HyperdriveDeployerCoordinatorVersionContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(str, rename_returned_types(structs, return_types, raw_values))


class ERC4626HyperdriveDeployerCoordinatorContractFunctions(ContractFunctions):
    """ContractFunctions for the ERC4626HyperdriveDeployerCoordinator contract."""

    coreDeployer: ERC4626HyperdriveDeployerCoordinatorCoreDeployerContractFunction

    deployHyperdrive: ERC4626HyperdriveDeployerCoordinatorDeployHyperdriveContractFunction

    deployTarget: ERC4626HyperdriveDeployerCoordinatorDeployTargetContractFunction

    deployments: ERC4626HyperdriveDeployerCoordinatorDeploymentsContractFunction

    factory: ERC4626HyperdriveDeployerCoordinatorFactoryContractFunction

    getNumberOfTargets: ERC4626HyperdriveDeployerCoordinatorGetNumberOfTargetsContractFunction

    initialize: ERC4626HyperdriveDeployerCoordinatorInitializeContractFunction

    kind: ERC4626HyperdriveDeployerCoordinatorKindContractFunction

    name: ERC4626HyperdriveDeployerCoordinatorNameContractFunction

    target0Deployer: ERC4626HyperdriveDeployerCoordinatorTarget0DeployerContractFunction

    target1Deployer: ERC4626HyperdriveDeployerCoordinatorTarget1DeployerContractFunction

    target2Deployer: ERC4626HyperdriveDeployerCoordinatorTarget2DeployerContractFunction

    target3Deployer: ERC4626HyperdriveDeployerCoordinatorTarget3DeployerContractFunction

    version: ERC4626HyperdriveDeployerCoordinatorVersionContractFunction

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
        decode_tuples: bool | None = False,
    ) -> None:
        super().__init__(abi, w3, address, decode_tuples)
        self.coreDeployer = ERC4626HyperdriveDeployerCoordinatorCoreDeployerContractFunction.factory(
            "coreDeployer",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="coreDeployer",
        )
        self.deployHyperdrive = ERC4626HyperdriveDeployerCoordinatorDeployHyperdriveContractFunction.factory(
            "deployHyperdrive",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="deployHyperdrive",
        )
        self.deployTarget = ERC4626HyperdriveDeployerCoordinatorDeployTargetContractFunction.factory(
            "deployTarget",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="deployTarget",
        )
        self.deployments = ERC4626HyperdriveDeployerCoordinatorDeploymentsContractFunction.factory(
            "deployments",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="deployments",
        )
        self.factory = ERC4626HyperdriveDeployerCoordinatorFactoryContractFunction.factory(
            "factory",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="factory",
        )
        self.getNumberOfTargets = ERC4626HyperdriveDeployerCoordinatorGetNumberOfTargetsContractFunction.factory(
            "getNumberOfTargets",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="getNumberOfTargets",
        )
        self.initialize = ERC4626HyperdriveDeployerCoordinatorInitializeContractFunction.factory(
            "initialize",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="initialize",
        )
        self.kind = ERC4626HyperdriveDeployerCoordinatorKindContractFunction.factory(
            "kind",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="kind",
        )
        self.name = ERC4626HyperdriveDeployerCoordinatorNameContractFunction.factory(
            "name",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="name",
        )
        self.target0Deployer = ERC4626HyperdriveDeployerCoordinatorTarget0DeployerContractFunction.factory(
            "target0Deployer",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="target0Deployer",
        )
        self.target1Deployer = ERC4626HyperdriveDeployerCoordinatorTarget1DeployerContractFunction.factory(
            "target1Deployer",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="target1Deployer",
        )
        self.target2Deployer = ERC4626HyperdriveDeployerCoordinatorTarget2DeployerContractFunction.factory(
            "target2Deployer",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="target2Deployer",
        )
        self.target3Deployer = ERC4626HyperdriveDeployerCoordinatorTarget3DeployerContractFunction.factory(
            "target3Deployer",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="target3Deployer",
        )
        self.version = ERC4626HyperdriveDeployerCoordinatorVersionContractFunction.factory(
            "version",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="version",
        )


class ERC4626HyperdriveDeployerCoordinatorAddressEmptyCodeContractError:
    """ContractError for AddressEmptyCode."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "ERC4626HyperdriveDeployerCoordinatorAddressEmptyCodeContractError",
    ) -> None:
        self.selector = "0x9996b315"
        self.signature = "AddressEmptyCode(address)"

    def decode_error_data(  # type: ignore
        self: "ERC4626HyperdriveDeployerCoordinatorAddressEmptyCodeContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in erc4626hyperdrivedeployercoordinator_abi
                if item.get("name") == "AddressEmptyCode" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["ERC4626HyperdriveDeployerCoordinatorAddressEmptyCodeContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in erc4626hyperdrivedeployercoordinator_abi
                if item.get("name") == "AddressEmptyCode" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class ERC4626HyperdriveDeployerCoordinatorAddressInsufficientBalanceContractError:
    """ContractError for AddressInsufficientBalance."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "ERC4626HyperdriveDeployerCoordinatorAddressInsufficientBalanceContractError",
    ) -> None:
        self.selector = "0xcd786059"
        self.signature = "AddressInsufficientBalance(address)"

    def decode_error_data(  # type: ignore
        self: "ERC4626HyperdriveDeployerCoordinatorAddressInsufficientBalanceContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in erc4626hyperdrivedeployercoordinator_abi
                if item.get("name") == "AddressInsufficientBalance" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["ERC4626HyperdriveDeployerCoordinatorAddressInsufficientBalanceContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in erc4626hyperdrivedeployercoordinator_abi
                if item.get("name") == "AddressInsufficientBalance" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class ERC4626HyperdriveDeployerCoordinatorDeploymentAlreadyExistsContractError:
    """ContractError for DeploymentAlreadyExists."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "ERC4626HyperdriveDeployerCoordinatorDeploymentAlreadyExistsContractError",
    ) -> None:
        self.selector = "0x77c3669a"
        self.signature = "DeploymentAlreadyExists()"

    def decode_error_data(  # type: ignore
        self: "ERC4626HyperdriveDeployerCoordinatorDeploymentAlreadyExistsContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in erc4626hyperdrivedeployercoordinator_abi
                if item.get("name") == "DeploymentAlreadyExists" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["ERC4626HyperdriveDeployerCoordinatorDeploymentAlreadyExistsContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in erc4626hyperdrivedeployercoordinator_abi
                if item.get("name") == "DeploymentAlreadyExists" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class ERC4626HyperdriveDeployerCoordinatorDeploymentDoesNotExistContractError:
    """ContractError for DeploymentDoesNotExist."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "ERC4626HyperdriveDeployerCoordinatorDeploymentDoesNotExistContractError",
    ) -> None:
        self.selector = "0xe62c7024"
        self.signature = "DeploymentDoesNotExist()"

    def decode_error_data(  # type: ignore
        self: "ERC4626HyperdriveDeployerCoordinatorDeploymentDoesNotExistContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in erc4626hyperdrivedeployercoordinator_abi
                if item.get("name") == "DeploymentDoesNotExist" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["ERC4626HyperdriveDeployerCoordinatorDeploymentDoesNotExistContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in erc4626hyperdrivedeployercoordinator_abi
                if item.get("name") == "DeploymentDoesNotExist" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class ERC4626HyperdriveDeployerCoordinatorFailedInnerCallContractError:
    """ContractError for FailedInnerCall."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "ERC4626HyperdriveDeployerCoordinatorFailedInnerCallContractError",
    ) -> None:
        self.selector = "0x1425ea42"
        self.signature = "FailedInnerCall()"

    def decode_error_data(  # type: ignore
        self: "ERC4626HyperdriveDeployerCoordinatorFailedInnerCallContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in erc4626hyperdrivedeployercoordinator_abi
                if item.get("name") == "FailedInnerCall" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["ERC4626HyperdriveDeployerCoordinatorFailedInnerCallContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in erc4626hyperdrivedeployercoordinator_abi
                if item.get("name") == "FailedInnerCall" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class ERC4626HyperdriveDeployerCoordinatorHyperdriveAlreadyDeployedContractError:
    """ContractError for HyperdriveAlreadyDeployed."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "ERC4626HyperdriveDeployerCoordinatorHyperdriveAlreadyDeployedContractError",
    ) -> None:
        self.selector = "0x2c95caeb"
        self.signature = "HyperdriveAlreadyDeployed()"

    def decode_error_data(  # type: ignore
        self: "ERC4626HyperdriveDeployerCoordinatorHyperdriveAlreadyDeployedContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in erc4626hyperdrivedeployercoordinator_abi
                if item.get("name") == "HyperdriveAlreadyDeployed" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["ERC4626HyperdriveDeployerCoordinatorHyperdriveAlreadyDeployedContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in erc4626hyperdrivedeployercoordinator_abi
                if item.get("name") == "HyperdriveAlreadyDeployed" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class ERC4626HyperdriveDeployerCoordinatorHyperdriveIsNotDeployedContractError:
    """ContractError for HyperdriveIsNotDeployed."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "ERC4626HyperdriveDeployerCoordinatorHyperdriveIsNotDeployedContractError",
    ) -> None:
        self.selector = "0x952b05cb"
        self.signature = "HyperdriveIsNotDeployed()"

    def decode_error_data(  # type: ignore
        self: "ERC4626HyperdriveDeployerCoordinatorHyperdriveIsNotDeployedContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in erc4626hyperdrivedeployercoordinator_abi
                if item.get("name") == "HyperdriveIsNotDeployed" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["ERC4626HyperdriveDeployerCoordinatorHyperdriveIsNotDeployedContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in erc4626hyperdrivedeployercoordinator_abi
                if item.get("name") == "HyperdriveIsNotDeployed" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class ERC4626HyperdriveDeployerCoordinatorIncompleteDeploymentContractError:
    """ContractError for IncompleteDeployment."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "ERC4626HyperdriveDeployerCoordinatorIncompleteDeploymentContractError",
    ) -> None:
        self.selector = "0xe97cc2bf"
        self.signature = "IncompleteDeployment()"

    def decode_error_data(  # type: ignore
        self: "ERC4626HyperdriveDeployerCoordinatorIncompleteDeploymentContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in erc4626hyperdrivedeployercoordinator_abi
                if item.get("name") == "IncompleteDeployment" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["ERC4626HyperdriveDeployerCoordinatorIncompleteDeploymentContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in erc4626hyperdrivedeployercoordinator_abi
                if item.get("name") == "IncompleteDeployment" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class ERC4626HyperdriveDeployerCoordinatorInsufficientValueContractError:
    """ContractError for InsufficientValue."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "ERC4626HyperdriveDeployerCoordinatorInsufficientValueContractError",
    ) -> None:
        self.selector = "0x11011294"
        self.signature = "InsufficientValue()"

    def decode_error_data(  # type: ignore
        self: "ERC4626HyperdriveDeployerCoordinatorInsufficientValueContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in erc4626hyperdrivedeployercoordinator_abi
                if item.get("name") == "InsufficientValue" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["ERC4626HyperdriveDeployerCoordinatorInsufficientValueContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in erc4626hyperdrivedeployercoordinator_abi
                if item.get("name") == "InsufficientValue" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class ERC4626HyperdriveDeployerCoordinatorInvalidBaseTokenContractError:
    """ContractError for InvalidBaseToken."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "ERC4626HyperdriveDeployerCoordinatorInvalidBaseTokenContractError",
    ) -> None:
        self.selector = "0x0e442a4a"
        self.signature = "InvalidBaseToken()"

    def decode_error_data(  # type: ignore
        self: "ERC4626HyperdriveDeployerCoordinatorInvalidBaseTokenContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in erc4626hyperdrivedeployercoordinator_abi
                if item.get("name") == "InvalidBaseToken" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["ERC4626HyperdriveDeployerCoordinatorInvalidBaseTokenContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in erc4626hyperdrivedeployercoordinator_abi
                if item.get("name") == "InvalidBaseToken" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class ERC4626HyperdriveDeployerCoordinatorInvalidCheckpointDurationContractError:
    """ContractError for InvalidCheckpointDuration."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "ERC4626HyperdriveDeployerCoordinatorInvalidCheckpointDurationContractError",
    ) -> None:
        self.selector = "0x5428734d"
        self.signature = "InvalidCheckpointDuration()"

    def decode_error_data(  # type: ignore
        self: "ERC4626HyperdriveDeployerCoordinatorInvalidCheckpointDurationContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in erc4626hyperdrivedeployercoordinator_abi
                if item.get("name") == "InvalidCheckpointDuration" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["ERC4626HyperdriveDeployerCoordinatorInvalidCheckpointDurationContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in erc4626hyperdrivedeployercoordinator_abi
                if item.get("name") == "InvalidCheckpointDuration" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class ERC4626HyperdriveDeployerCoordinatorInvalidFeeAmountsContractError:
    """ContractError for InvalidFeeAmounts."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "ERC4626HyperdriveDeployerCoordinatorInvalidFeeAmountsContractError",
    ) -> None:
        self.selector = "0x45ee5986"
        self.signature = "InvalidFeeAmounts()"

    def decode_error_data(  # type: ignore
        self: "ERC4626HyperdriveDeployerCoordinatorInvalidFeeAmountsContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in erc4626hyperdrivedeployercoordinator_abi
                if item.get("name") == "InvalidFeeAmounts" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["ERC4626HyperdriveDeployerCoordinatorInvalidFeeAmountsContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in erc4626hyperdrivedeployercoordinator_abi
                if item.get("name") == "InvalidFeeAmounts" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class ERC4626HyperdriveDeployerCoordinatorInvalidMinimumShareReservesContractError:
    """ContractError for InvalidMinimumShareReserves."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "ERC4626HyperdriveDeployerCoordinatorInvalidMinimumShareReservesContractError",
    ) -> None:
        self.selector = "0x49db44f5"
        self.signature = "InvalidMinimumShareReserves()"

    def decode_error_data(  # type: ignore
        self: "ERC4626HyperdriveDeployerCoordinatorInvalidMinimumShareReservesContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in erc4626hyperdrivedeployercoordinator_abi
                if item.get("name") == "InvalidMinimumShareReserves" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["ERC4626HyperdriveDeployerCoordinatorInvalidMinimumShareReservesContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in erc4626hyperdrivedeployercoordinator_abi
                if item.get("name") == "InvalidMinimumShareReserves" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class ERC4626HyperdriveDeployerCoordinatorInvalidMinimumTransactionAmountContractError:
    """ContractError for InvalidMinimumTransactionAmount."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "ERC4626HyperdriveDeployerCoordinatorInvalidMinimumTransactionAmountContractError",
    ) -> None:
        self.selector = "0x3192a446"
        self.signature = "InvalidMinimumTransactionAmount()"

    def decode_error_data(  # type: ignore
        self: "ERC4626HyperdriveDeployerCoordinatorInvalidMinimumTransactionAmountContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in erc4626hyperdrivedeployercoordinator_abi
                if item.get("name") == "InvalidMinimumTransactionAmount" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["ERC4626HyperdriveDeployerCoordinatorInvalidMinimumTransactionAmountContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in erc4626hyperdrivedeployercoordinator_abi
                if item.get("name") == "InvalidMinimumTransactionAmount" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class ERC4626HyperdriveDeployerCoordinatorInvalidPositionDurationContractError:
    """ContractError for InvalidPositionDuration."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "ERC4626HyperdriveDeployerCoordinatorInvalidPositionDurationContractError",
    ) -> None:
        self.selector = "0x4a7fff9e"
        self.signature = "InvalidPositionDuration()"

    def decode_error_data(  # type: ignore
        self: "ERC4626HyperdriveDeployerCoordinatorInvalidPositionDurationContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in erc4626hyperdrivedeployercoordinator_abi
                if item.get("name") == "InvalidPositionDuration" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["ERC4626HyperdriveDeployerCoordinatorInvalidPositionDurationContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in erc4626hyperdrivedeployercoordinator_abi
                if item.get("name") == "InvalidPositionDuration" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class ERC4626HyperdriveDeployerCoordinatorInvalidTargetIndexContractError:
    """ContractError for InvalidTargetIndex."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "ERC4626HyperdriveDeployerCoordinatorInvalidTargetIndexContractError",
    ) -> None:
        self.selector = "0x3b3f02b2"
        self.signature = "InvalidTargetIndex()"

    def decode_error_data(  # type: ignore
        self: "ERC4626HyperdriveDeployerCoordinatorInvalidTargetIndexContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in erc4626hyperdrivedeployercoordinator_abi
                if item.get("name") == "InvalidTargetIndex" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["ERC4626HyperdriveDeployerCoordinatorInvalidTargetIndexContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in erc4626hyperdrivedeployercoordinator_abi
                if item.get("name") == "InvalidTargetIndex" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class ERC4626HyperdriveDeployerCoordinatorInvalidVaultSharesTokenContractError:
    """ContractError for InvalidVaultSharesToken."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "ERC4626HyperdriveDeployerCoordinatorInvalidVaultSharesTokenContractError",
    ) -> None:
        self.selector = "0xe7ee73a0"
        self.signature = "InvalidVaultSharesToken()"

    def decode_error_data(  # type: ignore
        self: "ERC4626HyperdriveDeployerCoordinatorInvalidVaultSharesTokenContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in erc4626hyperdrivedeployercoordinator_abi
                if item.get("name") == "InvalidVaultSharesToken" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["ERC4626HyperdriveDeployerCoordinatorInvalidVaultSharesTokenContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in erc4626hyperdrivedeployercoordinator_abi
                if item.get("name") == "InvalidVaultSharesToken" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class ERC4626HyperdriveDeployerCoordinatorMismatchedConfigContractError:
    """ContractError for MismatchedConfig."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "ERC4626HyperdriveDeployerCoordinatorMismatchedConfigContractError",
    ) -> None:
        self.selector = "0x332ee11f"
        self.signature = "MismatchedConfig()"

    def decode_error_data(  # type: ignore
        self: "ERC4626HyperdriveDeployerCoordinatorMismatchedConfigContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in erc4626hyperdrivedeployercoordinator_abi
                if item.get("name") == "MismatchedConfig" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["ERC4626HyperdriveDeployerCoordinatorMismatchedConfigContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in erc4626hyperdrivedeployercoordinator_abi
                if item.get("name") == "MismatchedConfig" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class ERC4626HyperdriveDeployerCoordinatorMismatchedExtraDataContractError:
    """ContractError for MismatchedExtraData."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "ERC4626HyperdriveDeployerCoordinatorMismatchedExtraDataContractError",
    ) -> None:
        self.selector = "0xd1939688"
        self.signature = "MismatchedExtraData()"

    def decode_error_data(  # type: ignore
        self: "ERC4626HyperdriveDeployerCoordinatorMismatchedExtraDataContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in erc4626hyperdrivedeployercoordinator_abi
                if item.get("name") == "MismatchedExtraData" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["ERC4626HyperdriveDeployerCoordinatorMismatchedExtraDataContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in erc4626hyperdrivedeployercoordinator_abi
                if item.get("name") == "MismatchedExtraData" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class ERC4626HyperdriveDeployerCoordinatorNotPayableContractError:
    """ContractError for NotPayable."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "ERC4626HyperdriveDeployerCoordinatorNotPayableContractError",
    ) -> None:
        self.selector = "0x1574f9f3"
        self.signature = "NotPayable()"

    def decode_error_data(  # type: ignore
        self: "ERC4626HyperdriveDeployerCoordinatorNotPayableContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in erc4626hyperdrivedeployercoordinator_abi
                if item.get("name") == "NotPayable" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["ERC4626HyperdriveDeployerCoordinatorNotPayableContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in erc4626hyperdrivedeployercoordinator_abi
                if item.get("name") == "NotPayable" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class ERC4626HyperdriveDeployerCoordinatorSafeERC20FailedOperationContractError:
    """ContractError for SafeERC20FailedOperation."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "ERC4626HyperdriveDeployerCoordinatorSafeERC20FailedOperationContractError",
    ) -> None:
        self.selector = "0x5274afe7"
        self.signature = "SafeERC20FailedOperation(address)"

    def decode_error_data(  # type: ignore
        self: "ERC4626HyperdriveDeployerCoordinatorSafeERC20FailedOperationContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in erc4626hyperdrivedeployercoordinator_abi
                if item.get("name") == "SafeERC20FailedOperation" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["ERC4626HyperdriveDeployerCoordinatorSafeERC20FailedOperationContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in erc4626hyperdrivedeployercoordinator_abi
                if item.get("name") == "SafeERC20FailedOperation" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class ERC4626HyperdriveDeployerCoordinatorSenderIsNotFactoryContractError:
    """ContractError for SenderIsNotFactory."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "ERC4626HyperdriveDeployerCoordinatorSenderIsNotFactoryContractError",
    ) -> None:
        self.selector = "0x40843511"
        self.signature = "SenderIsNotFactory()"

    def decode_error_data(  # type: ignore
        self: "ERC4626HyperdriveDeployerCoordinatorSenderIsNotFactoryContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in erc4626hyperdrivedeployercoordinator_abi
                if item.get("name") == "SenderIsNotFactory" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["ERC4626HyperdriveDeployerCoordinatorSenderIsNotFactoryContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in erc4626hyperdrivedeployercoordinator_abi
                if item.get("name") == "SenderIsNotFactory" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class ERC4626HyperdriveDeployerCoordinatorTargetAlreadyDeployedContractError:
    """ContractError for TargetAlreadyDeployed."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "ERC4626HyperdriveDeployerCoordinatorTargetAlreadyDeployedContractError",
    ) -> None:
        self.selector = "0x0744b578"
        self.signature = "TargetAlreadyDeployed()"

    def decode_error_data(  # type: ignore
        self: "ERC4626HyperdriveDeployerCoordinatorTargetAlreadyDeployedContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in erc4626hyperdrivedeployercoordinator_abi
                if item.get("name") == "TargetAlreadyDeployed" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["ERC4626HyperdriveDeployerCoordinatorTargetAlreadyDeployedContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in erc4626hyperdrivedeployercoordinator_abi
                if item.get("name") == "TargetAlreadyDeployed" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class ERC4626HyperdriveDeployerCoordinatorTransferFailedContractError:
    """ContractError for TransferFailed."""

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # 4 byte error selector
    selector: str
    # error signature, i.e. CustomError(uint256,bool)
    signature: str

    # pylint: disable=useless-parent-delegation
    def __init__(
        self: "ERC4626HyperdriveDeployerCoordinatorTransferFailedContractError",
    ) -> None:
        self.selector = "0x90b8ec18"
        self.signature = "TransferFailed()"

    def decode_error_data(  # type: ignore
        self: "ERC4626HyperdriveDeployerCoordinatorTransferFailedContractError",
        data: HexBytes,
        # TODO: instead of returning a tuple, return a dataclass with the input names and types just like we do for functions
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in erc4626hyperdrivedeployercoordinator_abi
                if item.get("name") == "TransferFailed" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded

    @classmethod
    def decode_error_data(  # type: ignore
        cls: Type["ERC4626HyperdriveDeployerCoordinatorTransferFailedContractError"],
        data: HexBytes,
    ) -> tuple[Any, ...]:
        """Decodes error data returns from a smart contract."""
        error_abi = cast(
            ABIFunction,
            [
                item
                for item in erc4626hyperdrivedeployercoordinator_abi
                if item.get("name") == "TransferFailed" and item.get("type") == "error"
            ][0],
        )
        types = get_abi_input_types(error_abi)
        abi_codec = ABICodec(default_registry)
        decoded = abi_codec.decode(types, data)
        return decoded


class ERC4626HyperdriveDeployerCoordinatorContractErrors:
    """ContractErrors for the ERC4626HyperdriveDeployerCoordinator contract."""

    AddressEmptyCode: ERC4626HyperdriveDeployerCoordinatorAddressEmptyCodeContractError

    AddressInsufficientBalance: ERC4626HyperdriveDeployerCoordinatorAddressInsufficientBalanceContractError

    DeploymentAlreadyExists: ERC4626HyperdriveDeployerCoordinatorDeploymentAlreadyExistsContractError

    DeploymentDoesNotExist: ERC4626HyperdriveDeployerCoordinatorDeploymentDoesNotExistContractError

    FailedInnerCall: ERC4626HyperdriveDeployerCoordinatorFailedInnerCallContractError

    HyperdriveAlreadyDeployed: ERC4626HyperdriveDeployerCoordinatorHyperdriveAlreadyDeployedContractError

    HyperdriveIsNotDeployed: ERC4626HyperdriveDeployerCoordinatorHyperdriveIsNotDeployedContractError

    IncompleteDeployment: ERC4626HyperdriveDeployerCoordinatorIncompleteDeploymentContractError

    InsufficientValue: ERC4626HyperdriveDeployerCoordinatorInsufficientValueContractError

    InvalidBaseToken: ERC4626HyperdriveDeployerCoordinatorInvalidBaseTokenContractError

    InvalidCheckpointDuration: ERC4626HyperdriveDeployerCoordinatorInvalidCheckpointDurationContractError

    InvalidFeeAmounts: ERC4626HyperdriveDeployerCoordinatorInvalidFeeAmountsContractError

    InvalidMinimumShareReserves: ERC4626HyperdriveDeployerCoordinatorInvalidMinimumShareReservesContractError

    InvalidMinimumTransactionAmount: ERC4626HyperdriveDeployerCoordinatorInvalidMinimumTransactionAmountContractError

    InvalidPositionDuration: ERC4626HyperdriveDeployerCoordinatorInvalidPositionDurationContractError

    InvalidTargetIndex: ERC4626HyperdriveDeployerCoordinatorInvalidTargetIndexContractError

    InvalidVaultSharesToken: ERC4626HyperdriveDeployerCoordinatorInvalidVaultSharesTokenContractError

    MismatchedConfig: ERC4626HyperdriveDeployerCoordinatorMismatchedConfigContractError

    MismatchedExtraData: ERC4626HyperdriveDeployerCoordinatorMismatchedExtraDataContractError

    NotPayable: ERC4626HyperdriveDeployerCoordinatorNotPayableContractError

    SafeERC20FailedOperation: ERC4626HyperdriveDeployerCoordinatorSafeERC20FailedOperationContractError

    SenderIsNotFactory: ERC4626HyperdriveDeployerCoordinatorSenderIsNotFactoryContractError

    TargetAlreadyDeployed: ERC4626HyperdriveDeployerCoordinatorTargetAlreadyDeployedContractError

    TransferFailed: ERC4626HyperdriveDeployerCoordinatorTransferFailedContractError

    def __init__(
        self,
    ) -> None:
        self.AddressEmptyCode = ERC4626HyperdriveDeployerCoordinatorAddressEmptyCodeContractError()
        self.AddressInsufficientBalance = ERC4626HyperdriveDeployerCoordinatorAddressInsufficientBalanceContractError()
        self.DeploymentAlreadyExists = ERC4626HyperdriveDeployerCoordinatorDeploymentAlreadyExistsContractError()
        self.DeploymentDoesNotExist = ERC4626HyperdriveDeployerCoordinatorDeploymentDoesNotExistContractError()
        self.FailedInnerCall = ERC4626HyperdriveDeployerCoordinatorFailedInnerCallContractError()
        self.HyperdriveAlreadyDeployed = ERC4626HyperdriveDeployerCoordinatorHyperdriveAlreadyDeployedContractError()
        self.HyperdriveIsNotDeployed = ERC4626HyperdriveDeployerCoordinatorHyperdriveIsNotDeployedContractError()
        self.IncompleteDeployment = ERC4626HyperdriveDeployerCoordinatorIncompleteDeploymentContractError()
        self.InsufficientValue = ERC4626HyperdriveDeployerCoordinatorInsufficientValueContractError()
        self.InvalidBaseToken = ERC4626HyperdriveDeployerCoordinatorInvalidBaseTokenContractError()
        self.InvalidCheckpointDuration = ERC4626HyperdriveDeployerCoordinatorInvalidCheckpointDurationContractError()
        self.InvalidFeeAmounts = ERC4626HyperdriveDeployerCoordinatorInvalidFeeAmountsContractError()
        self.InvalidMinimumShareReserves = (
            ERC4626HyperdriveDeployerCoordinatorInvalidMinimumShareReservesContractError()
        )
        self.InvalidMinimumTransactionAmount = (
            ERC4626HyperdriveDeployerCoordinatorInvalidMinimumTransactionAmountContractError()
        )
        self.InvalidPositionDuration = ERC4626HyperdriveDeployerCoordinatorInvalidPositionDurationContractError()
        self.InvalidTargetIndex = ERC4626HyperdriveDeployerCoordinatorInvalidTargetIndexContractError()
        self.InvalidVaultSharesToken = ERC4626HyperdriveDeployerCoordinatorInvalidVaultSharesTokenContractError()
        self.MismatchedConfig = ERC4626HyperdriveDeployerCoordinatorMismatchedConfigContractError()
        self.MismatchedExtraData = ERC4626HyperdriveDeployerCoordinatorMismatchedExtraDataContractError()
        self.NotPayable = ERC4626HyperdriveDeployerCoordinatorNotPayableContractError()
        self.SafeERC20FailedOperation = ERC4626HyperdriveDeployerCoordinatorSafeERC20FailedOperationContractError()
        self.SenderIsNotFactory = ERC4626HyperdriveDeployerCoordinatorSenderIsNotFactoryContractError()
        self.TargetAlreadyDeployed = ERC4626HyperdriveDeployerCoordinatorTargetAlreadyDeployedContractError()
        self.TransferFailed = ERC4626HyperdriveDeployerCoordinatorTransferFailedContractError()

        self._all = [
            self.AddressEmptyCode,
            self.AddressInsufficientBalance,
            self.DeploymentAlreadyExists,
            self.DeploymentDoesNotExist,
            self.FailedInnerCall,
            self.HyperdriveAlreadyDeployed,
            self.HyperdriveIsNotDeployed,
            self.IncompleteDeployment,
            self.InsufficientValue,
            self.InvalidBaseToken,
            self.InvalidCheckpointDuration,
            self.InvalidFeeAmounts,
            self.InvalidMinimumShareReserves,
            self.InvalidMinimumTransactionAmount,
            self.InvalidPositionDuration,
            self.InvalidTargetIndex,
            self.InvalidVaultSharesToken,
            self.MismatchedConfig,
            self.MismatchedExtraData,
            self.NotPayable,
            self.SafeERC20FailedOperation,
            self.SenderIsNotFactory,
            self.TargetAlreadyDeployed,
            self.TransferFailed,
        ]

    def decode_custom_error(self, data: str) -> tuple[Any, ...]:
        """Decodes a custom contract error."""
        selector = data[:10]
        for err in self._all:
            if err.selector == selector:
                return err.decode_error_data(HexBytes(data[10:]))

        raise ValueError(f"ERC4626HyperdriveDeployerCoordinator does not have a selector matching {selector}")


erc4626hyperdrivedeployercoordinator_abi: ABI = cast(
    ABI,
    [
        {
            "type": "constructor",
            "inputs": [
                {"name": "_name", "type": "string", "internalType": "string"},
                {"name": "_factory", "type": "address", "internalType": "address"},
                {"name": "_coreDeployer", "type": "address", "internalType": "address"},
                {"name": "_target0Deployer", "type": "address", "internalType": "address"},
                {"name": "_target1Deployer", "type": "address", "internalType": "address"},
                {"name": "_target2Deployer", "type": "address", "internalType": "address"},
                {"name": "_target3Deployer", "type": "address", "internalType": "address"},
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "coreDeployer",
            "inputs": [],
            "outputs": [{"name": "", "type": "address", "internalType": "address"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "deployHyperdrive",
            "inputs": [
                {"name": "_deploymentId", "type": "bytes32", "internalType": "bytes32"},
                {"name": "__name", "type": "string", "internalType": "string"},
                {
                    "name": "_deployConfig",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.PoolDeployConfig",
                    "components": [
                        {"name": "baseToken", "type": "address", "internalType": "contract IERC20"},
                        {"name": "vaultSharesToken", "type": "address", "internalType": "contract IERC20"},
                        {"name": "linkerFactory", "type": "address", "internalType": "address"},
                        {"name": "linkerCodeHash", "type": "bytes32", "internalType": "bytes32"},
                        {"name": "minimumShareReserves", "type": "uint256", "internalType": "uint256"},
                        {"name": "minimumTransactionAmount", "type": "uint256", "internalType": "uint256"},
                        {"name": "circuitBreakerDelta", "type": "uint256", "internalType": "uint256"},
                        {"name": "positionDuration", "type": "uint256", "internalType": "uint256"},
                        {"name": "checkpointDuration", "type": "uint256", "internalType": "uint256"},
                        {"name": "timeStretch", "type": "uint256", "internalType": "uint256"},
                        {"name": "governance", "type": "address", "internalType": "address"},
                        {"name": "feeCollector", "type": "address", "internalType": "address"},
                        {"name": "sweepCollector", "type": "address", "internalType": "address"},
                        {"name": "checkpointRewarder", "type": "address", "internalType": "address"},
                        {
                            "name": "fees",
                            "type": "tuple",
                            "internalType": "struct IHyperdrive.Fees",
                            "components": [
                                {"name": "curve", "type": "uint256", "internalType": "uint256"},
                                {"name": "flat", "type": "uint256", "internalType": "uint256"},
                                {"name": "governanceLP", "type": "uint256", "internalType": "uint256"},
                                {"name": "governanceZombie", "type": "uint256", "internalType": "uint256"},
                            ],
                        },
                    ],
                },
                {"name": "_extraData", "type": "bytes", "internalType": "bytes"},
                {"name": "_salt", "type": "bytes32", "internalType": "bytes32"},
            ],
            "outputs": [{"name": "", "type": "address", "internalType": "address"}],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "deployTarget",
            "inputs": [
                {"name": "_deploymentId", "type": "bytes32", "internalType": "bytes32"},
                {
                    "name": "_deployConfig",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.PoolDeployConfig",
                    "components": [
                        {"name": "baseToken", "type": "address", "internalType": "contract IERC20"},
                        {"name": "vaultSharesToken", "type": "address", "internalType": "contract IERC20"},
                        {"name": "linkerFactory", "type": "address", "internalType": "address"},
                        {"name": "linkerCodeHash", "type": "bytes32", "internalType": "bytes32"},
                        {"name": "minimumShareReserves", "type": "uint256", "internalType": "uint256"},
                        {"name": "minimumTransactionAmount", "type": "uint256", "internalType": "uint256"},
                        {"name": "circuitBreakerDelta", "type": "uint256", "internalType": "uint256"},
                        {"name": "positionDuration", "type": "uint256", "internalType": "uint256"},
                        {"name": "checkpointDuration", "type": "uint256", "internalType": "uint256"},
                        {"name": "timeStretch", "type": "uint256", "internalType": "uint256"},
                        {"name": "governance", "type": "address", "internalType": "address"},
                        {"name": "feeCollector", "type": "address", "internalType": "address"},
                        {"name": "sweepCollector", "type": "address", "internalType": "address"},
                        {"name": "checkpointRewarder", "type": "address", "internalType": "address"},
                        {
                            "name": "fees",
                            "type": "tuple",
                            "internalType": "struct IHyperdrive.Fees",
                            "components": [
                                {"name": "curve", "type": "uint256", "internalType": "uint256"},
                                {"name": "flat", "type": "uint256", "internalType": "uint256"},
                                {"name": "governanceLP", "type": "uint256", "internalType": "uint256"},
                                {"name": "governanceZombie", "type": "uint256", "internalType": "uint256"},
                            ],
                        },
                    ],
                },
                {"name": "_extraData", "type": "bytes", "internalType": "bytes"},
                {"name": "_targetIndex", "type": "uint256", "internalType": "uint256"},
                {"name": "_salt", "type": "bytes32", "internalType": "bytes32"},
            ],
            "outputs": [{"name": "target", "type": "address", "internalType": "address"}],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "deployments",
            "inputs": [{"name": "_deploymentId", "type": "bytes32", "internalType": "bytes32"}],
            "outputs": [
                {
                    "name": "",
                    "type": "tuple",
                    "internalType": "struct HyperdriveDeployerCoordinator.Deployment",
                    "components": [
                        {"name": "configHash", "type": "bytes32", "internalType": "bytes32"},
                        {"name": "extraDataHash", "type": "bytes32", "internalType": "bytes32"},
                        {"name": "initialSharePrice", "type": "uint256", "internalType": "uint256"},
                        {"name": "hyperdrive", "type": "address", "internalType": "address"},
                        {"name": "target0", "type": "address", "internalType": "address"},
                        {"name": "target1", "type": "address", "internalType": "address"},
                        {"name": "target2", "type": "address", "internalType": "address"},
                        {"name": "target3", "type": "address", "internalType": "address"},
                    ],
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "factory",
            "inputs": [],
            "outputs": [{"name": "", "type": "address", "internalType": "address"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getNumberOfTargets",
            "inputs": [],
            "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "initialize",
            "inputs": [
                {"name": "_deploymentId", "type": "bytes32", "internalType": "bytes32"},
                {"name": "_lp", "type": "address", "internalType": "address"},
                {"name": "_contribution", "type": "uint256", "internalType": "uint256"},
                {"name": "_apr", "type": "uint256", "internalType": "uint256"},
                {
                    "name": "_options",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.Options",
                    "components": [
                        {"name": "destination", "type": "address", "internalType": "address"},
                        {"name": "asBase", "type": "bool", "internalType": "bool"},
                        {"name": "extraData", "type": "bytes", "internalType": "bytes"},
                    ],
                },
            ],
            "outputs": [{"name": "lpShares", "type": "uint256", "internalType": "uint256"}],
            "stateMutability": "payable",
        },
        {
            "type": "function",
            "name": "kind",
            "inputs": [],
            "outputs": [{"name": "", "type": "string", "internalType": "string"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "name",
            "inputs": [],
            "outputs": [{"name": "", "type": "string", "internalType": "string"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "target0Deployer",
            "inputs": [],
            "outputs": [{"name": "", "type": "address", "internalType": "address"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "target1Deployer",
            "inputs": [],
            "outputs": [{"name": "", "type": "address", "internalType": "address"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "target2Deployer",
            "inputs": [],
            "outputs": [{"name": "", "type": "address", "internalType": "address"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "target3Deployer",
            "inputs": [],
            "outputs": [{"name": "", "type": "address", "internalType": "address"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "version",
            "inputs": [],
            "outputs": [{"name": "", "type": "string", "internalType": "string"}],
            "stateMutability": "pure",
        },
        {
            "type": "error",
            "name": "AddressEmptyCode",
            "inputs": [{"name": "target", "type": "address", "internalType": "address"}],
        },
        {
            "type": "error",
            "name": "AddressInsufficientBalance",
            "inputs": [{"name": "account", "type": "address", "internalType": "address"}],
        },
        {"type": "error", "name": "DeploymentAlreadyExists", "inputs": []},
        {"type": "error", "name": "DeploymentDoesNotExist", "inputs": []},
        {"type": "error", "name": "FailedInnerCall", "inputs": []},
        {"type": "error", "name": "HyperdriveAlreadyDeployed", "inputs": []},
        {"type": "error", "name": "HyperdriveIsNotDeployed", "inputs": []},
        {"type": "error", "name": "IncompleteDeployment", "inputs": []},
        {"type": "error", "name": "InsufficientValue", "inputs": []},
        {"type": "error", "name": "InvalidBaseToken", "inputs": []},
        {"type": "error", "name": "InvalidCheckpointDuration", "inputs": []},
        {"type": "error", "name": "InvalidFeeAmounts", "inputs": []},
        {"type": "error", "name": "InvalidMinimumShareReserves", "inputs": []},
        {"type": "error", "name": "InvalidMinimumTransactionAmount", "inputs": []},
        {"type": "error", "name": "InvalidPositionDuration", "inputs": []},
        {"type": "error", "name": "InvalidTargetIndex", "inputs": []},
        {"type": "error", "name": "InvalidVaultSharesToken", "inputs": []},
        {"type": "error", "name": "MismatchedConfig", "inputs": []},
        {"type": "error", "name": "MismatchedExtraData", "inputs": []},
        {"type": "error", "name": "NotPayable", "inputs": []},
        {
            "type": "error",
            "name": "SafeERC20FailedOperation",
            "inputs": [{"name": "token", "type": "address", "internalType": "address"}],
        },
        {"type": "error", "name": "SenderIsNotFactory", "inputs": []},
        {"type": "error", "name": "TargetAlreadyDeployed", "inputs": []},
        {"type": "error", "name": "TransferFailed", "inputs": []},
    ],
)
# pylint: disable=line-too-long
erc4626hyperdrivedeployercoordinator_bytecode = HexStr(
    ""
)


class ERC4626HyperdriveDeployerCoordinatorContract(Contract):
    """A web3.py Contract class for the ERC4626HyperdriveDeployerCoordinator contract."""

    abi: ABI = erc4626hyperdrivedeployercoordinator_abi
    bytecode: bytes | None = try_bytecode_hexbytes(
        erc4626hyperdrivedeployercoordinator_bytecode, "erc4626hyperdrivedeployercoordinator"
    )

    def __init__(self, address: ChecksumAddress | None = None) -> None:
        try:
            # Initialize parent Contract class
            super().__init__(address=address)
            self.functions = ERC4626HyperdriveDeployerCoordinatorContractFunctions(erc4626hyperdrivedeployercoordinator_abi, self.w3, address)  # type: ignore

            self.errors = ERC4626HyperdriveDeployerCoordinatorContractErrors()

        except FallbackNotFound:
            print("Fallback function not found. Continuing...")

    errors: ERC4626HyperdriveDeployerCoordinatorContractErrors = ERC4626HyperdriveDeployerCoordinatorContractErrors()

    functions: ERC4626HyperdriveDeployerCoordinatorContractFunctions

    class ConstructorArgs(NamedTuple):
        """Arguments to pass the contract's constructor function."""

        name: str

        factory: str

        coreDeployer: str

        target0Deployer: str

        target1Deployer: str

        target2Deployer: str

        target3Deployer: str

    @classmethod
    def constructor(cls, name: str, factory: str, coreDeployer: str, target0Deployer: str, target1Deployer: str, target2Deployer: str, target3Deployer: str) -> ContractConstructor:  # type: ignore
        """Creates a transaction with the contract's constructor function.

        Parameters
        ----------

        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.

        """

        return super().constructor(
            dataclass_to_tuple(name),
            dataclass_to_tuple(factory),
            dataclass_to_tuple(coreDeployer),
            dataclass_to_tuple(target0Deployer),
            dataclass_to_tuple(target1Deployer),
            dataclass_to_tuple(target2Deployer),
            dataclass_to_tuple(target3Deployer),
        )

    @classmethod
    def deploy(cls, w3: Web3, account: LocalAccount | ChecksumAddress, constructorArgs: ConstructorArgs) -> Self:
        """Deploys and instance of the contract.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.
        """
        deployer = cls.factory(w3=w3)
        constructor_fn = deployer.constructor(*constructorArgs)

        # if an address is supplied, try to use a web3 default account
        if isinstance(account, str):
            tx_hash = constructor_fn.transact({"from": account})
            tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

            deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
            return deployed_contract

        # otherwise use the account provided.
        deployment_tx = constructor_fn.build_transaction()
        current_nonce = w3.eth.get_transaction_count(account.address, "pending")
        deployment_tx.update({"nonce": current_nonce})

        # Sign the transaction with local account private key
        signed_tx = account.sign_transaction(deployment_tx)

        # Send the signed transaction and wait for receipt
        tx_hash = w3.eth.send_raw_transaction(signed_tx.raw_transaction)
        tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

        deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
        return deployed_contract

    @classmethod
    def factory(cls, w3: Web3, class_name: str | None = None, **kwargs: Any) -> Type[Self]:
        """Deploys and instance of the contract.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        class_name: str | None
            The instance class name.

        Returns
        -------
        Self
            A deployed instance of the contract.
        """
        contract = super().factory(w3, class_name, **kwargs)
        contract.functions = ERC4626HyperdriveDeployerCoordinatorContractFunctions(
            erc4626hyperdrivedeployercoordinator_abi, w3, None
        )
        contract.errors = ERC4626HyperdriveDeployerCoordinatorContractErrors()

        return contract
