"""A web3.py Contract class for the HyperdriveFactory contract.

DO NOT EDIT.  This file was generated by pypechain.  See documentation at
https://github.com/delvtech/pypechain"""

# contracts have PascalCase names
# pylint: disable=invalid-name

# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments

# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return

# This file is bound to get very long depending on contract sizes.
# pylint: disable=too-many-lines

# methods are overriden with specific arguments instead of generic *args, **kwargs
# pylint: disable=arguments-differ

from __future__ import annotations

from typing import Any, Iterable, NamedTuple, Sequence, Type, cast

from eth_account.signers.local import LocalAccount
from eth_typing import ChecksumAddress, HexStr
from hexbytes import HexBytes
from typing_extensions import Self
from web3 import Web3
from web3._utils.filters import LogFilter
from web3.contract.contract import (
    Contract,
    ContractConstructor,
    ContractEvent,
    ContractEvents,
    ContractFunction,
    ContractFunctions,
)
from web3.exceptions import FallbackNotFound
from web3.types import ABI, BlockIdentifier, CallOverride, EventData, TxParams

from .HyperdriveFactoryTypes import FactoryConfig, Fees, PoolDeployConfig
from .utilities import dataclass_to_tuple, rename_returned_types

structs = {
    "Fees": Fees,
    "FactoryConfig": FactoryConfig,
    "PoolDeployConfig": PoolDeployConfig,
}


class HyperdriveFactoryAddHyperdriveDeployerContractFunction(ContractFunction):
    """ContractFunction for the addHyperdriveDeployer method."""

    def __call__(self, hyperdriveDeployer: str) -> HyperdriveFactoryAddHyperdriveDeployerContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(hyperdriveDeployer))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class HyperdriveFactoryDeployAndInitializeContractFunction(ContractFunction):
    """ContractFunction for the deployAndInitialize method."""

    def __call__(self, hyperdriveDeployer: str, deployConfig: PoolDeployConfig, extraData: bytes, contribution: int, apr: int, initializeExtraData: bytes) -> HyperdriveFactoryDeployAndInitializeContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(hyperdriveDeployer),
            dataclass_to_tuple(deployConfig),
            dataclass_to_tuple(extraData),
            dataclass_to_tuple(contribution),
            dataclass_to_tuple(apr),
            dataclass_to_tuple(initializeExtraData),
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(str, rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryFeeCollectorContractFunction(ContractFunction):
    """ContractFunction for the feeCollector method."""

    def __call__(self) -> HyperdriveFactoryFeeCollectorContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(str, rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryFeesContractFunction(ContractFunction):
    """ContractFunction for the fees method."""

    class ReturnValues(NamedTuple):
        """The return named tuple for Fees."""

        curve: int
        flat: int
        governanceLP: int
        governanceZombie: int

    def __call__(self) -> HyperdriveFactoryFeesContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> ReturnValues:
        """returns ReturnValues."""
        # Define the expected return types from the smart contract call

        return_types = [int, int, int, int]

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return self.ReturnValues(*rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryGetDefaultPausersContractFunction(ContractFunction):
    """ContractFunction for the getDefaultPausers method."""

    def __call__(self) -> HyperdriveFactoryGetDefaultPausersContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[str]:
        """returns list[str]."""
        # Define the expected return types from the smart contract call

        return_types = list[str]

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(list[str], rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryGetHyperdriveDeployerAtIndexContractFunction(ContractFunction):
    """ContractFunction for the getHyperdriveDeployerAtIndex method."""

    def __call__(self, index: int) -> HyperdriveFactoryGetHyperdriveDeployerAtIndexContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(index))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(str, rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryGetHyperdriveDeployersInRangeContractFunction(ContractFunction):
    """ContractFunction for the getHyperdriveDeployersInRange method."""

    def __call__(self, startIndex: int, endIndex: int) -> HyperdriveFactoryGetHyperdriveDeployersInRangeContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(startIndex), dataclass_to_tuple(endIndex))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[str]:
        """returns list[str]."""
        # Define the expected return types from the smart contract call

        return_types = list[str]

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(list[str], rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryGetInstanceAtIndexContractFunction(ContractFunction):
    """ContractFunction for the getInstanceAtIndex method."""

    def __call__(self, index: int) -> HyperdriveFactoryGetInstanceAtIndexContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(index))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(str, rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryGetInstancesInRangeContractFunction(ContractFunction):
    """ContractFunction for the getInstancesInRange method."""

    def __call__(self, startIndex: int, endIndex: int) -> HyperdriveFactoryGetInstancesInRangeContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(startIndex), dataclass_to_tuple(endIndex))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[str]:
        """returns list[str]."""
        # Define the expected return types from the smart contract call

        return_types = list[str]

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(list[str], rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryGetNumberOfHyperdriveDeployersContractFunction(ContractFunction):
    """ContractFunction for the getNumberOfHyperdriveDeployers method."""

    def __call__(self) -> HyperdriveFactoryGetNumberOfHyperdriveDeployersContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(int, rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryGetNumberOfInstancesContractFunction(ContractFunction):
    """ContractFunction for the getNumberOfInstances method."""

    def __call__(self) -> HyperdriveFactoryGetNumberOfInstancesContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(int, rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryGovernanceContractFunction(ContractFunction):
    """ContractFunction for the governance method."""

    def __call__(self) -> HyperdriveFactoryGovernanceContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(str, rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryHyperdriveGovernanceContractFunction(ContractFunction):
    """ContractFunction for the hyperdriveGovernance method."""

    def __call__(self) -> HyperdriveFactoryHyperdriveGovernanceContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(str, rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryIsHyperdriveDeployerContractFunction(ContractFunction):
    """ContractFunction for the isHyperdriveDeployer method."""

    def __call__(self, arg1: str) -> HyperdriveFactoryIsHyperdriveDeployerContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(arg1))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bool:
        """returns bool."""
        # Define the expected return types from the smart contract call

        return_types = bool

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(bool, rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryIsInstanceContractFunction(ContractFunction):
    """ContractFunction for the isInstance method."""

    def __call__(self, arg1: str) -> HyperdriveFactoryIsInstanceContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(arg1))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bool:
        """returns bool."""
        # Define the expected return types from the smart contract call

        return_types = bool

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(bool, rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryIsOfficialContractFunction(ContractFunction):
    """ContractFunction for the isOfficial method."""

    def __call__(self, instance: str) -> HyperdriveFactoryIsOfficialContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(instance))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(int, rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryLinkerCodeHashContractFunction(ContractFunction):
    """ContractFunction for the linkerCodeHash method."""

    def __call__(self) -> HyperdriveFactoryLinkerCodeHashContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bytes:
        """returns bytes."""
        # Define the expected return types from the smart contract call

        return_types = bytes

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(bytes, rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryLinkerFactoryContractFunction(ContractFunction):
    """ContractFunction for the linkerFactory method."""

    def __call__(self) -> HyperdriveFactoryLinkerFactoryContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(str, rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryRemoveHyperdriveDeployerContractFunction(ContractFunction):
    """ContractFunction for the removeHyperdriveDeployer method."""

    def __call__(self, hyperdriveDeployer: str, index: int) -> HyperdriveFactoryRemoveHyperdriveDeployerContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(hyperdriveDeployer), dataclass_to_tuple(index))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class HyperdriveFactoryUpdateDefaultPausersContractFunction(ContractFunction):
    """ContractFunction for the updateDefaultPausers method."""

    def __call__(self, defaultPausers_: list[str]) -> HyperdriveFactoryUpdateDefaultPausersContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(defaultPausers_))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class HyperdriveFactoryUpdateFeeCollectorContractFunction(ContractFunction):
    """ContractFunction for the updateFeeCollector method."""

    def __call__(self, feeCollector: str) -> HyperdriveFactoryUpdateFeeCollectorContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(feeCollector))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class HyperdriveFactoryUpdateFeesContractFunction(ContractFunction):
    """ContractFunction for the updateFees method."""

    def __call__(self, fees: Fees) -> HyperdriveFactoryUpdateFeesContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(fees))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class HyperdriveFactoryUpdateGovernanceContractFunction(ContractFunction):
    """ContractFunction for the updateGovernance method."""

    def __call__(self, governance: str) -> HyperdriveFactoryUpdateGovernanceContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(governance))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class HyperdriveFactoryUpdateHyperdriveGovernanceContractFunction(ContractFunction):
    """ContractFunction for the updateHyperdriveGovernance method."""

    def __call__(self, hyperdriveGovernance: str) -> HyperdriveFactoryUpdateHyperdriveGovernanceContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(hyperdriveGovernance))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class HyperdriveFactoryUpdateLinkerCodeHashContractFunction(ContractFunction):
    """ContractFunction for the updateLinkerCodeHash method."""

    def __call__(self, linkerCodeHash: bytes) -> HyperdriveFactoryUpdateLinkerCodeHashContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(linkerCodeHash))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class HyperdriveFactoryUpdateLinkerFactoryContractFunction(ContractFunction):
    """ContractFunction for the updateLinkerFactory method."""

    def __call__(self, linkerFactory: str) -> HyperdriveFactoryUpdateLinkerFactoryContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(linkerFactory))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class HyperdriveFactoryVersionCounterContractFunction(ContractFunction):
    """ContractFunction for the versionCounter method."""

    def __call__(self) -> HyperdriveFactoryVersionCounterContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(int, rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryContractFunctions(ContractFunctions):
    """ContractFunctions for the HyperdriveFactory contract."""

    addHyperdriveDeployer: HyperdriveFactoryAddHyperdriveDeployerContractFunction

    deployAndInitialize: HyperdriveFactoryDeployAndInitializeContractFunction

    feeCollector: HyperdriveFactoryFeeCollectorContractFunction

    fees: HyperdriveFactoryFeesContractFunction

    getDefaultPausers: HyperdriveFactoryGetDefaultPausersContractFunction

    getHyperdriveDeployerAtIndex: HyperdriveFactoryGetHyperdriveDeployerAtIndexContractFunction

    getHyperdriveDeployersInRange: HyperdriveFactoryGetHyperdriveDeployersInRangeContractFunction

    getInstanceAtIndex: HyperdriveFactoryGetInstanceAtIndexContractFunction

    getInstancesInRange: HyperdriveFactoryGetInstancesInRangeContractFunction

    getNumberOfHyperdriveDeployers: HyperdriveFactoryGetNumberOfHyperdriveDeployersContractFunction

    getNumberOfInstances: HyperdriveFactoryGetNumberOfInstancesContractFunction

    governance: HyperdriveFactoryGovernanceContractFunction

    hyperdriveGovernance: HyperdriveFactoryHyperdriveGovernanceContractFunction

    isHyperdriveDeployer: HyperdriveFactoryIsHyperdriveDeployerContractFunction

    isInstance: HyperdriveFactoryIsInstanceContractFunction

    isOfficial: HyperdriveFactoryIsOfficialContractFunction

    linkerCodeHash: HyperdriveFactoryLinkerCodeHashContractFunction

    linkerFactory: HyperdriveFactoryLinkerFactoryContractFunction

    removeHyperdriveDeployer: HyperdriveFactoryRemoveHyperdriveDeployerContractFunction

    updateDefaultPausers: HyperdriveFactoryUpdateDefaultPausersContractFunction

    updateFeeCollector: HyperdriveFactoryUpdateFeeCollectorContractFunction

    updateFees: HyperdriveFactoryUpdateFeesContractFunction

    updateGovernance: HyperdriveFactoryUpdateGovernanceContractFunction

    updateHyperdriveGovernance: HyperdriveFactoryUpdateHyperdriveGovernanceContractFunction

    updateLinkerCodeHash: HyperdriveFactoryUpdateLinkerCodeHashContractFunction

    updateLinkerFactory: HyperdriveFactoryUpdateLinkerFactoryContractFunction

    versionCounter: HyperdriveFactoryVersionCounterContractFunction

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
        decode_tuples: bool | None = False,
    ) -> None:
        super().__init__(abi, w3, address, decode_tuples)
        self.addHyperdriveDeployer = HyperdriveFactoryAddHyperdriveDeployerContractFunction.factory(
            "addHyperdriveDeployer",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="addHyperdriveDeployer",
        )
        self.deployAndInitialize = HyperdriveFactoryDeployAndInitializeContractFunction.factory(
            "deployAndInitialize",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="deployAndInitialize",
        )
        self.feeCollector = HyperdriveFactoryFeeCollectorContractFunction.factory(
            "feeCollector",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="feeCollector",
        )
        self.fees = HyperdriveFactoryFeesContractFunction.factory(
            "fees",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="fees",
        )
        self.getDefaultPausers = HyperdriveFactoryGetDefaultPausersContractFunction.factory(
            "getDefaultPausers",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="getDefaultPausers",
        )
        self.getHyperdriveDeployerAtIndex = HyperdriveFactoryGetHyperdriveDeployerAtIndexContractFunction.factory(
            "getHyperdriveDeployerAtIndex",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="getHyperdriveDeployerAtIndex",
        )
        self.getHyperdriveDeployersInRange = HyperdriveFactoryGetHyperdriveDeployersInRangeContractFunction.factory(
            "getHyperdriveDeployersInRange",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="getHyperdriveDeployersInRange",
        )
        self.getInstanceAtIndex = HyperdriveFactoryGetInstanceAtIndexContractFunction.factory(
            "getInstanceAtIndex",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="getInstanceAtIndex",
        )
        self.getInstancesInRange = HyperdriveFactoryGetInstancesInRangeContractFunction.factory(
            "getInstancesInRange",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="getInstancesInRange",
        )
        self.getNumberOfHyperdriveDeployers = HyperdriveFactoryGetNumberOfHyperdriveDeployersContractFunction.factory(
            "getNumberOfHyperdriveDeployers",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="getNumberOfHyperdriveDeployers",
        )
        self.getNumberOfInstances = HyperdriveFactoryGetNumberOfInstancesContractFunction.factory(
            "getNumberOfInstances",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="getNumberOfInstances",
        )
        self.governance = HyperdriveFactoryGovernanceContractFunction.factory(
            "governance",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="governance",
        )
        self.hyperdriveGovernance = HyperdriveFactoryHyperdriveGovernanceContractFunction.factory(
            "hyperdriveGovernance",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="hyperdriveGovernance",
        )
        self.isHyperdriveDeployer = HyperdriveFactoryIsHyperdriveDeployerContractFunction.factory(
            "isHyperdriveDeployer",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="isHyperdriveDeployer",
        )
        self.isInstance = HyperdriveFactoryIsInstanceContractFunction.factory(
            "isInstance",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="isInstance",
        )
        self.isOfficial = HyperdriveFactoryIsOfficialContractFunction.factory(
            "isOfficial",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="isOfficial",
        )
        self.linkerCodeHash = HyperdriveFactoryLinkerCodeHashContractFunction.factory(
            "linkerCodeHash",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="linkerCodeHash",
        )
        self.linkerFactory = HyperdriveFactoryLinkerFactoryContractFunction.factory(
            "linkerFactory",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="linkerFactory",
        )
        self.removeHyperdriveDeployer = HyperdriveFactoryRemoveHyperdriveDeployerContractFunction.factory(
            "removeHyperdriveDeployer",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="removeHyperdriveDeployer",
        )
        self.updateDefaultPausers = HyperdriveFactoryUpdateDefaultPausersContractFunction.factory(
            "updateDefaultPausers",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="updateDefaultPausers",
        )
        self.updateFeeCollector = HyperdriveFactoryUpdateFeeCollectorContractFunction.factory(
            "updateFeeCollector",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="updateFeeCollector",
        )
        self.updateFees = HyperdriveFactoryUpdateFeesContractFunction.factory(
            "updateFees",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="updateFees",
        )
        self.updateGovernance = HyperdriveFactoryUpdateGovernanceContractFunction.factory(
            "updateGovernance",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="updateGovernance",
        )
        self.updateHyperdriveGovernance = HyperdriveFactoryUpdateHyperdriveGovernanceContractFunction.factory(
            "updateHyperdriveGovernance",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="updateHyperdriveGovernance",
        )
        self.updateLinkerCodeHash = HyperdriveFactoryUpdateLinkerCodeHashContractFunction.factory(
            "updateLinkerCodeHash",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="updateLinkerCodeHash",
        )
        self.updateLinkerFactory = HyperdriveFactoryUpdateLinkerFactoryContractFunction.factory(
            "updateLinkerFactory",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="updateLinkerFactory",
        )
        self.versionCounter = HyperdriveFactoryVersionCounterContractFunction.factory(
            "versionCounter",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="versionCounter",
        )


class HyperdriveFactoryDeployedContractEvent(ContractEvent):
    """ContractEvent for Deployed."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "HyperdriveFactoryDeployedContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["HyperdriveFactoryDeployedContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "HyperdriveFactoryDeployedContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["HyperdriveFactoryDeployedContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class HyperdriveFactoryFeeCollectorUpdatedContractEvent(ContractEvent):
    """ContractEvent for FeeCollectorUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "HyperdriveFactoryFeeCollectorUpdatedContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["HyperdriveFactoryFeeCollectorUpdatedContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "HyperdriveFactoryFeeCollectorUpdatedContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["HyperdriveFactoryFeeCollectorUpdatedContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class HyperdriveFactoryGovernanceUpdatedContractEvent(ContractEvent):
    """ContractEvent for GovernanceUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "HyperdriveFactoryGovernanceUpdatedContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["HyperdriveFactoryGovernanceUpdatedContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "HyperdriveFactoryGovernanceUpdatedContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["HyperdriveFactoryGovernanceUpdatedContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class HyperdriveFactoryHyperdriveGovernanceUpdatedContractEvent(ContractEvent):
    """ContractEvent for HyperdriveGovernanceUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "HyperdriveFactoryHyperdriveGovernanceUpdatedContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["HyperdriveFactoryHyperdriveGovernanceUpdatedContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "HyperdriveFactoryHyperdriveGovernanceUpdatedContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["HyperdriveFactoryHyperdriveGovernanceUpdatedContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class HyperdriveFactoryImplementationUpdatedContractEvent(ContractEvent):
    """ContractEvent for ImplementationUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "HyperdriveFactoryImplementationUpdatedContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["HyperdriveFactoryImplementationUpdatedContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "HyperdriveFactoryImplementationUpdatedContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["HyperdriveFactoryImplementationUpdatedContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class HyperdriveFactoryLinkerCodeHashUpdatedContractEvent(ContractEvent):
    """ContractEvent for LinkerCodeHashUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "HyperdriveFactoryLinkerCodeHashUpdatedContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["HyperdriveFactoryLinkerCodeHashUpdatedContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "HyperdriveFactoryLinkerCodeHashUpdatedContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["HyperdriveFactoryLinkerCodeHashUpdatedContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class HyperdriveFactoryLinkerFactoryUpdatedContractEvent(ContractEvent):
    """ContractEvent for LinkerFactoryUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "HyperdriveFactoryLinkerFactoryUpdatedContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["HyperdriveFactoryLinkerFactoryUpdatedContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "HyperdriveFactoryLinkerFactoryUpdatedContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["HyperdriveFactoryLinkerFactoryUpdatedContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class HyperdriveFactoryContractEvents(ContractEvents):
    """ContractEvents for the HyperdriveFactory contract."""

    Deployed: HyperdriveFactoryDeployedContractEvent

    FeeCollectorUpdated: HyperdriveFactoryFeeCollectorUpdatedContractEvent

    GovernanceUpdated: HyperdriveFactoryGovernanceUpdatedContractEvent

    HyperdriveGovernanceUpdated: HyperdriveFactoryHyperdriveGovernanceUpdatedContractEvent

    ImplementationUpdated: HyperdriveFactoryImplementationUpdatedContractEvent

    LinkerCodeHashUpdated: HyperdriveFactoryLinkerCodeHashUpdatedContractEvent

    LinkerFactoryUpdated: HyperdriveFactoryLinkerFactoryUpdatedContractEvent

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
    ) -> None:
        super().__init__(abi, w3, address)
        self.Deployed = cast(
            HyperdriveFactoryDeployedContractEvent,
            HyperdriveFactoryDeployedContractEvent.factory(
                "Deployed", w3=w3, contract_abi=abi, address=address, event_name="Deployed"
            ),
        )
        self.FeeCollectorUpdated = cast(
            HyperdriveFactoryFeeCollectorUpdatedContractEvent,
            HyperdriveFactoryFeeCollectorUpdatedContractEvent.factory(
                "FeeCollectorUpdated", w3=w3, contract_abi=abi, address=address, event_name="FeeCollectorUpdated"
            ),
        )
        self.GovernanceUpdated = cast(
            HyperdriveFactoryGovernanceUpdatedContractEvent,
            HyperdriveFactoryGovernanceUpdatedContractEvent.factory(
                "GovernanceUpdated", w3=w3, contract_abi=abi, address=address, event_name="GovernanceUpdated"
            ),
        )
        self.HyperdriveGovernanceUpdated = cast(
            HyperdriveFactoryHyperdriveGovernanceUpdatedContractEvent,
            HyperdriveFactoryHyperdriveGovernanceUpdatedContractEvent.factory(
                "HyperdriveGovernanceUpdated",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="HyperdriveGovernanceUpdated",
            ),
        )
        self.ImplementationUpdated = cast(
            HyperdriveFactoryImplementationUpdatedContractEvent,
            HyperdriveFactoryImplementationUpdatedContractEvent.factory(
                "ImplementationUpdated", w3=w3, contract_abi=abi, address=address, event_name="ImplementationUpdated"
            ),
        )
        self.LinkerCodeHashUpdated = cast(
            HyperdriveFactoryLinkerCodeHashUpdatedContractEvent,
            HyperdriveFactoryLinkerCodeHashUpdatedContractEvent.factory(
                "LinkerCodeHashUpdated", w3=w3, contract_abi=abi, address=address, event_name="LinkerCodeHashUpdated"
            ),
        )
        self.LinkerFactoryUpdated = cast(
            HyperdriveFactoryLinkerFactoryUpdatedContractEvent,
            HyperdriveFactoryLinkerFactoryUpdatedContractEvent.factory(
                "LinkerFactoryUpdated", w3=w3, contract_abi=abi, address=address, event_name="LinkerFactoryUpdated"
            ),
        )


hyperdrivefactory_abi: ABI = cast(
    ABI,
    [
        {
            "type": "constructor",
            "inputs": [
                {
                    "name": "_factoryConfig",
                    "type": "tuple",
                    "internalType": "struct HyperdriveFactory.FactoryConfig",
                    "components": [
                        {"name": "governance", "type": "address", "internalType": "address"},
                        {"name": "hyperdriveGovernance", "type": "address", "internalType": "address"},
                        {"name": "defaultPausers", "type": "address[]", "internalType": "address[]"},
                        {"name": "feeCollector", "type": "address", "internalType": "address"},
                        {
                            "name": "fees",
                            "type": "tuple",
                            "internalType": "struct IHyperdrive.Fees",
                            "components": [
                                {"name": "curve", "type": "uint256", "internalType": "uint256"},
                                {"name": "flat", "type": "uint256", "internalType": "uint256"},
                                {"name": "governanceLP", "type": "uint256", "internalType": "uint256"},
                                {"name": "governanceZombie", "type": "uint256", "internalType": "uint256"},
                            ],
                        },
                        {
                            "name": "maxFees",
                            "type": "tuple",
                            "internalType": "struct IHyperdrive.Fees",
                            "components": [
                                {"name": "curve", "type": "uint256", "internalType": "uint256"},
                                {"name": "flat", "type": "uint256", "internalType": "uint256"},
                                {"name": "governanceLP", "type": "uint256", "internalType": "uint256"},
                                {"name": "governanceZombie", "type": "uint256", "internalType": "uint256"},
                            ],
                        },
                        {"name": "linkerFactory", "type": "address", "internalType": "address"},
                        {"name": "linkerCodeHash", "type": "bytes32", "internalType": "bytes32"},
                    ],
                }
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "addHyperdriveDeployer",
            "inputs": [{"name": "_hyperdriveDeployer", "type": "address", "internalType": "address"}],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "deployAndInitialize",
            "inputs": [
                {"name": "_hyperdriveDeployer", "type": "address", "internalType": "address"},
                {
                    "name": "_deployConfig",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.PoolDeployConfig",
                    "components": [
                        {"name": "baseToken", "type": "address", "internalType": "contract IERC20"},
                        {"name": "linkerFactory", "type": "address", "internalType": "address"},
                        {"name": "linkerCodeHash", "type": "bytes32", "internalType": "bytes32"},
                        {"name": "minimumShareReserves", "type": "uint256", "internalType": "uint256"},
                        {"name": "minimumTransactionAmount", "type": "uint256", "internalType": "uint256"},
                        {"name": "positionDuration", "type": "uint256", "internalType": "uint256"},
                        {"name": "checkpointDuration", "type": "uint256", "internalType": "uint256"},
                        {"name": "timeStretch", "type": "uint256", "internalType": "uint256"},
                        {"name": "governance", "type": "address", "internalType": "address"},
                        {"name": "feeCollector", "type": "address", "internalType": "address"},
                        {
                            "name": "fees",
                            "type": "tuple",
                            "internalType": "struct IHyperdrive.Fees",
                            "components": [
                                {"name": "curve", "type": "uint256", "internalType": "uint256"},
                                {"name": "flat", "type": "uint256", "internalType": "uint256"},
                                {"name": "governanceLP", "type": "uint256", "internalType": "uint256"},
                                {"name": "governanceZombie", "type": "uint256", "internalType": "uint256"},
                            ],
                        },
                    ],
                },
                {"name": "_extraData", "type": "bytes", "internalType": "bytes"},
                {"name": "_contribution", "type": "uint256", "internalType": "uint256"},
                {"name": "_apr", "type": "uint256", "internalType": "uint256"},
                {"name": "_initializeExtraData", "type": "bytes", "internalType": "bytes"},
            ],
            "outputs": [{"name": "", "type": "address", "internalType": "contract IHyperdrive"}],
            "stateMutability": "payable",
        },
        {
            "type": "function",
            "name": "feeCollector",
            "inputs": [],
            "outputs": [{"name": "", "type": "address", "internalType": "address"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "fees",
            "inputs": [],
            "outputs": [
                {"name": "curve", "type": "uint256", "internalType": "uint256"},
                {"name": "flat", "type": "uint256", "internalType": "uint256"},
                {"name": "governanceLP", "type": "uint256", "internalType": "uint256"},
                {"name": "governanceZombie", "type": "uint256", "internalType": "uint256"},
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getDefaultPausers",
            "inputs": [],
            "outputs": [{"name": "", "type": "address[]", "internalType": "address[]"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getHyperdriveDeployerAtIndex",
            "inputs": [{"name": "index", "type": "uint256", "internalType": "uint256"}],
            "outputs": [{"name": "", "type": "address", "internalType": "address"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getHyperdriveDeployersInRange",
            "inputs": [
                {"name": "startIndex", "type": "uint256", "internalType": "uint256"},
                {"name": "endIndex", "type": "uint256", "internalType": "uint256"},
            ],
            "outputs": [{"name": "range", "type": "address[]", "internalType": "address[]"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getInstanceAtIndex",
            "inputs": [{"name": "index", "type": "uint256", "internalType": "uint256"}],
            "outputs": [{"name": "", "type": "address", "internalType": "address"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getInstancesInRange",
            "inputs": [
                {"name": "startIndex", "type": "uint256", "internalType": "uint256"},
                {"name": "endIndex", "type": "uint256", "internalType": "uint256"},
            ],
            "outputs": [{"name": "range", "type": "address[]", "internalType": "address[]"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getNumberOfHyperdriveDeployers",
            "inputs": [],
            "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getNumberOfInstances",
            "inputs": [],
            "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "governance",
            "inputs": [],
            "outputs": [{"name": "", "type": "address", "internalType": "address"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "hyperdriveGovernance",
            "inputs": [],
            "outputs": [{"name": "", "type": "address", "internalType": "address"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "isHyperdriveDeployer",
            "inputs": [{"name": "", "type": "address", "internalType": "address"}],
            "outputs": [{"name": "", "type": "bool", "internalType": "bool"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "isInstance",
            "inputs": [{"name": "", "type": "address", "internalType": "address"}],
            "outputs": [{"name": "", "type": "bool", "internalType": "bool"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "isOfficial",
            "inputs": [{"name": "instance", "type": "address", "internalType": "address"}],
            "outputs": [{"name": "version", "type": "uint256", "internalType": "uint256"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "linkerCodeHash",
            "inputs": [],
            "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "linkerFactory",
            "inputs": [],
            "outputs": [{"name": "", "type": "address", "internalType": "address"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "removeHyperdriveDeployer",
            "inputs": [
                {"name": "_hyperdriveDeployer", "type": "address", "internalType": "address"},
                {"name": "_index", "type": "uint256", "internalType": "uint256"},
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "updateDefaultPausers",
            "inputs": [{"name": "_defaultPausers_", "type": "address[]", "internalType": "address[]"}],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "updateFeeCollector",
            "inputs": [{"name": "_feeCollector", "type": "address", "internalType": "address"}],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "updateFees",
            "inputs": [
                {
                    "name": "_fees",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.Fees",
                    "components": [
                        {"name": "curve", "type": "uint256", "internalType": "uint256"},
                        {"name": "flat", "type": "uint256", "internalType": "uint256"},
                        {"name": "governanceLP", "type": "uint256", "internalType": "uint256"},
                        {"name": "governanceZombie", "type": "uint256", "internalType": "uint256"},
                    ],
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "updateGovernance",
            "inputs": [{"name": "_governance", "type": "address", "internalType": "address"}],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "updateHyperdriveGovernance",
            "inputs": [{"name": "_hyperdriveGovernance", "type": "address", "internalType": "address"}],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "updateLinkerCodeHash",
            "inputs": [{"name": "_linkerCodeHash", "type": "bytes32", "internalType": "bytes32"}],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "updateLinkerFactory",
            "inputs": [{"name": "_linkerFactory", "type": "address", "internalType": "address"}],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "versionCounter",
            "inputs": [],
            "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}],
            "stateMutability": "view",
        },
        {
            "type": "event",
            "name": "Deployed",
            "inputs": [
                {"name": "version", "type": "uint256", "indexed": True, "internalType": "uint256"},
                {"name": "hyperdrive", "type": "address", "indexed": False, "internalType": "address"},
                {
                    "name": "config",
                    "type": "tuple",
                    "indexed": False,
                    "internalType": "struct IHyperdrive.PoolDeployConfig",
                    "components": [
                        {"name": "baseToken", "type": "address", "internalType": "contract IERC20"},
                        {"name": "linkerFactory", "type": "address", "internalType": "address"},
                        {"name": "linkerCodeHash", "type": "bytes32", "internalType": "bytes32"},
                        {"name": "minimumShareReserves", "type": "uint256", "internalType": "uint256"},
                        {"name": "minimumTransactionAmount", "type": "uint256", "internalType": "uint256"},
                        {"name": "positionDuration", "type": "uint256", "internalType": "uint256"},
                        {"name": "checkpointDuration", "type": "uint256", "internalType": "uint256"},
                        {"name": "timeStretch", "type": "uint256", "internalType": "uint256"},
                        {"name": "governance", "type": "address", "internalType": "address"},
                        {"name": "feeCollector", "type": "address", "internalType": "address"},
                        {
                            "name": "fees",
                            "type": "tuple",
                            "internalType": "struct IHyperdrive.Fees",
                            "components": [
                                {"name": "curve", "type": "uint256", "internalType": "uint256"},
                                {"name": "flat", "type": "uint256", "internalType": "uint256"},
                                {"name": "governanceLP", "type": "uint256", "internalType": "uint256"},
                                {"name": "governanceZombie", "type": "uint256", "internalType": "uint256"},
                            ],
                        },
                    ],
                },
                {"name": "extraData", "type": "bytes", "indexed": False, "internalType": "bytes"},
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "FeeCollectorUpdated",
            "inputs": [{"name": "newFeeCollector", "type": "address", "indexed": True, "internalType": "address"}],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "GovernanceUpdated",
            "inputs": [{"name": "governance", "type": "address", "indexed": True, "internalType": "address"}],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "HyperdriveGovernanceUpdated",
            "inputs": [{"name": "hyperdriveGovernance", "type": "address", "indexed": True, "internalType": "address"}],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "ImplementationUpdated",
            "inputs": [{"name": "newDeployer", "type": "address", "indexed": True, "internalType": "address"}],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "LinkerCodeHashUpdated",
            "inputs": [{"name": "newLinkerCodeHash", "type": "bytes32", "indexed": True, "internalType": "bytes32"}],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "LinkerFactoryUpdated",
            "inputs": [{"name": "newLinkerFactory", "type": "address", "indexed": True, "internalType": "address"}],
            "anonymous": False,
        },
        {"type": "error", "name": "EndIndexTooLarge", "inputs": []},
        {"type": "error", "name": "FeeTooHigh", "inputs": []},
        {"type": "error", "name": "HyperdriveDeployerAlreadyAdded", "inputs": []},
        {"type": "error", "name": "HyperdriveDeployerIndexMismatch", "inputs": []},
        {"type": "error", "name": "HyperdriveDeployerNotAdded", "inputs": []},
        {"type": "error", "name": "InvalidDeployer", "inputs": []},
        {"type": "error", "name": "InvalidIndexes", "inputs": []},
        {"type": "error", "name": "MaxFeeTooHigh", "inputs": []},
        {"type": "error", "name": "TransferFailed", "inputs": []},
        {"type": "error", "name": "Unauthorized", "inputs": []},
    ],
)
# pylint: disable=line-too-long
hyperdrivefactory_bytecode = HexStr(
    "0x610100604052600180553480156200001657600080fd5b5060405162002004380380620020048339810160408190526200003991620003d8565b60a0808201805151608081905281516020015190925280516040015160c052516060015160e052670de0b6b3a764000010806200007f5750670de0b6b3a764000060a051115b80620000945750670de0b6b3a764000060c051115b80620000a95750670de0b6b3a764000060e051115b15620000c85760405163a3932d2d60e01b815260040160405180910390fd5b6080805190820151511180620000e7575060a051816080015160200151115b80620000fc575060c051816080015160400151115b8062000111575060e051816080015160600151115b15620001305760405163cd4e616760e01b815260040160405180910390fd5b608081015180516006556020808201516007556040808301516008556060928301516009558351600080546001600160a01b03199081166001600160a01b03938416179091558386015160038054831691841691909117905593850151600a8054909516911617909255908201518051620001b092600b920190620001e2565b5060c0810151600480546001600160a01b0319166001600160a01b0390921691909117905560e00151600555620004cf565b8280548282559060005260206000209081019282156200023a579160200282015b828111156200023a57825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019062000203565b50620002489291506200024c565b5090565b5b808211156200024857600081556001016200024d565b634e487b7160e01b600052604160045260246000fd5b60405161010081016001600160401b03811182821017156200029f576200029f62000263565b60405290565b80516001600160a01b0381168114620002bd57600080fd5b919050565b600082601f830112620002d457600080fd5b815160206001600160401b0380831115620002f357620002f362000263565b8260051b604051601f19603f830116810181811084821117156200031b576200031b62000263565b6040529384528581018301938381019250878511156200033a57600080fd5b83870191505b8482101562000364576200035482620002a5565b8352918301919083019062000340565b979650505050505050565b6000608082840312156200038257600080fd5b604051608081016001600160401b0381118282101715620003a757620003a762000263565b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b600060208284031215620003eb57600080fd5b81516001600160401b03808211156200040357600080fd5b908301906101c082860312156200041957600080fd5b6200042362000279565b6200042e83620002a5565b81526200043e60208401620002a5565b60208201526040830151828111156200045657600080fd5b6200046487828601620002c2565b6040830152506200047860608401620002a5565b60608201526200048c86608085016200036f565b6080820152620004a18661010085016200036f565b60a0820152620004b56101808401620002a5565b60c08201526101a0929092015160e0830152509392505050565b60805160a05160c05160e051611afb620005096000396000610ab701526000610a8901526000610a5b01526000610a310152611afb6000f3fe60806040526004361061019c5760003560e01c80639af1d35a116100ec578063cd2cdf581161008a578063dd2b8fbb11610064578063dd2b8fbb146104df578063dd6d30c1146104ff578063e333155514610515578063f1e1b6601461053557600080fd5b8063cd2cdf581461048c578063d2c35ce81461049f578063daac24da146104bf57600080fd5b8063b2561263116100c6578063b256126314610416578063bc30e7a114610436578063c415b95c14610456578063c905a4b51461047657600080fd5b80639af1d35a1461039e5780639af25262146103e1578063a1ac11f51461040157600080fd5b80636e95d67c1161015957806380a6b8641161013357806380a6b8641461030e578063852297851461033e57806398a9c92b1461035e57806399623bb11461037e57600080fd5b80636e95d67c146102ad57806377b81aac146102cc5780637f7c5a7d146102f957600080fd5b806302fd2de9146101a15780634fbfee77146101c3578063503cf156146101e35780635aa6e675146102035780635f5a4e88146102405780636b44e6be1461026d575b600080fd5b3480156101ad57600080fd5b506101c16101bc366004611472565b610555565b005b3480156101cf57600080fd5b506101c16101de366004611496565b61061f565b3480156101ef57600080fd5b506101c16101fe3660046114af565b61067c565b34801561020f57600080fd5b50600054610223906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561024c57600080fd5b5061026061025b3660046114db565b610800565b60405161023791906114fd565b34801561027957600080fd5b5061029d610288366004611472565b600f6020526000908152604090205460ff1681565b6040519015158152602001610237565b3480156102b957600080fd5b50600e545b604051908152602001610237565b3480156102d857600080fd5b506102be6102e7366004611472565b60026020526000908152604090205481565b34801561030557600080fd5b5061026061091c565b34801561031a57600080fd5b5061029d610329366004611472565b600d6020526000908152604090205460ff1681565b34801561034a57600080fd5b506101c1610359366004611472565b61097e565b34801561036a57600080fd5b506101c161037936600461154a565b610a05565b34801561038a57600080fd5b50600454610223906001600160a01b031681565b3480156103aa57600080fd5b506006546007546008546009546103c19392919084565b604080519485526020850193909352918301526060820152608001610237565b3480156103ed57600080fd5b506101c16103fc366004611562565b610b1e565b34801561040d57600080fd5b50600c546102be565b34801561042257600080fd5b506101c1610431366004611472565b610b54565b34801561044257600080fd5b506102606104513660046114db565b610bc6565b34801561046257600080fd5b50600a54610223906001600160a01b031681565b34801561048257600080fd5b506102be60055481565b61022361049a36600461170a565b610cdb565b3480156104ab57600080fd5b506101c16104ba366004611472565b611199565b3480156104cb57600080fd5b506102236104da366004611496565b61120d565b3480156104eb57600080fd5b506101c16104fa366004611472565b61123d565b34801561050b57600080fd5b506102be60015481565b34801561052157600080fd5b50600354610223906001600160a01b031681565b34801561054157600080fd5b50610223610550366004611496565b6112b1565b6000546001600160a01b0316331461057f576040516282b42960e81b815260040160405180910390fd5b6001600160a01b0381166000908152600d602052604090205460ff16156105b95760405163322026b560e21b815260040160405180910390fd5b6001600160a01b03166000818152600d60205260408120805460ff19166001908117909155600c805491820181559091527fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c70180546001600160a01b0319169091179055565b6000546001600160a01b03163314610649576040516282b42960e81b815260040160405180910390fd5b600581905560405181907f395a61259037298d1c4cd4bf177b64ad5995d38a9394573fcd9060d649314ad090600090a250565b6000546001600160a01b031633146106a6576040516282b42960e81b815260040160405180910390fd5b6001600160a01b0382166000908152600d602052604090205460ff166106df57604051634793420960e11b815260040160405180910390fd5b816001600160a01b0316600c82815481106106fc576106fc61184e565b6000918252602090912001546001600160a01b03161461072f5760405163e1a1578d60e01b815260040160405180910390fd5b6001600160a01b0382166000908152600d60205260409020805460ff19169055600c805461075f9060019061187a565b8154811061076f5761076f61184e565b600091825260209091200154600c80546001600160a01b03909216918390811061079b5761079b61184e565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600c8054806107da576107da611893565b600082815260209020810160001990810180546001600160a01b03191690550190555050565b60608183111561082357604051633b2735ab60e11b815260040160405180910390fd5b600c548211156108465760405163e0f7becb60e01b815260040160405180910390fd5b610850838361187a565b61085b9060016118a9565b67ffffffffffffffff811115610873576108736115d7565b60405190808252806020026020018201604052801561089c578160200160208202803683370190505b509050825b82811161091557600c81815481106108bb576108bb61184e565b6000918252602090912001546001600160a01b0316826108db868461187a565b815181106108eb576108eb61184e565b6001600160a01b03909216602092830291909101909101528061090d816118bc565b9150506108a1565b5092915050565b6060600b80548060200260200160405190810160405280929190818152602001828054801561097457602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610956575b5050505050905090565b6000546001600160a01b031633146109a8576040516282b42960e81b815260040160405180910390fd5b6001600160a01b0381166109bb57600080fd5b600480546001600160a01b0319166001600160a01b0383169081179091556040517f03aa5b0fb65014eea89fda04a7bc11742014881f3c078f2c75b7226ce10d941890600090a250565b6000546001600160a01b03163314610a2f576040516282b42960e81b815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000081351180610a8157507f00000000000000000000000000000000000000000000000000000000000000008160200135115b80610aaf57507f00000000000000000000000000000000000000000000000000000000000000008160400135115b80610add57507f00000000000000000000000000000000000000000000000000000000000000008160600135115b15610afb5760405163cd4e616760e01b815260040160405180910390fd5b80356006556020810135600755604081013560085560600135600955565b505050565b6000546001600160a01b03163314610b48576040516282b42960e81b815260040160405180910390fd5b610b19600b83836113d2565b6000546001600160a01b03163314610b7e576040516282b42960e81b815260040160405180910390fd5b600080546001600160a01b0319166001600160a01b038316908117825560405190917f9d3e522e1e47a2f6009739342b9cc7b252a1888154e843ab55ee1c81745795ab91a250565b606081831115610be957604051633b2735ab60e11b815260040160405180910390fd5b600e54821115610c0c5760405163e0f7becb60e01b815260040160405180910390fd5b610c16838361187a565b610c219060016118a9565b67ffffffffffffffff811115610c3957610c396115d7565b604051908082528060200260200182016040528015610c62578160200160208202803683370190505b509050825b82811161091557600e8181548110610c8157610c8161184e565b6000918252602090912001546001600160a01b031682610ca1868461187a565b81518110610cb157610cb161184e565b6001600160a01b039092166020928302919091019091015280610cd3816118bc565b915050610c67565b6001600160a01b0386166000908152600d602052604081205460ff16610d145760405163043c669f60e01b815260040160405180910390fd5b600480546001600160a01b039081166020808a01919091526005546040808b0191909152600a5483166101208b0152306101008b015280516080810182526006548152600754928101929092526008548282015260095460608301526101408a019190915251630c46909760e11b8152600092918a169163188d212e91610d9f918b918b91016119e3565b6020604051808303816000875af1158015610dbe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610de29190611a0e565b6001546001600160a01b03808316600090815260026020526040908190208390556003549091166101008b015251919250907f9409438224258854b5587daf29ca81c2676ed86cd439240ca7aaa0c6e17cfa7690610e459084908b908b90611a2b565b60405180910390a2600e805460018082019092557fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd0180546001600160a01b0319166001600160a01b0384169081179091556000908152600f60205260408120805460ff1916909217909155348611610f5857610ec2863461187a565b60408051606081018252338152600160208201528082018790529051631df417fd60e21b81529192506001600160a01b038416916377d05ff4918991610f0f9183918b9190600401611a66565b60206040518083038185885af1158015610f2d573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190610f529190611aac565b50611015565b5086513490610f72906001600160a01b03163330896112c6565b8751610f88906001600160a01b03168388611355565b60408051606081018252338152600160208201528082018690529051631df417fd60e21b81526001600160a01b038416916377d05ff491610fd0918a918a9190600401611a66565b6020604051808303816000875af1158015610fef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110139190611aac565b505b801561108657604051600090339083908381818185875af1925050503d806000811461105d576040519150601f19603f3d011682016040523d82523d6000602084013e611062565b606091505b5050905080611084576040516312171d8360e31b815260040160405180910390fd5b505b60005b600b5481101561112c57826001600160a01b0316637180c8ca600b83815481106110b5576110b561184e565b60009182526020909120015460405160e083901b6001600160e01b03191681526001600160a01b03909116600482015260016024820152604401600060405180830381600087803b15801561110957600080fd5b505af115801561111d573d6000803e3d6000fd5b50505050806001019050611089565b5060035460405163ab033ea960e01b81526001600160a01b0391821660048201529083169063ab033ea990602401600060405180830381600087803b15801561117457600080fd5b505af1158015611188573d6000803e3d6000fd5b50939b9a5050505050505050505050565b6000546001600160a01b031633146111c3576040516282b42960e81b815260040160405180910390fd5b600a80546001600160a01b0319166001600160a01b0383169081179091556040517fe5693914d19c789bdee50a362998c0bc8d035a835f9871da5d51152f0582c34f90600090a250565b6000600e82815481106112225761122261184e565b6000918252602090912001546001600160a01b031692915050565b6000546001600160a01b03163314611267576040516282b42960e81b815260040160405180910390fd5b600380546001600160a01b0319166001600160a01b0383169081179091556040517ff3e07b4bb4394f2ff320bd1dd151551dff304d5e948b401d8558b228482c97d890600090a250565b6000600c82815481106112225761122261184e565b60006040516323b872dd60e01b81528460048201528360248201528260448201526020600060648360008a5af13d15601f3d116001600051141617169150508061134e5760405162461bcd60e51b81526020600482015260146024820152731514905394d1915497d19493d357d1905253115160621b60448201526064015b60405180910390fd5b5050505050565b600060405163095ea7b360e01b8152836004820152826024820152602060006044836000895af13d15601f3d11600160005114161716915050806113cc5760405162461bcd60e51b815260206004820152600e60248201526d1054141493d59157d1905253115160921b6044820152606401611345565b50505050565b828054828255906000526020600020908101928215611425579160200282015b828111156114255781546001600160a01b0319166001600160a01b038435161782556020909201916001909101906113f2565b50611431929150611435565b5090565b5b808211156114315760008155600101611436565b6001600160a01b038116811461145f57600080fd5b50565b803561146d8161144a565b919050565b60006020828403121561148457600080fd5b813561148f8161144a565b9392505050565b6000602082840312156114a857600080fd5b5035919050565b600080604083850312156114c257600080fd5b82356114cd8161144a565b946020939093013593505050565b600080604083850312156114ee57600080fd5b50508035926020909101359150565b6020808252825182820181905260009190848201906040850190845b8181101561153e5783516001600160a01b031683529284019291840191600101611519565b50909695505050505050565b60006080828403121561155c57600080fd5b50919050565b6000806020838503121561157557600080fd5b823567ffffffffffffffff8082111561158d57600080fd5b818501915085601f8301126115a157600080fd5b8135818111156115b057600080fd5b8660208260051b85010111156115c557600080fd5b60209290920196919550909350505050565b634e487b7160e01b600052604160045260246000fd5b604051610160810167ffffffffffffffff81118282101715611611576116116115d7565b60405290565b60006080828403121561162957600080fd5b6040516080810181811067ffffffffffffffff8211171561164c5761164c6115d7565b8060405250809150823581526020830135602082015260408301356040820152606083013560608201525092915050565b600082601f83011261168e57600080fd5b813567ffffffffffffffff808211156116a9576116a96115d7565b604051601f8301601f19908116603f011681019082821181831017156116d1576116d16115d7565b816040528381528660208588010111156116ea57600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060008060008086880361026081121561172557600080fd5b87356117308161144a565b96506101c0601f198201121561174557600080fd5b5061174e6115ed565b61175a60208901611462565b815261176860408901611462565b6020820152606088013560408201526080880135606082015260a0880135608082015260c088013560a082015260e088013560c08201526101008089013560e08301526101206117b9818b01611462565b8284015261014091506117cd828b01611462565b908301526117df8a6101608b01611617565b9082015294506101e087013567ffffffffffffffff8082111561180157600080fd5b61180d8a838b0161167d565b95506102008901359450610220890135935061024089013591508082111561183457600080fd5b5061184189828a0161167d565b9150509295509295509295565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b8181038181111561188d5761188d611864565b92915050565b634e487b7160e01b600052603160045260246000fd5b8082018082111561188d5761188d611864565b6000600182016118ce576118ce611864565b5060010190565b80516001600160a01b0316825260208101516118fc60208401826001600160a01b03169052565b5060408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e083015261010080820151611954828501826001600160a01b03169052565b5050610120818101516001600160a01b031690830152610140808201518051828501526020810151610160850152604081015161018085015260608101516101a08501526113cc565b6000815180845260005b818110156119c3576020818501810151868301820152016119a7565b506000602082860101526020601f19601f83011685010191505092915050565b60006101e06119f283866118d5565b806101c0840152611a058184018561199d565b95945050505050565b600060208284031215611a2057600080fd5b815161148f8161144a565b6001600160a01b03841681526000610200611a4960208401866118d5565b806101e0840152611a5c8184018561199d565b9695505050505050565b8381528260208201526060604082015260018060a01b03825116606082015260208201511515608082015260006040830151606060a0840152611a5c60c084018261199d565b600060208284031215611abe57600080fd5b505191905056fea26469706673582212205b34e244251bfd0e9fe791ecddac80804ece136977852d767025090938bf1fac64736f6c63430008130033"
)


class HyperdriveFactoryContract(Contract):
    """A web3.py Contract class for the HyperdriveFactory contract."""

    abi: ABI = hyperdrivefactory_abi
    bytecode: bytes = HexBytes(hyperdrivefactory_bytecode)

    def __init__(self, address: ChecksumAddress | None = None) -> None:
        try:
            # Initialize parent Contract class
            super().__init__(address=address)
            self.functions = HyperdriveFactoryContractFunctions(hyperdrivefactory_abi, self.w3, address)  # type: ignore
            self.events = HyperdriveFactoryContractEvents(hyperdrivefactory_abi, self.w3, address)  # type: ignore

        except FallbackNotFound:
            print("Fallback function not found. Continuing...")

    events: HyperdriveFactoryContractEvents

    functions: HyperdriveFactoryContractFunctions

    class ConstructorArgs(NamedTuple):
        """Arguments to pass the contract's constructor function."""

        factoryConfig: FactoryConfig

    @classmethod
    def constructor(cls, factoryConfig: FactoryConfig) -> ContractConstructor:  # type: ignore
        """Creates a transaction with the contract's constructor function.

        Parameters
        ----------

        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.

        """

        return super().constructor(dataclass_to_tuple(factoryConfig))

    @classmethod
    def deploy(cls, w3: Web3, account: LocalAccount | ChecksumAddress, constructorArgs: ConstructorArgs) -> Self:
        """Deploys and instance of the contract.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.
        """
        deployer = cls.factory(w3=w3)
        constructor_fn = deployer.constructor(*constructorArgs)

        # if an address is supplied, try to use a web3 default account
        if isinstance(account, str):
            tx_hash = constructor_fn.transact({"from": account})
            tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

            deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
            return deployed_contract

        # otherwise use the account provided.
        deployment_tx = constructor_fn.build_transaction()
        current_nonce = w3.eth.get_transaction_count(account.address)
        deployment_tx.update({"nonce": current_nonce})

        # Sign the transaction with local account private key
        signed_tx = account.sign_transaction(deployment_tx)

        # Send the signed transaction and wait for receipt
        tx_hash = w3.eth.send_raw_transaction(signed_tx.rawTransaction)
        tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

        deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
        return deployed_contract

    @classmethod
    def factory(cls, w3: Web3, class_name: str | None = None, **kwargs: Any) -> Type[Self]:
        """Deploys and instance of the contract.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        class_name: str | None
            The instance class name.

        Returns
        -------
        Self
            A deployed instance of the contract.
        """
        contract = super().factory(w3, class_name, **kwargs)
        contract.functions = HyperdriveFactoryContractFunctions(hyperdrivefactory_abi, w3, None)

        return contract
