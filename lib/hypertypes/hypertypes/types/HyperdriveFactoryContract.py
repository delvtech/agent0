"""A web3.py Contract class for the HyperdriveFactory contract.

DO NOT EDIT.  This file was generated by pypechain.  See documentation at
https://github.com/delvtech/pypechain"""

# contracts have PascalCase names
# pylint: disable=invalid-name

# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments

# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return

# This file is bound to get very long depending on contract sizes.
# pylint: disable=too-many-lines

# methods are overriden with specific arguments instead of generic *args, **kwargs
# pylint: disable=arguments-differ

from __future__ import annotations

from typing import Any, Iterable, NamedTuple, Sequence, Type, cast

from eth_account.signers.local import LocalAccount
from eth_typing import ChecksumAddress, HexStr
from hexbytes import HexBytes
from typing_extensions import Self
from web3 import Web3
from web3._utils.filters import LogFilter
from web3.contract.contract import (
    Contract,
    ContractConstructor,
    ContractEvent,
    ContractEvents,
    ContractFunction,
    ContractFunctions,
)
from web3.exceptions import FallbackNotFound
from web3.types import ABI, BlockIdentifier, CallOverride, EventData, TxParams

from .ERC4626HyperdriveFactoryTypes import FactoryConfig, Fees, PoolConfig
from .utilities import dataclass_to_tuple, rename_returned_types

structs = {
    "Fees": Fees,
    "FactoryConfig": FactoryConfig,
    "PoolConfig": PoolConfig,
}


class ERC4626HyperdriveFactoryDeployAndInitializeContractFunction(ContractFunction):
    """ContractFunction for the deployAndInitialize method."""

    def __call__(self, hyperdriveDeployer: str, config: PoolConfig, extraData: bytes, contribution: int, apr: int, initializeExtraData: bytes) -> HyperdriveFactoryDeployAndInitializeContractFunction:  # type: ignore
        clone = super().__call__(
            dataclass_to_tuple(hyperdriveDeployer),
            dataclass_to_tuple(config),
            dataclass_to_tuple(extraData),
            dataclass_to_tuple(contribution),
            dataclass_to_tuple(apr),
            dataclass_to_tuple(initializeExtraData),
        )
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(str, rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryFeeCollectorContractFunction(ContractFunction):
    """ContractFunction for the feeCollector method."""

    def __call__(self) -> HyperdriveFactoryFeeCollectorContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(str, rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryFeesContractFunction(ContractFunction):
    """ContractFunction for the fees method."""

    class ReturnValues(NamedTuple):
        """The return named tuple for Fees."""

        curve: int
        flat: int
        governance: int

    def __call__(self) -> HyperdriveFactoryFeesContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> ReturnValues:
        """returns ReturnValues."""
        # Define the expected return types from the smart contract call

        return_types = [int, int, int]

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return self.ReturnValues(*rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryGetDefaultPausersContractFunction(ContractFunction):
    """ContractFunction for the getDefaultPausers method."""

    def __call__(self) -> HyperdriveFactoryGetDefaultPausersContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[str]:
        """returns list[str]."""
        # Define the expected return types from the smart contract call

        return_types = list[str]

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(list[str], rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryGetHyperdriveDeployerAtIndexContractFunction(ContractFunction):
    """ContractFunction for the getHyperdriveDeployerAtIndex method."""

    def __call__(self, index: int) -> HyperdriveFactoryGetHyperdriveDeployerAtIndexContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(index))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(str, rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryGetHyperdriveDeployersInRangeContractFunction(ContractFunction):
    """ContractFunction for the getHyperdriveDeployersInRange method."""

    def __call__(self, startIndex: int, endIndex: int) -> HyperdriveFactoryGetHyperdriveDeployersInRangeContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(startIndex), dataclass_to_tuple(endIndex))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[str]:
        """returns list[str]."""
        # Define the expected return types from the smart contract call

        return_types = list[str]

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(list[str], rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryGetInstanceAtIndexContractFunction(ContractFunction):
    """ContractFunction for the getInstanceAtIndex method."""

    def __call__(self, index: int) -> HyperdriveFactoryGetInstanceAtIndexContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(index))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(str, rename_returned_types(return_types, raw_values))


class HyperdriveFactoryGetInstancesInRangeContractFunction(ContractFunction):
    """ContractFunction for the getInstancesInRange method."""

    def __call__(self, startIndex: int, endIndex: int) -> HyperdriveFactoryGetInstancesInRangeContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(startIndex), dataclass_to_tuple(endIndex))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[str]:
        """returns list[str]."""
        # Define the expected return types from the smart contract call

        return_types = list[str]

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(list[str], rename_returned_types(return_types, raw_values))


class HyperdriveFactoryGetNumberOfHyperdriveDeployersContractFunction(ContractFunction):
    """ContractFunction for the getNumberOfHyperdriveDeployers method."""

    def __call__(self) -> HyperdriveFactoryGetNumberOfHyperdriveDeployersContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(int, rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryGetNumberOfInstancesContractFunction(ContractFunction):
    """ContractFunction for the getNumberOfInstances method."""

    def __call__(self) -> HyperdriveFactoryGetNumberOfInstancesContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(list[str], rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryGovernanceContractFunction(ContractFunction):
    """ContractFunction for the governance method."""

    def __call__(self) -> HyperdriveFactoryGovernanceContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(str, rename_returned_types(structs, return_types, raw_values))


class ERC4626HyperdriveFactoryHyperdriveDeployerContractFunction(ContractFunction):
    """ContractFunction for the hyperdriveDeployer method."""

    def __call__(self) -> ERC4626HyperdriveFactoryHyperdriveDeployerContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(str, rename_returned_types(structs, return_types, raw_values))


class ERC4626HyperdriveFactoryHyperdriveGovernanceContractFunction(ContractFunction):
    """ContractFunction for the hyperdriveGovernance method."""

    def __call__(self) -> HyperdriveFactoryHyperdriveGovernanceContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(str, rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryIsHyperdriveDeployerContractFunction(ContractFunction):
    """ContractFunction for the isHyperdriveDeployer method."""

    def __call__(self, arg1: str) -> HyperdriveFactoryIsHyperdriveDeployerContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(arg1))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bool:
        """returns bool."""
        # Define the expected return types from the smart contract call

        return_types = bool

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(bool, rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryIsInstanceContractFunction(ContractFunction):
    """ContractFunction for the isInstance method."""

    def __call__(self, arg1: str) -> HyperdriveFactoryIsInstanceContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(arg1))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bool:
        """returns bool."""
        # Define the expected return types from the smart contract call

        return_types = bool

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(bool, rename_returned_types(return_types, raw_values))


class HyperdriveFactoryIsOfficialContractFunction(ContractFunction):
    """ContractFunction for the isOfficial method."""

    def __call__(self, instance: str) -> HyperdriveFactoryIsOfficialContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(instance))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(int, rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryLinkerCodeHashContractFunction(ContractFunction):
    """ContractFunction for the linkerCodeHash method."""

    def __call__(self) -> HyperdriveFactoryLinkerCodeHashContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bytes:
        """returns bytes."""
        # Define the expected return types from the smart contract call

        return_types = bytes

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(bytes, rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryLinkerFactoryContractFunction(ContractFunction):
    """ContractFunction for the linkerFactory method."""

    def __call__(self) -> HyperdriveFactoryLinkerFactoryContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(str, rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryRemoveHyperdriveDeployerContractFunction(ContractFunction):
    """ContractFunction for the removeHyperdriveDeployer method."""

    def __call__(self, hyperdriveDeployer: str, index: int) -> HyperdriveFactoryRemoveHyperdriveDeployerContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(hyperdriveDeployer), dataclass_to_tuple(index))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(str, rename_returned_types(structs, return_types, raw_values))


class ERC4626HyperdriveFactoryTarget1DeployerContractFunction(ContractFunction):
    """ContractFunction for the target1Deployer method."""

    def __call__(self) -> ERC4626HyperdriveFactoryTarget1DeployerContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # Define the expected return types from the smart contract call

        return_types = str

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(str, rename_returned_types(structs, return_types, raw_values))


class ERC4626HyperdriveFactoryUpdateDefaultPausersContractFunction(ContractFunction):
    """ContractFunction for the updateDefaultPausers method."""

    def __call__(self, defaultPausers_: list[str]) -> HyperdriveFactoryUpdateDefaultPausersContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(defaultPausers_))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class HyperdriveFactoryUpdateFeeCollectorContractFunction(ContractFunction):
    """ContractFunction for the updateFeeCollector method."""

    def __call__(self, feeCollector: str) -> HyperdriveFactoryUpdateFeeCollectorContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(feeCollector))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class HyperdriveFactoryUpdateFeesContractFunction(ContractFunction):
    """ContractFunction for the updateFees method."""

    def __call__(self, fees: Fees) -> HyperdriveFactoryUpdateFeesContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(fees))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class HyperdriveFactoryUpdateGovernanceContractFunction(ContractFunction):
    """ContractFunction for the updateGovernance method."""

    def __call__(self, governance: str) -> HyperdriveFactoryUpdateGovernanceContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(governance))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class HyperdriveFactoryUpdateHyperdriveGovernanceContractFunction(ContractFunction):
    """ContractFunction for the updateHyperdriveGovernance method."""

    def __call__(self, hyperdriveGovernance: str) -> HyperdriveFactoryUpdateHyperdriveGovernanceContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(hyperdriveGovernance))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class HyperdriveFactoryUpdateLinkerCodeHashContractFunction(ContractFunction):
    """ContractFunction for the updateLinkerCodeHash method."""

    def __call__(self, linkerCodeHash: bytes) -> HyperdriveFactoryUpdateLinkerCodeHashContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(linkerCodeHash))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class HyperdriveFactoryUpdateLinkerFactoryContractFunction(ContractFunction):
    """ContractFunction for the updateLinkerFactory method."""

    def __call__(self, linkerFactory: str) -> HyperdriveFactoryUpdateLinkerFactoryContractFunction:  # type: ignore
        clone = super().__call__(dataclass_to_tuple(linkerFactory))
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # Define the expected return types from the smart contract call

        # Call the function


class HyperdriveFactoryVersionCounterContractFunction(ContractFunction):
    """ContractFunction for the versionCounter method."""

    def __call__(self) -> HyperdriveFactoryVersionCounterContractFunction:  # type: ignore
        clone = super().__call__()
        self.kwargs = clone.kwargs
        self.args = clone.args
        return self

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier = "latest",
        state_override: CallOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # Define the expected return types from the smart contract call

        return_types = int

        # Call the function

        raw_values = super().call(transaction, block_identifier, state_override, ccip_read_enabled)
        return cast(int, rename_returned_types(structs, return_types, raw_values))


class HyperdriveFactoryContractFunctions(ContractFunctions):
    """ContractFunctions for the HyperdriveFactory contract."""

    addHyperdriveDeployer: HyperdriveFactoryAddHyperdriveDeployerContractFunction

    deployAndInitialize: HyperdriveFactoryDeployAndInitializeContractFunction

    feeCollector: HyperdriveFactoryFeeCollectorContractFunction

    fees: HyperdriveFactoryFeesContractFunction

    getDefaultPausers: HyperdriveFactoryGetDefaultPausersContractFunction

    getHyperdriveDeployerAtIndex: HyperdriveFactoryGetHyperdriveDeployerAtIndexContractFunction

    getHyperdriveDeployersInRange: HyperdriveFactoryGetHyperdriveDeployersInRangeContractFunction

    getInstanceAtIndex: HyperdriveFactoryGetInstanceAtIndexContractFunction

    getInstancesInRange: HyperdriveFactoryGetInstancesInRangeContractFunction

    getNumberOfHyperdriveDeployers: HyperdriveFactoryGetNumberOfHyperdriveDeployersContractFunction

    getNumberOfInstances: HyperdriveFactoryGetNumberOfInstancesContractFunction

    governance: HyperdriveFactoryGovernanceContractFunction

    hyperdriveGovernance: HyperdriveFactoryHyperdriveGovernanceContractFunction

    isHyperdriveDeployer: HyperdriveFactoryIsHyperdriveDeployerContractFunction

    isInstance: HyperdriveFactoryIsInstanceContractFunction

    isOfficial: HyperdriveFactoryIsOfficialContractFunction

    linkerCodeHash: HyperdriveFactoryLinkerCodeHashContractFunction

    linkerFactory: HyperdriveFactoryLinkerFactoryContractFunction

    removeHyperdriveDeployer: HyperdriveFactoryRemoveHyperdriveDeployerContractFunction

    updateDefaultPausers: HyperdriveFactoryUpdateDefaultPausersContractFunction

    updateFeeCollector: HyperdriveFactoryUpdateFeeCollectorContractFunction

    updateFees: HyperdriveFactoryUpdateFeesContractFunction

    updateGovernance: HyperdriveFactoryUpdateGovernanceContractFunction

    updateHyperdriveGovernance: HyperdriveFactoryUpdateHyperdriveGovernanceContractFunction

    updateLinkerCodeHash: HyperdriveFactoryUpdateLinkerCodeHashContractFunction

    updateLinkerFactory: HyperdriveFactoryUpdateLinkerFactoryContractFunction

    versionCounter: HyperdriveFactoryVersionCounterContractFunction

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
        decode_tuples: bool | None = False,
    ) -> None:
        super().__init__(abi, w3, address, decode_tuples)
        self.addHyperdriveDeployer = HyperdriveFactoryAddHyperdriveDeployerContractFunction.factory(
            "addHyperdriveDeployer",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="addHyperdriveDeployer",
        )
        self.deployAndInitialize = HyperdriveFactoryDeployAndInitializeContractFunction.factory(
            "deployAndInitialize",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="deployAndInitialize",
        )
        self.feeCollector = HyperdriveFactoryFeeCollectorContractFunction.factory(
            "feeCollector",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="feeCollector",
        )
        self.fees = HyperdriveFactoryFeesContractFunction.factory(
            "fees",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="fees",
        )
        self.getDefaultPausers = HyperdriveFactoryGetDefaultPausersContractFunction.factory(
            "getDefaultPausers",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="getDefaultPausers",
        )
        self.getHyperdriveDeployerAtIndex = HyperdriveFactoryGetHyperdriveDeployerAtIndexContractFunction.factory(
            "getHyperdriveDeployerAtIndex",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="getHyperdriveDeployerAtIndex",
        )
        self.getHyperdriveDeployersInRange = HyperdriveFactoryGetHyperdriveDeployersInRangeContractFunction.factory(
            "getHyperdriveDeployersInRange",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="getHyperdriveDeployersInRange",
        )
        self.getInstanceAtIndex = HyperdriveFactoryGetInstanceAtIndexContractFunction.factory(
            "getInstanceAtIndex",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="getInstanceAtIndex",
        )
        self.getInstancesInRange = HyperdriveFactoryGetInstancesInRangeContractFunction.factory(
            "getInstancesInRange",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="getInstancesInRange",
        )
        self.getNumberOfHyperdriveDeployers = HyperdriveFactoryGetNumberOfHyperdriveDeployersContractFunction.factory(
            "getNumberOfHyperdriveDeployers",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="getNumberOfHyperdriveDeployers",
        )
        self.getNumberOfInstances = HyperdriveFactoryGetNumberOfInstancesContractFunction.factory(
            "getNumberOfInstances",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="getNumberOfInstances",
        )
        self.governance = HyperdriveFactoryGovernanceContractFunction.factory(
            "governance",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="governance",
        )
        self.hyperdriveGovernance = HyperdriveFactoryHyperdriveGovernanceContractFunction.factory(
            "hyperdriveGovernance",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="hyperdriveGovernance",
        )
        self.isHyperdriveDeployer = HyperdriveFactoryIsHyperdriveDeployerContractFunction.factory(
            "isHyperdriveDeployer",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="isHyperdriveDeployer",
        )
        self.isInstance = HyperdriveFactoryIsInstanceContractFunction.factory(
            "isInstance",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="isInstance",
        )
        self.isOfficial = HyperdriveFactoryIsOfficialContractFunction.factory(
            "isOfficial",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="isOfficial",
        )
        self.linkerCodeHash = HyperdriveFactoryLinkerCodeHashContractFunction.factory(
            "linkerCodeHash",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="linkerCodeHash",
        )
        self.linkerFactory = HyperdriveFactoryLinkerFactoryContractFunction.factory(
            "linkerFactory",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="linkerFactory",
        )
        self.removeHyperdriveDeployer = HyperdriveFactoryRemoveHyperdriveDeployerContractFunction.factory(
            "removeHyperdriveDeployer",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="removeHyperdriveDeployer",
        )
        self.updateDefaultPausers = HyperdriveFactoryUpdateDefaultPausersContractFunction.factory(
            "updateDefaultPausers",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="updateDefaultPausers",
        )
        self.updateFeeCollector = HyperdriveFactoryUpdateFeeCollectorContractFunction.factory(
            "updateFeeCollector",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="updateFeeCollector",
        )
        self.updateFees = HyperdriveFactoryUpdateFeesContractFunction.factory(
            "updateFees",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="updateFees",
        )
        self.updateGovernance = HyperdriveFactoryUpdateGovernanceContractFunction.factory(
            "updateGovernance",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="updateGovernance",
        )
        self.updateHyperdriveGovernance = HyperdriveFactoryUpdateHyperdriveGovernanceContractFunction.factory(
            "updateHyperdriveGovernance",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="updateHyperdriveGovernance",
        )
        self.updateLinkerCodeHash = HyperdriveFactoryUpdateLinkerCodeHashContractFunction.factory(
            "updateLinkerCodeHash",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="updateLinkerCodeHash",
        )
        self.updateLinkerFactory = HyperdriveFactoryUpdateLinkerFactoryContractFunction.factory(
            "updateLinkerFactory",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="updateLinkerFactory",
        )
        self.versionCounter = HyperdriveFactoryVersionCounterContractFunction.factory(
            "versionCounter",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            function_identifier="versionCounter",
        )


class HyperdriveFactoryDeployedContractEvent(ContractEvent):
    """ContractEvent for Deployed."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "HyperdriveFactoryDeployedContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["HyperdriveFactoryDeployedContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "HyperdriveFactoryDeployedContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["HyperdriveFactoryDeployedContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class HyperdriveFactoryFeeCollectorUpdatedContractEvent(ContractEvent):
    """ContractEvent for FeeCollectorUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "HyperdriveFactoryFeeCollectorUpdatedContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["HyperdriveFactoryFeeCollectorUpdatedContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "HyperdriveFactoryFeeCollectorUpdatedContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["HyperdriveFactoryFeeCollectorUpdatedContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class HyperdriveFactoryGovernanceUpdatedContractEvent(ContractEvent):
    """ContractEvent for GovernanceUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "HyperdriveFactoryGovernanceUpdatedContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["HyperdriveFactoryGovernanceUpdatedContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "HyperdriveFactoryGovernanceUpdatedContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["HyperdriveFactoryGovernanceUpdatedContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class HyperdriveFactoryHyperdriveGovernanceUpdatedContractEvent(ContractEvent):
    """ContractEvent for HyperdriveGovernanceUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "HyperdriveFactoryHyperdriveGovernanceUpdatedContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["HyperdriveFactoryHyperdriveGovernanceUpdatedContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "HyperdriveFactoryHyperdriveGovernanceUpdatedContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["HyperdriveFactoryHyperdriveGovernanceUpdatedContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class HyperdriveFactoryImplementationUpdatedContractEvent(ContractEvent):
    """ContractEvent for ImplementationUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "HyperdriveFactoryImplementationUpdatedContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["HyperdriveFactoryImplementationUpdatedContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "HyperdriveFactoryImplementationUpdatedContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["HyperdriveFactoryImplementationUpdatedContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class HyperdriveFactoryLinkerCodeHashUpdatedContractEvent(ContractEvent):
    """ContractEvent for LinkerCodeHashUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "HyperdriveFactoryLinkerCodeHashUpdatedContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["HyperdriveFactoryLinkerCodeHashUpdatedContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "HyperdriveFactoryLinkerCodeHashUpdatedContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["HyperdriveFactoryLinkerCodeHashUpdatedContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class HyperdriveFactoryLinkerFactoryUpdatedContractEvent(ContractEvent):
    """ContractEvent for LinkerFactoryUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # @combomethod destroys return types, so we are redefining functions as both class and instance
    # pylint: disable=function-redefined

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    def get_logs(  # type: ignore
        self: "HyperdriveFactoryLinkerFactoryUpdatedContractEvent",
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    @classmethod
    def get_logs(  # type: ignore
        cls: Type["HyperdriveFactoryLinkerFactoryUpdatedContractEvent"],
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[EventData]:
        return cast(
            Iterable[EventData],
            super().get_logs(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, block_hash=block_hash
            ),
        )

    def create_filter(  # type: ignore
        self: "HyperdriveFactoryLinkerFactoryUpdatedContractEvent",
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )

    @classmethod
    def create_filter(  # type: ignore
        cls: Type["HyperdriveFactoryLinkerFactoryUpdatedContractEvent"],
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        fromBlock: BlockIdentifier | None = None,
        toBlock: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters, fromBlock=fromBlock, toBlock=toBlock, address=address, topics=topics
            ),
        )


class HyperdriveFactoryContractEvents(ContractEvents):
    """ContractEvents for the HyperdriveFactory contract."""

    Deployed: HyperdriveFactoryDeployedContractEvent

    FeeCollectorUpdated: HyperdriveFactoryFeeCollectorUpdatedContractEvent

    GovernanceUpdated: HyperdriveFactoryGovernanceUpdatedContractEvent

    HyperdriveGovernanceUpdated: HyperdriveFactoryHyperdriveGovernanceUpdatedContractEvent

    ImplementationUpdated: HyperdriveFactoryImplementationUpdatedContractEvent

    LinkerCodeHashUpdated: HyperdriveFactoryLinkerCodeHashUpdatedContractEvent

    LinkerFactoryUpdated: HyperdriveFactoryLinkerFactoryUpdatedContractEvent

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
    ) -> None:
        super().__init__(abi, w3, address)
        self.Deployed = cast(
            HyperdriveFactoryDeployedContractEvent,
            HyperdriveFactoryDeployedContractEvent.factory(
                "Deployed", w3=w3, contract_abi=abi, address=address, event_name="Deployed"
            ),
        )
        self.FeeCollectorUpdated = cast(
            HyperdriveFactoryFeeCollectorUpdatedContractEvent,
            HyperdriveFactoryFeeCollectorUpdatedContractEvent.factory(
                "FeeCollectorUpdated", w3=w3, contract_abi=abi, address=address, event_name="FeeCollectorUpdated"
            ),
        )
        self.GovernanceUpdated = cast(
            HyperdriveFactoryGovernanceUpdatedContractEvent,
            HyperdriveFactoryGovernanceUpdatedContractEvent.factory(
                "GovernanceUpdated", w3=w3, contract_abi=abi, address=address, event_name="GovernanceUpdated"
            ),
        )
        self.HyperdriveGovernanceUpdated = cast(
            HyperdriveFactoryHyperdriveGovernanceUpdatedContractEvent,
            HyperdriveFactoryHyperdriveGovernanceUpdatedContractEvent.factory(
                "HyperdriveGovernanceUpdated",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="HyperdriveGovernanceUpdated",
            ),
        )
        self.ImplementationUpdated = cast(
            HyperdriveFactoryImplementationUpdatedContractEvent,
            HyperdriveFactoryImplementationUpdatedContractEvent.factory(
                "ImplementationUpdated", w3=w3, contract_abi=abi, address=address, event_name="ImplementationUpdated"
            ),
        )
        self.LinkerCodeHashUpdated = cast(
            HyperdriveFactoryLinkerCodeHashUpdatedContractEvent,
            HyperdriveFactoryLinkerCodeHashUpdatedContractEvent.factory(
                "LinkerCodeHashUpdated", w3=w3, contract_abi=abi, address=address, event_name="LinkerCodeHashUpdated"
            ),
        )
        self.LinkerFactoryUpdated = cast(
            HyperdriveFactoryLinkerFactoryUpdatedContractEvent,
            HyperdriveFactoryLinkerFactoryUpdatedContractEvent.factory(
                "LinkerFactoryUpdated", w3=w3, contract_abi=abi, address=address, event_name="LinkerFactoryUpdated"
            ),
        )


hyperdrivefactory_abi: ABI = cast(
    ABI,
    [
        {
            "type": "constructor",
            "inputs": [
                {
                    "name": "_factoryConfig",
                    "type": "tuple",
                    "internalType": "struct HyperdriveFactory.FactoryConfig",
                    "components": [
                        {"name": "governance", "type": "address", "internalType": "address"},
                        {"name": "hyperdriveGovernance", "type": "address", "internalType": "address"},
                        {"name": "defaultPausers", "type": "address[]", "internalType": "address[]"},
                        {"name": "feeCollector", "type": "address", "internalType": "address"},
                        {
                            "name": "fees",
                            "type": "tuple",
                            "internalType": "struct IHyperdrive.Fees",
                            "components": [
                                {"name": "curve", "type": "uint256", "internalType": "uint256"},
                                {"name": "flat", "type": "uint256", "internalType": "uint256"},
                                {"name": "governance", "type": "uint256", "internalType": "uint256"},
                            ],
                        },
                        {
                            "name": "maxFees",
                            "type": "tuple",
                            "internalType": "struct IHyperdrive.Fees",
                            "components": [
                                {"name": "curve", "type": "uint256", "internalType": "uint256"},
                                {"name": "flat", "type": "uint256", "internalType": "uint256"},
                                {"name": "governance", "type": "uint256", "internalType": "uint256"},
                            ],
                        },
                        {"name": "linkerFactory", "type": "address", "internalType": "address"},
                        {"name": "linkerCodeHash", "type": "bytes32", "internalType": "bytes32"},
                    ],
                }
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "addHyperdriveDeployer",
            "inputs": [{"name": "_hyperdriveDeployer", "type": "address", "internalType": "address"}],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "deployAndInitialize",
            "inputs": [
                {"name": "_hyperdriveDeployer", "type": "address", "internalType": "address"},
                {
                    "name": "_config",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.PoolConfig",
                    "components": [
                        {"name": "baseToken", "type": "address", "internalType": "contract IERC20"},
                        {"name": "linkerFactory", "type": "address", "internalType": "address"},
                        {"name": "linkerCodeHash", "type": "bytes32", "internalType": "bytes32"},
                        {"name": "initialSharePrice", "type": "uint256", "internalType": "uint256"},
                        {"name": "minimumShareReserves", "type": "uint256", "internalType": "uint256"},
                        {"name": "minimumTransactionAmount", "type": "uint256", "internalType": "uint256"},
                        {"name": "positionDuration", "type": "uint256", "internalType": "uint256"},
                        {"name": "checkpointDuration", "type": "uint256", "internalType": "uint256"},
                        {"name": "timeStretch", "type": "uint256", "internalType": "uint256"},
                        {"name": "governance", "type": "address", "internalType": "address"},
                        {"name": "feeCollector", "type": "address", "internalType": "address"},
                        {
                            "name": "fees",
                            "type": "tuple",
                            "internalType": "struct IHyperdrive.Fees",
                            "components": [
                                {"name": "curve", "type": "uint256", "internalType": "uint256"},
                                {"name": "flat", "type": "uint256", "internalType": "uint256"},
                                {"name": "governance", "type": "uint256", "internalType": "uint256"},
                            ],
                        },
                    ],
                },
                {"name": "_extraData", "type": "bytes", "internalType": "bytes"},
                {"name": "_contribution", "type": "uint256", "internalType": "uint256"},
                {"name": "_apr", "type": "uint256", "internalType": "uint256"},
                {"name": "_initializeExtraData", "type": "bytes", "internalType": "bytes"},
            ],
            "outputs": [{"name": "", "type": "address", "internalType": "contract IHyperdrive"}],
            "stateMutability": "payable",
        },
        {
            "type": "function",
            "name": "feeCollector",
            "inputs": [],
            "outputs": [{"name": "", "type": "address", "internalType": "address"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "fees",
            "inputs": [],
            "outputs": [
                {"name": "curve", "type": "uint256", "internalType": "uint256"},
                {"name": "flat", "type": "uint256", "internalType": "uint256"},
                {"name": "governance", "type": "uint256", "internalType": "uint256"},
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getDefaultPausers",
            "inputs": [],
            "outputs": [{"name": "", "type": "address[]", "internalType": "address[]"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getHyperdriveDeployerAtIndex",
            "inputs": [{"name": "index", "type": "uint256", "internalType": "uint256"}],
            "outputs": [{"name": "", "type": "address", "internalType": "address"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getHyperdriveDeployersInRange",
            "inputs": [
                {"name": "startIndex", "type": "uint256", "internalType": "uint256"},
                {"name": "endIndex", "type": "uint256", "internalType": "uint256"},
            ],
            "outputs": [{"name": "range", "type": "address[]", "internalType": "address[]"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getInstanceAtIndex",
            "inputs": [{"name": "index", "type": "uint256", "internalType": "uint256"}],
            "outputs": [{"name": "", "type": "address", "internalType": "address"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getInstancesInRange",
            "inputs": [
                {"name": "startIndex", "type": "uint256", "internalType": "uint256"},
                {"name": "endIndex", "type": "uint256", "internalType": "uint256"},
            ],
            "outputs": [{"name": "range", "type": "address[]", "internalType": "address[]"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getNumberOfHyperdriveDeployers",
            "inputs": [],
            "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getNumberOfInstances",
            "inputs": [],
            "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "governance",
            "inputs": [],
            "outputs": [{"name": "", "type": "address", "internalType": "address"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "hyperdriveGovernance",
            "inputs": [],
            "outputs": [{"name": "", "type": "address", "internalType": "address"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "isHyperdriveDeployer",
            "inputs": [{"name": "", "type": "address", "internalType": "address"}],
            "outputs": [{"name": "", "type": "bool", "internalType": "bool"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "isInstance",
            "inputs": [{"name": "", "type": "address", "internalType": "address"}],
            "outputs": [{"name": "", "type": "bool", "internalType": "bool"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "isOfficial",
            "inputs": [{"name": "instance", "type": "address", "internalType": "address"}],
            "outputs": [{"name": "version", "type": "uint256", "internalType": "uint256"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "linkerCodeHash",
            "inputs": [],
            "outputs": [{"name": "", "type": "bytes32", "internalType": "bytes32"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "linkerFactory",
            "inputs": [],
            "outputs": [{"name": "", "type": "address", "internalType": "address"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "removeHyperdriveDeployer",
            "inputs": [
                {"name": "_hyperdriveDeployer", "type": "address", "internalType": "address"},
                {"name": "_index", "type": "uint256", "internalType": "uint256"},
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "updateDefaultPausers",
            "inputs": [{"name": "_defaultPausers_", "type": "address[]", "internalType": "address[]"}],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "updateFeeCollector",
            "inputs": [{"name": "_feeCollector", "type": "address", "internalType": "address"}],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "updateFees",
            "inputs": [
                {
                    "name": "_fees",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.Fees",
                    "components": [
                        {"name": "curve", "type": "uint256", "internalType": "uint256"},
                        {"name": "flat", "type": "uint256", "internalType": "uint256"},
                        {"name": "governance", "type": "uint256", "internalType": "uint256"},
                    ],
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "updateGovernance",
            "inputs": [{"name": "_governance", "type": "address", "internalType": "address"}],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "updateHyperdriveGovernance",
            "inputs": [{"name": "_hyperdriveGovernance", "type": "address", "internalType": "address"}],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "updateLinkerCodeHash",
            "inputs": [{"name": "_linkerCodeHash", "type": "bytes32", "internalType": "bytes32"}],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "updateLinkerFactory",
            "inputs": [{"name": "_linkerFactory", "type": "address", "internalType": "address"}],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "versionCounter",
            "inputs": [],
            "outputs": [{"name": "", "type": "uint256", "internalType": "uint256"}],
            "stateMutability": "view",
        },
        {
            "type": "event",
            "name": "Deployed",
            "inputs": [
                {"name": "version", "type": "uint256", "indexed": True, "internalType": "uint256"},
                {"name": "hyperdrive", "type": "address", "indexed": False, "internalType": "address"},
                {
                    "name": "config",
                    "type": "tuple",
                    "indexed": False,
                    "internalType": "struct IHyperdrive.PoolConfig",
                    "components": [
                        {"name": "baseToken", "type": "address", "internalType": "contract IERC20"},
                        {"name": "linkerFactory", "type": "address", "internalType": "address"},
                        {"name": "linkerCodeHash", "type": "bytes32", "internalType": "bytes32"},
                        {"name": "initialSharePrice", "type": "uint256", "internalType": "uint256"},
                        {"name": "minimumShareReserves", "type": "uint256", "internalType": "uint256"},
                        {"name": "minimumTransactionAmount", "type": "uint256", "internalType": "uint256"},
                        {"name": "positionDuration", "type": "uint256", "internalType": "uint256"},
                        {"name": "checkpointDuration", "type": "uint256", "internalType": "uint256"},
                        {"name": "timeStretch", "type": "uint256", "internalType": "uint256"},
                        {"name": "governance", "type": "address", "internalType": "address"},
                        {"name": "feeCollector", "type": "address", "internalType": "address"},
                        {
                            "name": "fees",
                            "type": "tuple",
                            "internalType": "struct IHyperdrive.Fees",
                            "components": [
                                {"name": "curve", "type": "uint256", "internalType": "uint256"},
                                {"name": "flat", "type": "uint256", "internalType": "uint256"},
                                {"name": "governance", "type": "uint256", "internalType": "uint256"},
                            ],
                        },
                    ],
                },
                {"name": "extraData", "type": "bytes", "indexed": False, "internalType": "bytes"},
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "FeeCollectorUpdated",
            "inputs": [{"name": "newFeeCollector", "type": "address", "indexed": True, "internalType": "address"}],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "GovernanceUpdated",
            "inputs": [{"name": "governance", "type": "address", "indexed": True, "internalType": "address"}],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "HyperdriveGovernanceUpdated",
            "inputs": [{"name": "hyperdriveGovernance", "type": "address", "indexed": True, "internalType": "address"}],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "ImplementationUpdated",
            "inputs": [{"name": "newDeployer", "type": "address", "indexed": True, "internalType": "address"}],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "LinkerCodeHashUpdated",
            "inputs": [{"name": "newLinkerCodeHash", "type": "bytes32", "indexed": True, "internalType": "bytes32"}],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "LinkerFactoryUpdated",
            "inputs": [{"name": "newLinkerFactory", "type": "address", "indexed": True, "internalType": "address"}],
            "anonymous": False,
        },
        {"type": "error", "name": "ApprovalFailed", "inputs": []},
        {"type": "error", "name": "EndIndexTooLarge", "inputs": []},
        {"type": "error", "name": "FeeTooHigh", "inputs": []},
        {"type": "error", "name": "HyperdriveDeployerAlreadyAdded", "inputs": []},
        {"type": "error", "name": "HyperdriveDeployerIndexMismatch", "inputs": []},
        {"type": "error", "name": "HyperdriveDeployerNotAdded", "inputs": []},
        {"type": "error", "name": "InvalidDeployer", "inputs": []},
        {"type": "error", "name": "InvalidIndexes", "inputs": []},
        {"type": "error", "name": "MaxFeeTooHigh", "inputs": []},
        {"type": "error", "name": "NonPayableInitialization", "inputs": []},
        {"type": "error", "name": "Unauthorized", "inputs": []},
    ],
)
# pylint: disable=line-too-long
hyperdrivefactory_bytecode = HexStr(
    ""
)


class HyperdriveFactoryContract(Contract):
    """A web3.py Contract class for the HyperdriveFactory contract."""

    abi: ABI = hyperdrivefactory_abi
    bytecode: bytes = HexBytes(hyperdrivefactory_bytecode)

    def __init__(self, address: ChecksumAddress | None = None) -> None:
        try:
            # Initialize parent Contract class
            super().__init__(address=address)
            self.functions = HyperdriveFactoryContractFunctions(hyperdrivefactory_abi, self.w3, address)  # type: ignore
            self.events = HyperdriveFactoryContractEvents(hyperdrivefactory_abi, self.w3, address)  # type: ignore

        except FallbackNotFound:
            print("Fallback function not found. Continuing...")

    events: HyperdriveFactoryContractEvents

    functions: HyperdriveFactoryContractFunctions

    class ConstructorArgs(NamedTuple):
        """Arguments to pass the contract's constructor function."""

        factoryConfig: FactoryConfig

        sweepTargets: list[str]

    @classmethod
    def constructor(cls, factoryConfig: FactoryConfig, sweepTargets: list[str]) -> ContractConstructor:  # type: ignore
        """Creates a transaction with the contract's constructor function.

        Parameters
        ----------

        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.

        """

        return super().constructor(dataclass_to_tuple(factoryConfig), dataclass_to_tuple(sweepTargets))

    @classmethod
    def deploy(cls, w3: Web3, account: LocalAccount | ChecksumAddress, constructorArgs: ConstructorArgs) -> Self:
        """Deploys and instance of the contract.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.
        """
        deployer = cls.factory(w3=w3)
        constructor_fn = deployer.constructor(*constructorArgs)

        # if an address is supplied, try to use a web3 default account
        if isinstance(account, str):
            tx_hash = constructor_fn.transact({"from": account})
            tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

            deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
            return deployed_contract

        # otherwise use the account provided.
        deployment_tx = constructor_fn.build_transaction()
        current_nonce = w3.eth.get_transaction_count(account.address)
        deployment_tx.update({"nonce": current_nonce})

        # Sign the transaction with local account private key
        signed_tx = account.sign_transaction(deployment_tx)

        # Send the signed transaction and wait for receipt
        tx_hash = w3.eth.send_raw_transaction(signed_tx.rawTransaction)
        tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

        deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
        return deployed_contract

    @classmethod
    def factory(cls, w3: Web3, class_name: str | None = None, **kwargs: Any) -> Type[Self]:
        """Deploys and instance of the contract.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        class_name: str | None
            The instance class name.

        Returns
        -------
        Self
            A deployed instance of the contract.
        """
        contract = super().factory(w3, class_name, **kwargs)
        contract.functions = HyperdriveFactoryContractFunctions(hyperdrivefactory_abi, w3, None)

        return contract
