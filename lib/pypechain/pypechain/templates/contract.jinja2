#pylint: disable=invalid-name
"""A web3.py Contract class for the {{contract_name}} contract."""
from __future__ import annotations

from typing import Any, cast
from eth_typing import ChecksumAddress
from web3.contract.contract import Contract, ContractFunction, ContractFunctions
from web3.exceptions import FallbackNotFound

{% for function in functions %}
class {{contract_name}}{{function.capitalized_name}}ContractFunction(ContractFunction):
    """ContractFunction for the {{function.name}} method."""

    # pylint: disable=arguments-differ
    def __call__(self, {{function.input_names_and_types|join(', ')}}) -> "{{contract_name}}{{function.capitalized_name}}ContractFunction":
        super().__call__({{function.input_names|join(', ')}})
        return self
    # TODO: add call def so we can get return types for the calls
    # def call()

{% endfor %}


class {{contract_name}}ContractFunctions(ContractFunctions):
    """ContractFunctions for the {{contract_name}} contract."""
{% for function in functions %}
    {{function.name}}: {{contract_name}}{{function.capitalized_name}}ContractFunction
{% endfor %}

class {{contract_name}}Contract(Contract):
    """A web3.py Contract class for the {{contract_name}} contract."""

    def __init__(self, address: ChecksumAddress | None = None, abi=Any) -> None:
        self.abi = abi
        # TODO: make this better, shouldn't initialize to the zero address, but the Contract's init
        # function requires an address.
        self.address = address if address else cast(ChecksumAddress, "0x0000000000000000000000000000000000000000")

        try:
            # Initialize parent Contract class
            super().__init__(address=address)

        except FallbackNotFound:
            print("Fallback function not found. Continuing...")

    # TODO: add events
    # events: ERC20ContractEvents

    functions: {{contract_name}}ContractFunctions
